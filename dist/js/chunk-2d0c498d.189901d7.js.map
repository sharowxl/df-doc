{"version":3,"sources":["webpack:///./src/docs-ui/data/xTable.md","webpack:///src/docs-ui/data/xTable.md","webpack:///./src/docs-ui/data/xTable.md?aafe","webpack:///./src/docs-ui/data/xTable.md?0d7d"],"names":["render","_vm","this","_c","_self","staticClass","_m","_v","slot","pre","attrs","staticRenderFns","name","components","_h","$createElement","staticStyle","tableData","pageSizes","pageSize","layout","total","on","handlePaginationChange","Array","fill","map","item","index","date","gender","address","getData","page","console","log","concat","result","slice","getTotal","democomponentExport","data","currentPage","methods","paginationStatus","created","_objectSpread","ref","columns","id","label","prop","minWidth","children","hasChildren","Number","operationButtons","toolbarList","click","row","buttonIndex","rowIndex","icon","type","pageData","computed","length","start","end","directives","rawName","value","loading","expression","_this","$refs","table","updateCurrentPage","getTableData","_this2","setTimeout","$set","handleFollowUp","resPonseKey","_this3","dataKey","totalKey","pageInfo","xtable","rand","min","max","Math","floor","random","sex","Promise","resolve","list","totalRows","columnOptions","handleFormEnter","handleFormChange","_this4","form","formType","modelKey","itemType","labelKey","valueKey","bindObj","dicData","editConfig","trigger","mode","editableColumns","showable","addRow","splice","_this5","nickName","$nextTick","openEdit","_XTable","editFocus","push","newRowIndex","_Table","getRefTable","_Table$getNextEditabl","getNextEditableSlot","columnProp","isFirstEditableSlot","mounted","_this6","selectLabel","independent","filterable","remote","events","e","_ref","vm","$index","options","_ref2","_this7","scopedSlots","_u","key","fn","scope","scrollToRowWithRowIndex","$event","closeHeaderEdit","model","headerData","callback","$$v","_l","optionsId","_n","_this8","openHeaderEdit","headerEditConfig","editableHeaders","scrollToRowIndex","_this9","component"],"mappings":"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","file":"js/chunk-2d0c498d.189901d7.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('section',{staticClass:\"content df-doc\"},[_vm._m(0),_c('p',[_vm._v(\"当表格数据量过多时，使用分页表格分解数据。\")]),_vm._m(1),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"x-table 组件内部封装了 pagination 分页组件和 table 表格组件，保留了它们的所有功能，你可以像下面的例子那样使用它来进行常规的表格数据分页。内置的匿名插槽的功能同 table，这使得你可以像使用 table 组件一样使用 table-column 组件来渲染表格的列。需要注意的是，x-table 需要设定有效的高度 css 样式，这样 table 才能撑满中间区域。\")])]),_c('template',{slot:\"source\"},[_c('df-demo0')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    :data=\\\"tableData\\\"\\n    :page-sizes=\\\"pageSizes\\\"\\n    :page-size=\\\"pageSize\\\"\\n    :layout=\\\"layout\\\"\\n    :total=\\\"total\\\"\\n    :small=\\\"false\\\"\\n    style='height: 413px'\\n    @pagination-change=\\\"handlePaginationChange\\\"\\n  >\\n    <df-table-column prop=\\\"index\\\" label=\\\"序号\\\" width=\\\"50\\\" />\\n    <df-table-column prop=\\\"date\\\" label=\\\"日期\\\" width=\\\"150\\\" />\\n    <df-table-column prop=\\\"name\\\" label=\\\"姓名\\\" width=\\\"150\\\" />\\n    <df-table-column prop=\\\"gender\\\" label=\\\"性别\\\" width=\\\"150\\\" />\\n    <df-table-column prop=\\\"address\\\" label=\\\"地址\\\" />\\n  </df-x-table>\\n</template>\\n\\n<script>\\n// 生成大量数据\\nconst total = 1000\\nconst tableData = new Array(total)\\n  .fill(0)\\n  .map((item, index) => ({\\n    index: index + 1,\\n    date: '2016-05-03',\\n    name: '李时珍',\\n    gender: '女',\\n    address: '四川省武当山普陀区金沙江路 1518 弄'\\n  }))\\n\\n// 这里的方法可以看做接口模拟，用来获取表格数据和总长度的\\nconst getData = (page, pageSize) => {\\n  console.log(`开始查询表格数据，当前页是第 ${page} 页，每一页请求 ${pageSize} 条数据`)\\n  const result = tableData.slice(\\n    pageSize * (page - 1),\\n    pageSize * page\\n  )\\n  console.log('本次查询的结果是', result)\\n  return result\\n}\\nconst getTotal = () => total\\n\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      tableData: [],\\n      total: 1,\\n      pageSizes: [5, 10, 20, 50, 100, 200, 300, 400],\\n      pageSize: 10,\\n      currentPage: 1,\\n      layout: 'total, sizes, prev, pager, next, jumper'\\n    }\\n  },\\n  methods: {\\n    getTotal () {\\n      this.total = getTotal()\\n    },\\n    getData () {\\n      this.tableData = getData(this.currentPage, this.pageSize)\\n    },\\n    handlePaginationChange (paginationStatus) {\\n      this.currentPage = paginationStatus.currentPage\\n      this.pageSize = paginationStatus.pageSize\\n      this.getData()\\n    }\\n  },\\n  created () {\\n    this.getTotal()\\n    this.getData()\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(2),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"若不需要底部的 \"),_c('code',[_vm._v(\"pagination\")]),_vm._v(\"，则配置 \"),_c('code',[_vm._v(\"needPagination\")]),_vm._v(\" 为 \"),_c('code',[_vm._v(\"false\")]),_vm._v(\"即可，所以 \"),_c('code',[_vm._v(\"x-table\")]),_vm._v(\" 可以作为纯净的 \"),_c('code',[_vm._v(\"table\")]),_vm._v(\" 组件来使用。\")])]),_c('template',{slot:\"source\"},[_c('df-demo1')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    :data=\\\"tableData\\\"\\n    :needPagination=\\\"false\\\"\\n    style=\\\"height: 353px\\\"\\n  >\\n    <df-table-column prop=\\\"index\\\" label=\\\"序号\\\" width=\\\"50\\\" />\\n    <df-table-column prop=\\\"date\\\" label=\\\"日期\\\" width=\\\"150\\\" />\\n    <df-table-column prop=\\\"name\\\" label=\\\"姓名\\\" width=\\\"150\\\" />\\n    <df-table-column prop=\\\"gender\\\" label=\\\"性别\\\" width=\\\"150\\\" />\\n    <df-table-column prop=\\\"address\\\" label=\\\"地址\\\" />\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      tableData: new Array(10)\\n        .fill(0)\\n        .map((item, index) => ({\\n          index: index + 1,\\n          date: '2016-05-03',\\n          name: '李时珍',\\n          gender: '女',\\n          address: '四川省武当山普陀区金沙江路 1518 弄'\\n        }))\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(3),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"合理利用头部插槽，以实现业务需求。\")])]),_c('template',{slot:\"source\"},[_c('df-demo2')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    :data=\\\"tableData\\\"\\n    :needPagination=\\\"false\\\"\\n    style=\\\"height: 387px\\\"\\n  >\\n   <template slot=\\\"header\\\">\\n      <df-button type=\\\"success\\\">\\n        <i class=\\\"df-icon-add\\\"></i>\\n        开单\\n      </df-button>\\n      <df-button plain>打印</df-button>\\n      <df-button plain icon=\\\"df-icon-refresh\\\"></df-button>\\n   </template>\\n    <df-table-column prop=\\\"index\\\" label=\\\"序号\\\" width=\\\"50\\\" />\\n    <df-table-column prop=\\\"date\\\" label=\\\"日期\\\" width=\\\"150\\\" />\\n    <df-table-column prop=\\\"name\\\" label=\\\"姓名\\\" width=\\\"150\\\" />\\n    <df-table-column prop=\\\"gender\\\" label=\\\"性别\\\" width=\\\"150\\\" />\\n    <df-table-column prop=\\\"address\\\" label=\\\"地址\\\" />\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      tableData: new Array(10)\\n        .fill(0)\\n        .map((item, index) => ({\\n          index: index + 1,\\n          date: '2016-05-03',\\n          name: '李时珍',\\n          gender: '女',\\n          address: '四川省武当山普陀区金沙江路 1518 弄'\\n        }))\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(4),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"合理利用尾部插槽，以实现业务需求。\")])]),_c('template',{slot:\"source\"},[_c('df-demo3')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    :data=\\\"tableData\\\"\\n    :needPagination=\\\"false\\\"\\n    style=\\\"height: 387px\\\"\\n  >\\n    <df-table-column prop=\\\"index\\\" label=\\\"序号\\\" width=\\\"50\\\" />\\n    <df-table-column prop=\\\"date\\\" label=\\\"日期\\\" width=\\\"150\\\" />\\n    <df-table-column prop=\\\"name\\\" label=\\\"姓名\\\" width=\\\"150\\\" />\\n    <df-table-column prop=\\\"gender\\\" label=\\\"性别\\\" width=\\\"150\\\" />\\n    <df-table-column prop=\\\"address\\\" label=\\\"地址\\\" />\\n   <template slot=\\\"footer\\\">\\n      <df-button type=\\\"success\\\">\\n        <i class=\\\"df-icon-add\\\"></i>\\n        开单\\n      </df-button>\\n      <df-button plain>打印</df-button>\\n      <df-button plain icon=\\\"df-icon-refresh\\\"></df-button>\\n   </template>\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      tableData: new Array(10)\\n        .fill(0)\\n        .map((item, index) => ({\\n          index: index + 1,\\n          date: '2016-05-03',\\n          name: '李时珍',\\n          gender: '女',\\n          address: '四川省武当山普陀区金沙江路 1518 弄'\\n        }))\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(5),_c('p',[_vm._v(\"传入columns=[column={}]配置直接渲染表格，column的内容与df-table-column的属性配置一致\")]),_c('demo-block',[_c('template',{slot:\"source\"},[_c('df-demo4')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    ref=\\\"table\\\"\\n    style=\\\"height: 387px\\\"\\n    has-index\\n    :data=\\\"data\\\"\\n    :columns=\\\"columns\\\"\\n    :needPagination=\\\"false\\\"\\n  >\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      data: new Array(10)\\n        .fill(0)\\n        .map((item, index) => ({\\n          id: index + 1,\\n          date: '2016-05-03',\\n          name: '李时珍',\\n          gender: '女',\\n          address: '四川省武当山普陀区金沙江路 1518 弄'\\n        })),\\n      columns: [{\\n        label: '日期',\\n        prop: 'date'\\n      }, {\\n        label: '姓名',\\n        prop: 'name'\\n      }, {\\n        label: '性别',\\n        prop: 'gender'\\n      }, {\\n        label: '地址',\\n        prop: 'address',\\n        minWidth: 250\\n      }]\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(6),_c('p',[_vm._v(\"传入columns=[column={}]配置直接渲染表格，column的内容与df-table-column的属性配置一致\")]),_c('demo-block',[_c('template',{slot:\"source\"},[_c('df-demo5')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    ref=\\\"table\\\"\\n    style=\\\"height: 387px\\\"\\n    has-index\\n    :data=\\\"data\\\"\\n    :columns=\\\"columns\\\"\\n    :needPagination=\\\"false\\\"\\n  >\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      data: new Array(10)\\n        .fill(0)\\n        .map((item, index) => ({\\n          id: index + 1,\\n          date: '2016-05-03',\\n          name: '李时珍',\\n          gender: '女',\\n          address: '四川省武当山普陀区金沙江路 1518 弄'\\n        })),\\n      columns: [{\\n        label: '日期',\\n        prop: 'date'\\n      }, {\\n        label: '人员信息',\\n        children: [{\\n          label: '姓名',\\n          prop: 'name'\\n        }, {\\n          label: '性别',\\n          prop: 'gender'\\n        }, {\\n          label: '地址',\\n          prop: 'address',\\n          minWidth: 250\\n        }]\\n      }]\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(7),_c('p',[_vm._v(\"传入columns=[column={}]配置直接渲染表格，column的内容与df-table-column的属性配置一致\")]),_c('demo-block',[_c('template',{slot:\"source\"},[_c('df-demo6')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    ref=\\\"table\\\"\\n    style=\\\"height: 387px\\\"\\n    :data=\\\"data\\\"\\n    :columns=\\\"columns\\\"\\n    :needPagination=\\\"false\\\"\\n    row-key=\\\"id\\\"\\n    border\\n    use-tree\\n    default-expand-all\\n    :tree-props=\\\"{children: 'children', hasChildren: 'hasChildren'}\\\"\\n  >\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      columns: [{\\n        label: '日期',\\n        prop: 'date'\\n      }, {\\n        label: '姓名',\\n        prop: 'name'\\n      }, {\\n        label: '性别',\\n        prop: 'gender'\\n      }, {\\n        label: '地址',\\n        prop: 'address',\\n        minWidth: 250\\n      }],\\n      data: new Array(5)\\n        .fill(0)\\n        .map((item, index) => ({\\n          id: index + 1,\\n          date: '2016-05-03',\\n          name: '李时珍',\\n          gender: '女',\\n          address: '四川省武当山普陀区金沙江路 1518 弄',\\n          children: [{\\n            id: Number(`${index + 1}${index + 1}`),\\n            date: '2016-05-03',\\n            name: '李时珍',\\n            gender: '女',\\n            address: '四川省武当山普陀区金沙江路 1518 弄'\\n          }, {\\n            id: Number(`${index + 1}${index + 2}`),\\n            date: '2016-05-03',\\n            name: '李时珍',\\n            gender: '女',\\n            address: '四川省武当山普陀区金沙江路 1518 弄'\\n          }]\\n        }))\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(8),_c('p',[_vm._v(\"使用operationButtons时，需设置has-operation为true\")]),_c('demo-block',[_c('template',{slot:\"source\"},[_c('df-demo7')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    ref=\\\"table\\\"\\n    style=\\\"height: 387px\\\"\\n    :data=\\\"data\\\"\\n    :columns=\\\"columns\\\"\\n    has-index\\n    has-operation\\n    :operation-buttons=\\\"operationButtons\\\"\\n    :operation-width=\\\"120\\\"\\n    :toolbar-list=\\\"toolbarList\\\"\\n    :needPagination=\\\"false\\\"\\n  >\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      data: new Array(10)\\n        .fill(0)\\n        .map((item, index) => ({\\n          id: index + 1,\\n          date: '2016-05-03',\\n          name: '李时珍',\\n          gender: '女',\\n          address: '四川省武当山普陀区金沙江路 1518 弄'\\n        })),\\n      columns: [{\\n        label: '日期',\\n        prop: 'date'\\n      }, {\\n        label: '姓名',\\n        prop: 'name'\\n      }, {\\n        label: '性别',\\n        prop: 'gender'\\n      }, {\\n        label: '地址',\\n        prop: 'address',\\n        minWidth: 250\\n      }],\\n      operationButtons: [{ // 操作列\\n        name: '编辑',\\n        click: (row, buttonIndex, rowIndex) => {\\n          console.log(row, buttonIndex, rowIndex)\\n        }\\n      }, {\\n        name: '删除',\\n        click: (row, buttonIndex, rowIndex) => {\\n          console.log(row, buttonIndex, rowIndex)\\n        }\\n      }],\\n      toolbarList: [{ // 工具栏\\n        name: '新增',\\n        icon: 'df-icon-add',\\n        type: 'success',\\n        click: () => {}\\n      }]\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(9),_c('p',[_vm._v(\"diyPageData为true时，需要自行计算total（数据总数）、pageSize（每页条数）、currentPage（当前页）、切换页数后分割表格数据；\")]),_c('demo-block',[_c('template',{slot:\"source\"},[_c('df-demo8')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    ref=\\\"table\\\"\\n    style=\\\"height: 387px\\\"\\n    :data=\\\"pageData\\\"\\n    :columns=\\\"columns\\\"\\n    has-index\\n    has-operation\\n    :operation-buttons=\\\"operationButtons\\\"\\n    :operation-width=\\\"120\\\"\\n    :toolbar-list=\\\"toolbarList\\\"\\n    need-pagination\\n    :total=\\\"total\\\"\\n    :pageSize=\\\"pageSize\\\"\\n    :currentPage=\\\"currentPage\\\"\\n    :pageSizes=\\\"pageSizes\\\"\\n    :defaultPageSizeIndex=\\\"1\\\"\\n    @pagination-change=\\\"handlePaginationChange\\\"\\n  >\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      data: new Array(18)\\n        .fill(0)\\n        .map((item, index) => ({\\n          id: index + 1,\\n          date: '2016-05-03',\\n          name: '李时珍',\\n          gender: '女',\\n          address: '四川省武当山普陀区金沙江路 1518 弄'\\n        })),\\n      columns: [{\\n        label: '日期',\\n        prop: 'date'\\n      }, {\\n        label: '姓名',\\n        prop: 'name'\\n      }, {\\n        label: '性别',\\n        prop: 'gender'\\n      }, {\\n        label: '地址',\\n        prop: 'address',\\n        minWidth: 250\\n      }],\\n      operationButtons: [{ // 操作列\\n        name: '编辑',\\n        click: (row, buttonIndex, rowIndex) => {\\n          console.log(row, buttonIndex, rowIndex)\\n        }\\n      }, {\\n        name: '删除',\\n        click: (row, buttonIndex, rowIndex) => {\\n          console.log(row, buttonIndex, rowIndex)\\n        }\\n      }],\\n      toolbarList: [{ // 工具栏\\n        name: '新增',\\n        icon: 'df-icon-add',\\n        type: 'success',\\n        click: () => {}\\n      }],\\n      pageSize: 10,\\n      currentPage: 1,\\n      pageSizes: [5, 10, 20, 50]\\n    }\\n  },\\n  computed: {\\n    total () {\\n      return this.data.length\\n    },\\n    pageData () {\\n      const start = (this.currentPage - 1) * this.pageSize\\n      const end = this.currentPage * this.pageSize\\n      return this.data.slice(start, end)\\n    }\\n  },\\n  methods: {\\n    // 分页器的change事件\\n    handlePaginationChange (paginationStatus) {\\n      this.currentPage = paginationStatus.currentPage || 1\\n      this.pageSize = paginationStatus.pageSize || 10\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(10),_c('demo-block',[_c('template',{slot:\"source\"},[_c('df-demo9')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    v-loading=\\\"loading\\\"\\n    ref=\\\"table\\\"\\n    style=\\\"height: 387px\\\"\\n    :data=\\\"data\\\"\\n    :columns=\\\"columns\\\"\\n    has-index\\n    has-operation\\n    :operation-buttons=\\\"operationButtons\\\"\\n    :operation-width=\\\"120\\\"\\n    :toolbar-list=\\\"toolbarList\\\"\\n    need-pagination\\n    :diyPageData=\\\"false\\\"\\n    :pageSizes=\\\"pageSizes\\\"\\n    :defaultPageSizeIndex=\\\"1\\\"\\n  >\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      loading: false,\\n      data: [],\\n      columns: [{\\n        label: '日期',\\n        prop: 'date'\\n      }, {\\n        label: '姓名',\\n        prop: 'name'\\n      }, {\\n        label: '性别',\\n        prop: 'gender'\\n      }, {\\n        label: '地址',\\n        prop: 'address',\\n        minWidth: 250\\n      }],\\n      operationButtons: [{ // 操作列\\n        name: '编辑',\\n        click: (row, buttonIndex, rowIndex) => {\\n          console.log(row, buttonIndex, rowIndex)\\n        }\\n      }, {\\n        name: '删除',\\n        click: (row, buttonIndex, rowIndex) => {\\n          console.log(row, buttonIndex, rowIndex)\\n        }\\n      }],\\n      toolbarList: [{ // 工具栏\\n        name: '刷新',\\n        icon: 'df-icon-refresh',\\n        type: 'success',\\n        click: () => {\\n          this.$refs.table.updateCurrentPage(1)\\n          this.getTableData()\\n        }\\n      }],\\n      pageSizes: [5, 10, 20, 50]\\n    }\\n  },\\n  methods: {\\n    getTableData () {\\n      const data = new Array(27)\\n        .fill(0)\\n        .map((item, index) => ({\\n          id: index + 1,\\n          date: '2016-05-03',\\n          name: '李时珍',\\n          gender: '女',\\n          address: '四川省武当山普陀区金沙江路 1518 弄'\\n        }))\\n      this.loading = true\\n      setTimeout(() => {\\n        this.$set(this, 'data', data)\\n        this.loading = false\\n      }, 2000)\\n    }\\n  },\\n  created () {\\n    this.getTableData()\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(11),_c('p',[_vm._v(\"开启使用接口模式needApi: true，传入接口方法apiFunc，则表格在切换分页信息时，将自动更新表格数据；\")]),_c('demo-block',[_c('template',{slot:\"source\"},[_c('df-demo10')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    ref=\\\"table\\\"\\n    style=\\\"height: 387px\\\"\\n    :columns=\\\"columns\\\"\\n    has-index\\n    has-operation\\n    :operation-buttons=\\\"operationButtons\\\"\\n    :operation-width=\\\"120\\\"\\n    :toolbar-list=\\\"toolbarList\\\"\\n    need-pagination\\n    :diyPageData=\\\"false\\\"\\n    :pageSizes=\\\"pageSizes\\\"\\n    :defaultPageSizeIndex=\\\"1\\\"\\n    needApi\\n    :apiFunc=\\\"getData\\\"\\n    :finishPostApi=\\\"handleFollowUp\\\"\\n    :resPonseKey=\\\"resPonseKey\\\"\\n  >\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      columns: [{\\n        label: '日期',\\n        prop: 'date'\\n      }, {\\n        label: '姓名',\\n        prop: 'name'\\n      }, {\\n        label: '性别',\\n        prop: 'gender'\\n      }, {\\n        label: '地址',\\n        prop: 'address',\\n        minWidth: 250\\n      }],\\n      operationButtons: [{ // 操作列\\n        name: '编辑',\\n        click: (row, buttonIndex, rowIndex) => {\\n          console.log(row, buttonIndex, rowIndex)\\n        }\\n      }, {\\n        name: '删除',\\n        click: (row, buttonIndex, rowIndex) => {\\n          console.log(row, buttonIndex, rowIndex)\\n        }\\n      }],\\n      toolbarList: [{ // 工具栏\\n        name: '刷新',\\n        type: 'success',\\n        icon: 'df-icon-refresh',\\n        click: () => {\\n          this.$refs.table.getTableData()\\n        }\\n      }],\\n      pageSizes: [5, 10, 20, 50],\\n      // 若接口返回的是一个对象，则需要定义对象里哪个字段作为表格数据，哪个字段作为表格总数\\n      // 若接口返回的是数组，则应该直接通过data传入表格数据\\n      resPonseKey: {\\n        dataKey: 'list',\\n        totalKey: 'totalRows'\\n      }\\n    }\\n  },\\n  methods: {\\n    getData (pageInfo, xtable) {\\n      // pageInfo = {pageSize, pageIndex} 分页信息, xtable 表格实例\\n      function rand (min, max) {\\n        return Math.floor(Math.random() * ( max - min )) + min\\n      }\\n      const sex = ['男', '女']\\n      const data = new Array(pageInfo.pageSize)\\n        .fill(0)\\n        .map((item, index) => ({\\n          id: index + 1,\\n          date: '2016-05-03',\\n          name: '李时珍',\\n          gender: sex[Number(rand(0, 2))],\\n          address: `四川省武当山普陀区金沙江路 ${rand(100, 9999)} 弄`\\n        }))\\n      return new Promise((resolve) => {\\n        setTimeout(() => {\\n          resolve({\\n            list: data,\\n            totalRows: 30\\n          })\\n        }, 2000)\\n      })\\n    },\\n    handleFollowUp (data, pageInfo, xtable) {\\n      // 处理接口调完后续\\n      // data 表格数据, pageInfo = {pageSize, pageIndex} 分页信息, xtable 表格实例\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(12),_c('p',[_vm._v(\"在column.form里配置对应每列的的表单类型与表单项配置\")]),_c('demo-block',[_c('template',{slot:\"source\"},[_c('df-demo11')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    v-loading=\\\"loading\\\"\\n    ref=\\\"table\\\"\\n    style=\\\"height: 387px\\\"\\n    :data=\\\"data\\\"\\n    :columns=\\\"columns\\\"\\n    :column-options=\\\"columnOptions\\\"\\n    has-operation\\n    :operation-buttons=\\\"operationButtons\\\"\\n    :operation-width=\\\"120\\\"\\n    :need-pagination=\\\"false\\\"\\n    @enter=\\\"handleFormEnter\\\"\\n    @formChange=\\\"handleFormChange\\\"\\n  >\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      loading: false,\\n      data: [],\\n      columns: [{\\n        label: '日期',\\n        prop: 'date',\\n        form: {\\n          formType: 'date-picker'\\n        }\\n      }, {\\n        label: '姓名',\\n        prop: 'name',\\n        form: {\\n          type: 'input',\\n          modelKey: 'nickName'\\n        }\\n      }, {\\n        label: '性别',\\n        prop: 'gender',\\n        form: {\\n          type: 'select',\\n          itemType: 'option',\\n          labelKey: 'label',\\n          valueKey: 'value',\\n          bindObj: true, // 选项值是否绑定为整个对象\\n          dicData: [\\n            { label: '男', value: 0 },\\n            { label: '女', value: 1 }\\n          ]\\n        }\\n      }, {\\n        label: '地址',\\n        prop: 'address',\\n        minWidth: 250,\\n        form: {\\n          type: 'input'\\n        }\\n      }],\\n      columnOptions: {\\n        editConfig: {\\n          trigger: 'click',\\n          mode: 'slot',\\n          editableColumns: ['date', 'name', 'gender', 'address']\\n        }\\n      },\\n      operationButtons: [{ // 操作列\\n        name: '新增',\\n        showable: (row, rowIndex) => rowIndex === (this.data.length - 1),\\n        click: (row, buttonIndex, rowIndex) => {\\n          this.addRow()\\n        }\\n      }, {\\n        name: '删除',\\n        click: (row, buttonIndex, rowIndex) => {\\n          this.data.splice(rowIndex, 1)\\n        }\\n      }]\\n    }\\n  },\\n  methods: {\\n    getData () {\\n      function rand (min, max) {\\n        return Math.floor(Math.random() * ( max - min )) + min\\n      }\\n      const data = new Array(5)\\n        .fill(0)\\n        .map((item, index) => ({\\n          date: '2016-05-03 00:00:00',\\n          name: '李时珍',\\n          nickName: '小珍',\\n          // gender: rand(0, 2),\\n          gender: {value: rand(0, 2)},\\n          address: `四川省武当山普陀区金沙江路 ${rand(100, 9999)} 弄`\\n        }))\\n      return new Promise((resolve) => {\\n        this.loading = true\\n        setTimeout(() => {\\n          this.$set(this, 'data', data)\\n          this.$nextTick(() => this.openEdit())\\n          this.loading = false\\n        }, 2000)\\n      })\\n    },\\n    // 开启编辑\\n    openEdit (index) {\\n      const _XTable = this.$refs.table\\n      _XTable.openEdit(index)\\n      // 开启某一行时，聚焦第一个输入框\\n      if (index || index === 0) this.$nextTick(() => _XTable.editFocus('date', index))\\n    },\\n    // 新增行\\n    addRow () {\\n      this.data.push({\\n        date: '',\\n        name: '',\\n        nickName: '',\\n        gender: null,\\n        address: ''\\n      })\\n      const newRowIndex = this.data.length - 1\\n      this.openEdit(newRowIndex)\\n    },\\n    handleFormEnter (prop, value, row, index) {\\n      const _XTable = this.$refs.table\\n      const _Table = _XTable.getRefTable()\\n      const {columnProp, rowIndex, isFirstEditableSlot} = _Table.getNextEditableSlot(prop, index)\\n      isFirstEditableSlot ? this.addRow() : _XTable.editFocus(columnProp, rowIndex)\\n    },\\n    handleFormChange (prop, value, row, rowIndex) {\\n      console.log('prop', row)\\n      this.handleFormEnter(prop, value, row, rowIndex)\\n    }\\n  },\\n  mounted () {\\n    this.getData()\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(13),_c('p',[_vm._v(\"需要配置independent为true\")]),_c('demo-block',[_c('template',{slot:\"source\"},[_c('df-demo12')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    v-loading=\\\"loading\\\"\\n    ref=\\\"table\\\"\\n    style=\\\"height: 387px\\\"\\n    :data=\\\"data\\\"\\n    :columns=\\\"columns\\\"\\n    :column-options=\\\"columnOptions\\\"\\n    has-operation\\n    :operation-buttons=\\\"operationButtons\\\"\\n    :operation-width=\\\"120\\\"\\n    :need-pagination=\\\"false\\\"\\n    border\\n  >\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      loading: false,\\n      data: [],\\n      columns: [{\\n        label: '日期',\\n        prop: 'date',\\n        form: {\\n          formType: 'date-picker'\\n        }\\n      }, {\\n        label: '人员信息',\\n        children: [{\\n          label: '姓名',\\n          prop: 'name',\\n          form: {\\n            type: 'input'\\n          }\\n        }, {\\n          label: '性别',\\n          prop: 'gender',\\n          form: {\\n            type: 'select',\\n            itemType: 'option',\\n            labelKey: 'label',\\n            valueKey: 'value',\\n            selectLabel: 'label',\\n            dicData: [],\\n            bindObj: true,\\n            independent: true, // 开启独立管理下拉选项\\n            filterable: true,\\n            remote: true,\\n            events: {\\n              'focus': (e, {row, vm, $index}) => {\\n                const value = row.gender // 记录下当前值（为了在获取选项后，将下拉框里的值显示成label，需要在获取选项后重置一下当前值）\\n                this.$set(row, 'gender', '')\\n                vm.loading = true\\n                setTimeout(() => {\\n                  const options = row.name ? [\\n                    {label: '男', value: 0},\\n                    {label: '女', value: 1}\\n                  ] : []\\n                  this.$set(vm, 'options', options)\\n                  this.$nextTick(() => this.$set(row, 'gender', value))\\n                  vm.loading = false\\n                }, 1000)\\n              },\\n              'blur': (e, {row, vm}) => {\\n                this.$set(vm, 'options', [])\\n              }\\n            }\\n          }\\n        }, {\\n          label: '地址',\\n          prop: 'address',\\n          minWidth: 250,\\n          form: {\\n            type: 'input'\\n          }\\n        }]\\n      }],\\n      columnOptions: {\\n        editConfig: {\\n          trigger: 'click',\\n          mode: 'slot',\\n          editableColumns: ['date', 'name', 'gender', 'address']\\n        }\\n      },\\n      operationButtons: [{ // 操作列\\n        name: '新增',\\n        showable: (row, rowIndex) => rowIndex === (this.data.length - 1),\\n        click: (row, buttonIndex, rowIndex) => {\\n          this.addRow()\\n        }\\n      }, {\\n        name: '删除',\\n        click: (row, buttonIndex, rowIndex) => {\\n          this.data.splice(rowIndex, 1)\\n        }\\n      }]\\n    }\\n  },\\n  methods: {\\n    getData () {\\n      function rand (min, max) {\\n        return Math.floor(Math.random() * ( max - min )) + min\\n      }\\n      const data = new Array(5)\\n        .fill(0)\\n        .map((item, index) => ({\\n          date: '2016-05-03 00:00:00',\\n          name: '李时珍',\\n          gender: {label: '男', value: 0},\\n          address: `四川省武当山普陀区金沙江路 ${rand(100, 9999)} 弄`\\n        }))\\n      return new Promise((resolve) => {\\n        this.loading = true\\n        setTimeout(() => {\\n          this.$set(this, 'data', data)\\n          this.$nextTick(() => this.openEdit())\\n          this.loading = false\\n        }, 2000)\\n      })\\n    },\\n    // 开启编辑\\n    openEdit (index) {\\n      const _XTable = this.$refs.table\\n      _XTable.openEdit(index)\\n      // 开启某一行时，聚焦第一个输入框\\n      if (index || index === 0) this.$nextTick(() => _XTable.editFocus('date', index))\\n    },\\n    // 新增行\\n    addRow () {\\n      this.data.push({\\n        date: '',\\n        name: '',\\n        gender: null,\\n        address: ''\\n      })\\n      const newRowIndex = this.data.length - 1\\n      this.openEdit(newRowIndex)\\n    }\\n  },\\n  mounted () {\\n    this.getData()\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(14),_c('p',[_vm._v(\"表头编辑一般被用来跳转到此列的某一位置，编辑主要是由插槽来决定的，你需要定义好具名插槽slots[列字段名+HeaderEditing]里的内容，并且配置columnOptions.headerEditConfig，事件及方法参见下方文档。\")]),_c('demo-block',[_c('template',{slot:\"source\"},[_c('df-demo13')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-x-table\\n    ref=\\\"table\\\"\\n    style=\\\"height: 387px\\\"\\n    has-index\\n    :data=\\\"data\\\"\\n    :columns=\\\"columns\\\"\\n    :needPagination=\\\"false\\\"\\n    :column-options=\\\"columnOptions\\\"\\n    :toolbar-list=\\\"toolbarList\\\"\\n  >\\n    <df-select slot=\\\"dateHeaderEditing\\\" slot-scope=\\\"scope\\\" v-model=\\\"headerData.date\\\" placeholder=\\\"请选择\\\" @change=\\\"scrollToRowWithRowIndex\\\" @blur=\\\"closeHeaderEdit('date')\\\">\\n      <df-option\\n        v-for=\\\"item in optionsId\\\"\\n        :key=\\\"item.value\\\"\\n        :label=\\\"item.label\\\"\\n        :value=\\\"item.value\\\">\\n      </df-option>\\n    </df-select>\\n    <df-input slot=\\\"nameHeaderEditing\\\" slot-scope=\\\"scope\\\" v-model.number=\\\"headerData.name\\\" placeholder=\\\"输入行数并按下enter\\\" @change=\\\"scrollToRowWithRowIndex(headerData.name - 1)\\\" @blur=\\\"closeHeaderEdit('name')\\\"></df-input>\\n  </df-x-table>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'Demo',\\n  data () {\\n    return {\\n      data: new Array(30)\\n        .fill(0)\\n        .map((item, index) => ({\\n          id: index + 1,\\n          date: '2016-05-03',\\n          name: '李时珍',\\n          gender: '女',\\n          address: '四川省武当山普陀区金沙江路 1518 弄'\\n        })),\\n      columns: [{\\n        label: '日期',\\n        prop: 'date'\\n      }, {\\n        label: '姓名',\\n        prop: 'name',\\n        minWidth: 120\\n      }, {\\n        label: '性别',\\n        prop: 'gender'\\n      }, {\\n        label: '地址',\\n        prop: 'address',\\n        minWidth: 250\\n      }],\\n      toolbarList: [{\\n        name: '开启全部表头编辑',\\n        click: () => {\\n          this.openHeaderEdit()\\n        }\\n      }, {\\n        name: '关闭全部表头编辑',\\n        click: () => {\\n          this.closeHeaderEdit()\\n        }\\n      }],\\n      columnOptions: {\\n        headerEditConfig: {\\n          editableHeaders: ['date', 'name']\\n        }\\n      },\\n      headerData: {\\n        date: null,\\n        name: ''\\n      },\\n      optionsId: []\\n    }\\n  },\\n  methods: {\\n    scrollToRowWithRowIndex (rowIndex) {\\n      const _Table = this.$refs.table.getRefTable()\\n      _Table.scrollToRowIndex(rowIndex)\\n    },\\n    openHeaderEdit (columnProp) {\\n      this.$refs.table.openHeaderEdit(columnProp)\\n    },\\n    closeHeaderEdit (columnProp) {\\n      this.$refs.table.closeHeaderEdit(columnProp)\\n    }\\n  },\\n  created () {\\n    this.optionsId = this.data.map((row, rowIndex) => {\\n      return {\\n        value: rowIndex,\\n        label: `跳转到${row.id}`\\n      }\\n    })\\n  },\\n  mounted () {\\n    this.$nextTick(() => this.openHeaderEdit())\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(15),_vm._m(16),_vm._m(17),_vm._m(18),_vm._m(19),_vm._m(20),_vm._m(21),_vm._m(22),_vm._m(23),_vm._m(24),_vm._m(25),_vm._m(26),_vm._m(27),_vm._m(28),_vm._m(29),_vm._m(30),_vm._m(31)],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('h2',{attrs:{\"id\":\"xtable-fen-ye-biao-ge\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#xtable-fen-ye-biao-ge\"}},[_vm._v(\"¶\")]),_vm._v(\" XTable 分页表格\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"ji-chu-yong-fa\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#ji-chu-yong-fa\"}},[_vm._v(\"¶\")]),_vm._v(\" 基础用法\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"pagination-ke-xuan\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#pagination-ke-xuan\"}},[_vm._v(\"¶\")]),_vm._v(\" pagination 可选\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"tou-bu-cha-cao\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#tou-bu-cha-cao\"}},[_vm._v(\"¶\")]),_vm._v(\" 头部插槽\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"wei-bu-cha-cao\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#wei-bu-cha-cao\"}},[_vm._v(\"¶\")]),_vm._v(\" 尾部插槽\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"yi-ji-biao-tou\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#yi-ji-biao-tou\"}},[_vm._v(\"¶\")]),_vm._v(\" 一级表头\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"duo-ji-biao-tou\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#duo-ji-biao-tou\"}},[_vm._v(\"¶\")]),_vm._v(\" 多级表头\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"shu-biao\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#shu-biao\"}},[_vm._v(\"¶\")]),_vm._v(\" 树表\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"dai-cao-zuo-lie-gong-ju-lan-biao-ge\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#dai-cao-zuo-lie-gong-ju-lan-biao-ge\"}},[_vm._v(\"¶\")]),_vm._v(\" 带操作列、工具栏表格\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"fen-ye-biao-ge-zi-ding-yi-fen-ye-shu-ju-diypagedatawei-true\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#fen-ye-biao-ge-zi-ding-yi-fen-ye-shu-ju-diypagedatawei-true\"}},[_vm._v(\"¶\")]),_vm._v(\" 分页表格-自定义分页数据(diyPageData为true)\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"fen-ye-biao-ge-shi-yong-nei-zhi-fen-ye-ji-suan-diypagedatawei-false\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#fen-ye-biao-ge-shi-yong-nei-zhi-fen-ye-ji-suan-diypagedatawei-false\"}},[_vm._v(\"¶\")]),_vm._v(\" 分页表格-使用内置分页计算(diyPageData为false)\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"chuan-ru-jie-kou-fang-fa-huo-qu-biao-ge-shu-ju\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#chuan-ru-jie-kou-fang-fa-huo-qu-biao-ge-shu-ju\"}},[_vm._v(\"¶\")]),_vm._v(\" 传入接口方法获取表格数据\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"jian-dan-de-ke-bian-ji-biao-ge\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#jian-dan-de-ke-bian-ji-biao-ge\"}},[_vm._v(\"¶\")]),_vm._v(\" 简单的可编辑表格\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"mei-ge-dan-yuan-ge-de-xia-la-xuan-xiang-du-li\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#mei-ge-dan-yuan-ge-de-xia-la-xuan-xiang-du-li\"}},[_vm._v(\"¶\")]),_vm._v(\" 每个单元格的下拉选项独立\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"ke-bian-ji-biao-tou\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#ke-bian-ji-biao-tou\"}},[_vm._v(\"¶\")]),_vm._v(\" 可编辑表头\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"shu-xing-he-pei-zhi\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#shu-xing-he-pei-zhi\"}},[_vm._v(\"¶\")]),_vm._v(\" 属性和配置\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('p',[_vm._v(\"x-table 完整地保留了 pagination 和 table 的属性和事件，请前往 \"),_c('a',{attrs:{\"href\":\"#/component/pagination\"}},[_vm._v(\"pagination\")]),_vm._v(\" 和 \"),_c('a',{attrs:{\"href\":\"#/component/table\"}},[_vm._v(\"table\")]),_vm._v(\" 查看详细属性和事件，以下列举它们的一些区别：\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('p',[_vm._v(\"1.x-table 的匿名插槽同 table，用于存放 table-column，具名插槽 header/footer 用于存放头部/尾部区域，一般来说，这里会放置一些按钮，像上面的例子那样；\"),_c('br'),_vm._v(\" 2.x-table 提供了一个名为 \"),_c('code',[_vm._v(\"pagination-change\")]),_vm._v(\" 的事件，这是一个整合了 pagination 中 \"),_c('code',[_vm._v(\"size-change\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"current-change\")]),_vm._v(\" 事件的事件，即当 \"),_c('code',[_vm._v(\"currentPage\")]),_vm._v(\" 或 \"),_c('code',[_vm._v(\"pageSize\")]),_vm._v(\" 中任一项发生变化都会触发此事件，携带的参数是一个对象，包含当前的\"),_c('code',[_vm._v(\"currentPage\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"pageSize\")]),_vm._v(\"；\"),_c('br'),_vm._v(\" 3.x-table 必须配置一个有效的高度，否则 table 组件的高度的计算将出现问题；\"),_c('br'),_vm._v(\" 4.x-table 也完整地保留了 pagination 和 table 的方法，但是由于它们被封装在了内部，所以你需要先取到它们的实例，才能使用对应的方法，方法名参见下方 Methods。\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"xtable-e-wai-de-attributes\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#xtable-e-wai-de-attributes\"}},[_vm._v(\"¶\")]),_vm._v(\" XTable 额外的 Attributes\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"参数\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"类型\")]),_c('th',[_vm._v(\"可选值\")]),_c('th',[_vm._v(\"默认值\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"header-height\")]),_c('td',[_vm._v(\"自定义头部高度\")]),_c('td',[_vm._v(\"string/number\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"34\")])]),_c('tr',[_c('td',[_vm._v(\"hide-header-slot\")]),_c('td',[_vm._v(\"是否需要隐藏头部插槽(在头部插槽存在的情况下)\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"fasle\")])]),_c('tr',[_c('td',[_vm._v(\"need-pagination\")]),_c('td',[_vm._v(\"是否需要 pagination 组件\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"true\")])]),_c('tr',[_c('td',[_vm._v(\"pagination-height\")]),_c('td',[_vm._v(\"自定义分页组件高度\")]),_c('td',[_vm._v(\"string/number\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"36\")])]),_c('tr',[_c('td',[_vm._v(\"footer-height\")]),_c('td',[_vm._v(\"自定义尾部高度\")]),_c('td',[_vm._v(\"string/number\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"34\")])]),_c('tr',[_c('td',[_vm._v(\"hide-footer-slot\")]),_c('td',[_vm._v(\"是否需要隐藏尾部插槽(在尾部插槽存在的情况下)\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"fasle\")])]),_c('tr',[_c('td',[_vm._v(\"data\")]),_c('td',[_vm._v(\"表格数据\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"[]\")])]),_c('tr',[_c('td',[_vm._v(\"columns\")]),_c('td',[_vm._v(\"列配置，详见下方\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"[]\")])]),_c('tr',[_c('td',[_vm._v(\"columnStrict\")]),_c('td',[_vm._v(\"是否开启列配置严格隔离模式,开启后,columns需要变化时,需要手动更新调用renderColumns\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"true\")])]),_c('tr',[_c('td',[_vm._v(\"hasIndex\")]),_c('td',[_vm._v(\"是否需要序号列\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"false\")])]),_c('tr',[_c('td',[_vm._v(\"hasSelection\")]),_c('td',[_vm._v(\"是否需要开启多选\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"false\")])]),_c('tr',[_c('td',[_vm._v(\"hasOperation\")]),_c('td',[_vm._v(\"是否需要操作列\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"false\")])]),_c('tr',[_c('td',[_vm._v(\"operationWidth\")]),_c('td',[_vm._v(\"操作列宽度\")]),_c('td',[_vm._v(\"string/number\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"120\")])]),_c('tr',[_c('td',[_vm._v(\"operationConfig\")]),_c('td',[_vm._v(\"操作列的其他配置\")]),_c('td',[_vm._v(\"object\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"{}\")])]),_c('tr',[_c('td',[_vm._v(\"operationButtons\")]),_c('td',[_vm._v(\"操作列按钮配置，详见下方\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"[]\")])]),_c('tr',[_c('td',[_vm._v(\"toolbarList\")]),_c('td',[_vm._v(\"工具栏按钮配置，详见下方\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"[]\")])]),_c('tr',[_c('td',[_vm._v(\"pageSizes\")]),_c('td',[_vm._v(\"可选每页条数\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"[10, 20, 50, 100]\")])]),_c('tr',[_c('td',[_vm._v(\"defaultPageSizeIndex\")]),_c('td',[_vm._v(\"默认每页条数，对应pageSizes的索引\")]),_c('td',[_vm._v(\"number\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"1\")])]),_c('tr',[_c('td',[_vm._v(\"defaultCurrentPage\")]),_c('td',[_vm._v(\"默认当前页码\")]),_c('td',[_vm._v(\"number\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"1\")])]),_c('tr',[_c('td',[_vm._v(\"diyPageData\")]),_c('td',[_vm._v(\"是否自定义分页数据\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"true\")])]),_c('tr',[_c('td',[_vm._v(\"total\")]),_c('td',[_vm._v(\"数据总数（diyPageData：true时有效）\")]),_c('td',[_vm._v(\"number\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"0\")])]),_c('tr',[_c('td',[_vm._v(\"pageSize\")]),_c('td',[_vm._v(\"每页数（diyPageData：true时有效）\")]),_c('td',[_vm._v(\"number\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"20\")])]),_c('tr',[_c('td',[_vm._v(\"currentPage\")]),_c('td',[_vm._v(\"当前页数（diyPageData：true时有效）\")]),_c('td',[_vm._v(\"number\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"1\")])]),_c('tr',[_c('td',[_vm._v(\"needApi\")]),_c('td',[_vm._v(\"是否需要调用api\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"false\")])]),_c('tr',[_c('td',[_vm._v(\"apiFunc\")]),_c('td',[_vm._v(\"请求表格数据方法,参数为分页信息\")]),_c('td',[_vm._v(\"function\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"function (pageInfo) { Promise.resolve({}) }\")])]),_c('tr',[_c('td',[_vm._v(\"finishPostApi\")]),_c('td',[_vm._v(\"apiFunc请求完成并数据回填表格后的方法，参数依次为表格数据，分页信息，表格实例\")]),_c('td',[_vm._v(\"function\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"function (data, pageInfo, vm) {}\")])]),_c('tr',[_c('td',[_vm._v(\"resPonseKey\")]),_c('td',[_vm._v(\"当接口返回数据格式为object时，作为表格数据的key名；\")]),_c('td',[_vm._v(\"object\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"{ dataKey: 'list', totalKey: 'totalRows' }\")])]),_c('tr',[_c('td',[_vm._v(\"getDataAtOnce\")]),_c('td',[_vm._v(\"在配置了接口的情况下，是否在挂载完成后立刻请求接口\")]),_c('td',[_vm._v(\"Boolean\")]),_c('td',[_vm._v(\"*\")]),_c('td',[_vm._v(\"true\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"cao-zuo-lie-an-niu-pei-zhi\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#cao-zuo-lie-an-niu-pei-zhi\"}},[_vm._v(\"¶\")]),_vm._v(\" 操作列按钮配置\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"name\")]),_c('th',[_vm._v(\"类型\")]),_c('th',[_vm._v(\"说明\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"name\")]),_c('td',[_vm._v(\"string\")]),_c('td',[_vm._v(\"按钮名称/图标类名（按钮默认以文本显示，若需要显示成图标，需在将operationConfig里配置buttonType: icon）\")])]),_c('tr',[_c('td',[_vm._v(\"showable\")]),_c('td',[_vm._v(\"Function(button, buttonIndex, row, rowIndex)/Boolean\")]),_c('td',[_vm._v(\"是否显示\")])]),_c('tr',[_c('td',[_vm._v(\"click\")]),_c('td',[_vm._v(\"Function(button, buttonIndex, row, rowIndex)\")]),_c('td',[_vm._v(\"按钮点击事件\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"gong-ju-lan-an-niu-pei-zhi\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#gong-ju-lan-an-niu-pei-zhi\"}},[_vm._v(\"¶\")]),_vm._v(\" 工具栏按钮配置\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"name\")]),_c('th',[_vm._v(\"类型\")]),_c('th',[_vm._v(\"说明\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"按钮的内容，同 button\")])]),_c('tr',[_c('td',[_vm._v(\"name\")]),_c('td',[_vm._v(\"string\")]),_c('td',[_vm._v(\"按钮名称\")])]),_c('tr',[_c('td',[_vm._v(\"click\")]),_c('td',[_vm._v(\"Function(button)\")]),_c('td',[_vm._v(\"按钮点击事件\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"lie-pei-zhi\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#lie-pei-zhi\"}},[_vm._v(\"¶\")]),_vm._v(\" 列配置\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"name\")]),_c('th',[_vm._v(\"类型\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"默认值\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"列的内容，同 Table-column\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"useSlotForm\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"使用插槽编辑项\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"form\")]),_c('td',[_vm._v(\"object\")]),_c('td',[_vm._v(\"单元格表单配置（支持表单项本身的属性配置，具体配置详见对应的文档）\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"form.diyType\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"是否使用自定义表单组件\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"form.type\")]),_c('td',[_vm._v(\"string\")]),_c('td',[_vm._v(\"表单组件；diyType为false时，支持组件库所有表单组件，去除‘df-’前缀即可(例如：input/select/input-number)；diyType为true时，为自定义表单组件的名字\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"form.itemType\")]),_c('td',[_vm._v(\"string\")]),_c('td',[_vm._v(\"type里面的子表单组件，用于需要两个标签搭配使用的表单组件；例如select搭配option\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"form.modelKey\")]),_c('td',[_vm._v(\"string\")]),_c('td',[_vm._v(\"表单绑定字段，无则默认绑定column.prop\")]),_c('td',[_vm._v(\"''\")])]),_c('tr',[_c('td',[_vm._v(\"form.disabled\")]),_c('td',[_vm._v(\"boolean/function(value, row, column)\")]),_c('td',[_vm._v(\"表单是否禁用\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"form.dicData\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"选项数组\")]),_c('td',[_vm._v(\"[]\")])]),_c('tr',[_c('td',[_vm._v(\"form.filterDic\")]),_c('td',[_vm._v(\"function(dicData, row)\")]),_c('td',[_vm._v(\"选项数组过滤方法\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"form.labelKey\")]),_c('td',[_vm._v(\"string\")]),_c('td',[_vm._v(\"选项绑定的名称字段\")]),_c('td',[_vm._v(\"'label'\")])]),_c('tr',[_c('td',[_vm._v(\"form.valueKey\")]),_c('td',[_vm._v(\"string\")]),_c('td',[_vm._v(\"选项绑定的值字段\")]),_c('td',[_vm._v(\"'value'\")])]),_c('tr',[_c('td',[_vm._v(\"form.bindObj\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"选项值是否绑定为整个对象（仅适用于select）\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"form.independent\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"否开启独立管理下拉选项，开启后，需要手动通过表单实例设置下拉选项options（仅适用于select）\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"form.events\")]),_c('td',[_vm._v(\"{event: function}\")]),_c('td',[_vm._v(\"表单项的事件（change、foucus、blur...），回调参数为：事件原本的回调参数+{row: 当前行数据, vm: 当前单元格表单项示例, $index: 当前rowIndex}\")]),_c('td',[_vm._v(\"-\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"slot\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#slot\"}},[_vm._v(\"¶\")]),_vm._v(\" Slot\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"name\")]),_c('th',[_vm._v(\"说明\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"表格的内容，同 table\")])]),_c('tr',[_c('td',[_vm._v(\"列的属性名+Header\")]),_c('td',[_vm._v(\"自定义具体某一列的表头内容\")])]),_c('tr',[_c('td',[_vm._v(\"列的属性名+HeaderEditing\")]),_c('td',[_vm._v(\"自定义具体某一列的表头内容\")])]),_c('tr',[_c('td',[_vm._v(\"列的属性名+Edit\")]),_c('td',[_vm._v(\"自定义具体某一列的打开编辑插槽后的内容\")])]),_c('tr',[_c('td',[_vm._v(\"列的属性名\")]),_c('td',[_vm._v(\"自定义具体某一列的内容\")])]),_c('tr',[_c('td',[_vm._v(\"pre\")]),_c('td',[_vm._v(\"插入columns配置的列前面\")])]),_c('tr',[_c('td',[_vm._v(\"empty\")]),_c('td',[_vm._v(\"自定义空数据展示内容，同 table。\")])]),_c('tr',[_c('td',[_vm._v(\"append\")]),_c('td',[_vm._v(\"插入至表格最后一行之后的内容，如果需要对表格的内容进行无限滚动操作，可能需要用到这个 slot。若表格有合计行，该 slot 会位于合计行之上，同 table。\")])]),_c('tr',[_c('td',[_vm._v(\"customSummary\")]),_c('td',[_vm._v(\"开启合计行之后，自定义合计行内容，同 table。\")])]),_c('tr',[_c('td',[_vm._v(\"header\")]),_c('td',[_vm._v(\"头部内容\")])]),_c('tr',[_c('td',[_vm._v(\"footer\")]),_c('td',[_vm._v(\"尾部内容\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"methods\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#methods\"}},[_vm._v(\"¶\")]),_vm._v(\" Methods\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"方法名\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"参数\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"getRefTable\")]),_c('td',[_vm._v(\"获取 table 组件，以使用其方法\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"getRefPagination\")]),_c('td',[_vm._v(\"获取 pagination 组件，以使用其方法\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"getFormRef\")]),_c('td',[_vm._v(\"获取某一行某一列表单项的ref\")]),_c('td',[_vm._v(\"prop, rowIndex\")])]),_c('tr',[_c('td',[_vm._v(\"openEdit\")]),_c('td',[_vm._v(\"开启编辑,有传入rowIndex时，则仅开启对应行的编辑项，反之开启全部\")]),_c('td',[_vm._v(\"rowIndex\")])]),_c('tr',[_c('td',[_vm._v(\"closeEdit\")]),_c('td',[_vm._v(\"关闭编辑,有传入rowIndex时，则仅关闭对应行的编辑项，反之关闭全部\")]),_c('td',[_vm._v(\"rowIndex\")])]),_c('tr',[_c('td',[_vm._v(\"editFocus\")]),_c('td',[_vm._v(\"编辑项聚焦\")]),_c('td',[_vm._v(\"prop, rowIndex\")])]),_c('tr',[_c('td',[_vm._v(\"editFocusSelect\")]),_c('td',[_vm._v(\"编辑项聚焦并全选内容\")]),_c('td',[_vm._v(\"prop, rowIndex\")])]),_c('tr',[_c('td',[_vm._v(\"editBlur\")]),_c('td',[_vm._v(\"编辑项失焦\")]),_c('td',[_vm._v(\"prop, rowIndex\")])]),_c('tr',[_c('td',[_vm._v(\"getTableData\")]),_c('td',[_vm._v(\"获取表格数据,传入keepFirstPage时,将从第一页开始搜索\")]),_c('td',[_vm._v(\"'keepFirstPage'\")])]),_c('tr',[_c('td',[_vm._v(\"updateColumns\")]),_c('td',[_vm._v(\"手动更新表格列配置（可在当列配置发生变化后手动调用）\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"openHeaderEdit\")]),_c('td',[_vm._v(\"开启表头编辑,有传入columnProp时，则仅开启对应列表头的编辑项，反之开启全部\")]),_c('td',[_vm._v(\"columnProp\")])]),_c('tr',[_c('td',[_vm._v(\"closeHeaderEdit\")]),_c('td',[_vm._v(\"关闭表头编辑,有传入columnProp时，则仅关闭对应列表头的编辑项，反之关闭全部\")]),_c('td',[_vm._v(\"columnProp\")])]),_c('tr',[_c('td',[_vm._v(\"updatePageSize\")]),_c('td',[_vm._v(\"更新每页条数, 入参需为数字\")]),_c('td',[_vm._v(\"size\")])]),_c('tr',[_c('td',[_vm._v(\"updateCurrentPage\")]),_c('td',[_vm._v(\"更新当前页数, 入参需为数字\")]),_c('td',[_vm._v(\"pageNumber\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"xtable-e-wai-de-events\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#xtable-e-wai-de-events\"}},[_vm._v(\"¶\")]),_vm._v(\" XTable 额外的 Events\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"事件名称\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"回调参数\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"pagination-change\")]),_c('td',[_vm._v(\"启用\"),_c('code',[_vm._v(\"pagination\")]),_vm._v(\"后，当\"),_c('code',[_vm._v(\"pagination\")]),_vm._v(\"的\"),_c('code',[_vm._v(\"currentPage\")]),_vm._v(\"或\"),_c('code',[_vm._v(\"pageSize\")]),_vm._v(\"中任一项发生变化都会触发此事件，携带的参数是一个对象，包含当前的\"),_c('code',[_vm._v(\"currentPage\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"pageSize\")])]),_c('td',[_vm._v(\"{currentPage, pageSize}\")])]),_c('tr',[_c('td',[_vm._v(\"getData\")]),_c('td',[_vm._v(\"表格接口请求成功后触发该事件\")]),_c('td',[_vm._v(\"tableData\")])]),_c('tr',[_c('td',[_vm._v(\"formChange\")]),_c('td',[_vm._v(\"表格内的表单的change事件\")]),_c('td',[_vm._v(\"prop, value, row, rowIndex\")])])])])\n}]\n\nexport { render, staticRenderFns }","\n    <template>\n      <section class=\"content df-doc\">\n        <h2 id=\"xtable-fen-ye-biao-ge\"><a class=\"header-anchor\" href=\"#xtable-fen-ye-biao-ge\">¶</a> XTable 分页表格</h2>\n<p>当表格数据量过多时，使用分页表格分解数据。</p>\n<h3 id=\"ji-chu-yong-fa\"><a class=\"header-anchor\" href=\"#ji-chu-yong-fa\">¶</a> 基础用法</h3>\n<demo-block>\n        <div><p>x-table 组件内部封装了 pagination 分页组件和 table 表格组件，保留了它们的所有功能，你可以像下面的例子那样使用它来进行常规的表格数据分页。内置的匿名插槽的功能同 table，这使得你可以像使用 table 组件一样使用 table-column 组件来渲染表格的列。需要注意的是，x-table 需要设定有效的高度 css 样式，这样 table 才能撑满中间区域。</p>\n</div>\n        <template slot=\"source\"><df-demo0 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    :data=&quot;tableData&quot;\n    :page-sizes=&quot;pageSizes&quot;\n    :page-size=&quot;pageSize&quot;\n    :layout=&quot;layout&quot;\n    :total=&quot;total&quot;\n    :small=&quot;false&quot;\n    style='height: 413px'\n    @pagination-change=&quot;handlePaginationChange&quot;\n  &gt;\n    &lt;df-table-column prop=&quot;index&quot; label=&quot;序号&quot; width=&quot;50&quot; /&gt;\n    &lt;df-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;150&quot; /&gt;\n    &lt;df-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;150&quot; /&gt;\n    &lt;df-table-column prop=&quot;gender&quot; label=&quot;性别&quot; width=&quot;150&quot; /&gt;\n    &lt;df-table-column prop=&quot;address&quot; label=&quot;地址&quot; /&gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n// 生成大量数据\nconst total = 1000\nconst tableData = new Array(total)\n  .fill(0)\n  .map((item, index) =&gt; ({\n    index: index + 1,\n    date: '2016-05-03',\n    name: '李时珍',\n    gender: '女',\n    address: '四川省武当山普陀区金沙江路 1518 弄'\n  }))\n\n// 这里的方法可以看做接口模拟，用来获取表格数据和总长度的\nconst getData = (page, pageSize) =&gt; {\n  console.log(`开始查询表格数据，当前页是第 ${page} 页，每一页请求 ${pageSize} 条数据`)\n  const result = tableData.slice(\n    pageSize * (page - 1),\n    pageSize * page\n  )\n  console.log('本次查询的结果是', result)\n  return result\n}\nconst getTotal = () =&gt; total\n\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      tableData: [],\n      total: 1,\n      pageSizes: [5, 10, 20, 50, 100, 200, 300, 400],\n      pageSize: 10,\n      currentPage: 1,\n      layout: 'total, sizes, prev, pager, next, jumper'\n    }\n  },\n  methods: {\n    getTotal () {\n      this.total = getTotal()\n    },\n    getData () {\n      this.tableData = getData(this.currentPage, this.pageSize)\n    },\n    handlePaginationChange (paginationStatus) {\n      this.currentPage = paginationStatus.currentPage\n      this.pageSize = paginationStatus.pageSize\n      this.getData()\n    }\n  },\n  created () {\n    this.getTotal()\n    this.getData()\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"pagination-ke-xuan\"><a class=\"header-anchor\" href=\"#pagination-ke-xuan\">¶</a> pagination 可选</h3>\n<demo-block>\n        <div><p>若不需要底部的 <code>pagination</code>，则配置 <code>needPagination</code> 为 <code>false</code>即可，所以 <code>x-table</code> 可以作为纯净的 <code>table</code> 组件来使用。</p>\n</div>\n        <template slot=\"source\"><df-demo1 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    :data=&quot;tableData&quot;\n    :needPagination=&quot;false&quot;\n    style=&quot;height: 353px&quot;\n  &gt;\n    &lt;df-table-column prop=&quot;index&quot; label=&quot;序号&quot; width=&quot;50&quot; /&gt;\n    &lt;df-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;150&quot; /&gt;\n    &lt;df-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;150&quot; /&gt;\n    &lt;df-table-column prop=&quot;gender&quot; label=&quot;性别&quot; width=&quot;150&quot; /&gt;\n    &lt;df-table-column prop=&quot;address&quot; label=&quot;地址&quot; /&gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      tableData: new Array(10)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          index: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        }))\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"tou-bu-cha-cao\"><a class=\"header-anchor\" href=\"#tou-bu-cha-cao\">¶</a> 头部插槽</h3>\n<demo-block>\n        <div><p>合理利用头部插槽，以实现业务需求。</p>\n</div>\n        <template slot=\"source\"><df-demo2 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    :data=&quot;tableData&quot;\n    :needPagination=&quot;false&quot;\n    style=&quot;height: 387px&quot;\n  &gt;\n   &lt;template slot=&quot;header&quot;&gt;\n      &lt;df-button type=&quot;success&quot;&gt;\n        &lt;i class=&quot;df-icon-add&quot;&gt;&lt;/i&gt;\n        开单\n      &lt;/df-button&gt;\n      &lt;df-button plain&gt;打印&lt;/df-button&gt;\n      &lt;df-button plain icon=&quot;df-icon-refresh&quot;&gt;&lt;/df-button&gt;\n   &lt;/template&gt;\n    &lt;df-table-column prop=&quot;index&quot; label=&quot;序号&quot; width=&quot;50&quot; /&gt;\n    &lt;df-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;150&quot; /&gt;\n    &lt;df-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;150&quot; /&gt;\n    &lt;df-table-column prop=&quot;gender&quot; label=&quot;性别&quot; width=&quot;150&quot; /&gt;\n    &lt;df-table-column prop=&quot;address&quot; label=&quot;地址&quot; /&gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      tableData: new Array(10)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          index: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        }))\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"wei-bu-cha-cao\"><a class=\"header-anchor\" href=\"#wei-bu-cha-cao\">¶</a> 尾部插槽</h3>\n<demo-block>\n        <div><p>合理利用尾部插槽，以实现业务需求。</p>\n</div>\n        <template slot=\"source\"><df-demo3 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    :data=&quot;tableData&quot;\n    :needPagination=&quot;false&quot;\n    style=&quot;height: 387px&quot;\n  &gt;\n    &lt;df-table-column prop=&quot;index&quot; label=&quot;序号&quot; width=&quot;50&quot; /&gt;\n    &lt;df-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;150&quot; /&gt;\n    &lt;df-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;150&quot; /&gt;\n    &lt;df-table-column prop=&quot;gender&quot; label=&quot;性别&quot; width=&quot;150&quot; /&gt;\n    &lt;df-table-column prop=&quot;address&quot; label=&quot;地址&quot; /&gt;\n   &lt;template slot=&quot;footer&quot;&gt;\n      &lt;df-button type=&quot;success&quot;&gt;\n        &lt;i class=&quot;df-icon-add&quot;&gt;&lt;/i&gt;\n        开单\n      &lt;/df-button&gt;\n      &lt;df-button plain&gt;打印&lt;/df-button&gt;\n      &lt;df-button plain icon=&quot;df-icon-refresh&quot;&gt;&lt;/df-button&gt;\n   &lt;/template&gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      tableData: new Array(10)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          index: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        }))\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"yi-ji-biao-tou\"><a class=\"header-anchor\" href=\"#yi-ji-biao-tou\">¶</a> 一级表头</h3>\n<p>传入columns=[column={}]配置直接渲染表格，column的内容与df-table-column的属性配置一致</p>\n<demo-block>\n        \n        <template slot=\"source\"><df-demo4 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    ref=&quot;table&quot;\n    style=&quot;height: 387px&quot;\n    has-index\n    :data=&quot;data&quot;\n    :columns=&quot;columns&quot;\n    :needPagination=&quot;false&quot;\n  &gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      data: new Array(10)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        })),\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name'\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }]\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"duo-ji-biao-tou\"><a class=\"header-anchor\" href=\"#duo-ji-biao-tou\">¶</a> 多级表头</h3>\n<p>传入columns=[column={}]配置直接渲染表格，column的内容与df-table-column的属性配置一致</p>\n<demo-block>\n        \n        <template slot=\"source\"><df-demo5 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    ref=&quot;table&quot;\n    style=&quot;height: 387px&quot;\n    has-index\n    :data=&quot;data&quot;\n    :columns=&quot;columns&quot;\n    :needPagination=&quot;false&quot;\n  &gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      data: new Array(10)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        })),\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '人员信息',\n        children: [{\n          label: '姓名',\n          prop: 'name'\n        }, {\n          label: '性别',\n          prop: 'gender'\n        }, {\n          label: '地址',\n          prop: 'address',\n          minWidth: 250\n        }]\n      }]\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"shu-biao\"><a class=\"header-anchor\" href=\"#shu-biao\">¶</a> 树表</h3>\n<p>传入columns=[column={}]配置直接渲染表格，column的内容与df-table-column的属性配置一致</p>\n<demo-block>\n        \n        <template slot=\"source\"><df-demo6 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    ref=&quot;table&quot;\n    style=&quot;height: 387px&quot;\n    :data=&quot;data&quot;\n    :columns=&quot;columns&quot;\n    :needPagination=&quot;false&quot;\n    row-key=&quot;id&quot;\n    border\n    use-tree\n    default-expand-all\n    :tree-props=&quot;{children: 'children', hasChildren: 'hasChildren'}&quot;\n  &gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name'\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }],\n      data: new Array(5)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄',\n          children: [{\n            id: Number(`${index + 1}${index + 1}`),\n            date: '2016-05-03',\n            name: '李时珍',\n            gender: '女',\n            address: '四川省武当山普陀区金沙江路 1518 弄'\n          }, {\n            id: Number(`${index + 1}${index + 2}`),\n            date: '2016-05-03',\n            name: '李时珍',\n            gender: '女',\n            address: '四川省武当山普陀区金沙江路 1518 弄'\n          }]\n        }))\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"dai-cao-zuo-lie-gong-ju-lan-biao-ge\"><a class=\"header-anchor\" href=\"#dai-cao-zuo-lie-gong-ju-lan-biao-ge\">¶</a> 带操作列、工具栏表格</h3>\n<p>使用operationButtons时，需设置has-operation为true</p>\n<demo-block>\n        \n        <template slot=\"source\"><df-demo7 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    ref=&quot;table&quot;\n    style=&quot;height: 387px&quot;\n    :data=&quot;data&quot;\n    :columns=&quot;columns&quot;\n    has-index\n    has-operation\n    :operation-buttons=&quot;operationButtons&quot;\n    :operation-width=&quot;120&quot;\n    :toolbar-list=&quot;toolbarList&quot;\n    :needPagination=&quot;false&quot;\n  &gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      data: new Array(10)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        })),\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name'\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }],\n      operationButtons: [{ // 操作列\n        name: '编辑',\n        click: (row, buttonIndex, rowIndex) =&gt; {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }, {\n        name: '删除',\n        click: (row, buttonIndex, rowIndex) =&gt; {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }],\n      toolbarList: [{ // 工具栏\n        name: '新增',\n        icon: 'df-icon-add',\n        type: 'success',\n        click: () =&gt; {}\n      }]\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"fen-ye-biao-ge-zi-ding-yi-fen-ye-shu-ju-diypagedatawei-true\"><a class=\"header-anchor\" href=\"#fen-ye-biao-ge-zi-ding-yi-fen-ye-shu-ju-diypagedatawei-true\">¶</a> 分页表格-自定义分页数据(diyPageData为true)</h3>\n<p>diyPageData为true时，需要自行计算total（数据总数）、pageSize（每页条数）、currentPage（当前页）、切换页数后分割表格数据；</p>\n<demo-block>\n        \n        <template slot=\"source\"><df-demo8 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    ref=&quot;table&quot;\n    style=&quot;height: 387px&quot;\n    :data=&quot;pageData&quot;\n    :columns=&quot;columns&quot;\n    has-index\n    has-operation\n    :operation-buttons=&quot;operationButtons&quot;\n    :operation-width=&quot;120&quot;\n    :toolbar-list=&quot;toolbarList&quot;\n    need-pagination\n    :total=&quot;total&quot;\n    :pageSize=&quot;pageSize&quot;\n    :currentPage=&quot;currentPage&quot;\n    :pageSizes=&quot;pageSizes&quot;\n    :defaultPageSizeIndex=&quot;1&quot;\n    @pagination-change=&quot;handlePaginationChange&quot;\n  &gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      data: new Array(18)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        })),\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name'\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }],\n      operationButtons: [{ // 操作列\n        name: '编辑',\n        click: (row, buttonIndex, rowIndex) =&gt; {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }, {\n        name: '删除',\n        click: (row, buttonIndex, rowIndex) =&gt; {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }],\n      toolbarList: [{ // 工具栏\n        name: '新增',\n        icon: 'df-icon-add',\n        type: 'success',\n        click: () =&gt; {}\n      }],\n      pageSize: 10,\n      currentPage: 1,\n      pageSizes: [5, 10, 20, 50]\n    }\n  },\n  computed: {\n    total () {\n      return this.data.length\n    },\n    pageData () {\n      const start = (this.currentPage - 1) * this.pageSize\n      const end = this.currentPage * this.pageSize\n      return this.data.slice(start, end)\n    }\n  },\n  methods: {\n    // 分页器的change事件\n    handlePaginationChange (paginationStatus) {\n      this.currentPage = paginationStatus.currentPage || 1\n      this.pageSize = paginationStatus.pageSize || 10\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"fen-ye-biao-ge-shi-yong-nei-zhi-fen-ye-ji-suan-diypagedatawei-false\"><a class=\"header-anchor\" href=\"#fen-ye-biao-ge-shi-yong-nei-zhi-fen-ye-ji-suan-diypagedatawei-false\">¶</a> 分页表格-使用内置分页计算(diyPageData为false)</h3>\n<demo-block>\n        \n        <template slot=\"source\"><df-demo9 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    v-loading=&quot;loading&quot;\n    ref=&quot;table&quot;\n    style=&quot;height: 387px&quot;\n    :data=&quot;data&quot;\n    :columns=&quot;columns&quot;\n    has-index\n    has-operation\n    :operation-buttons=&quot;operationButtons&quot;\n    :operation-width=&quot;120&quot;\n    :toolbar-list=&quot;toolbarList&quot;\n    need-pagination\n    :diyPageData=&quot;false&quot;\n    :pageSizes=&quot;pageSizes&quot;\n    :defaultPageSizeIndex=&quot;1&quot;\n  &gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      loading: false,\n      data: [],\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name'\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }],\n      operationButtons: [{ // 操作列\n        name: '编辑',\n        click: (row, buttonIndex, rowIndex) =&gt; {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }, {\n        name: '删除',\n        click: (row, buttonIndex, rowIndex) =&gt; {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }],\n      toolbarList: [{ // 工具栏\n        name: '刷新',\n        icon: 'df-icon-refresh',\n        type: 'success',\n        click: () =&gt; {\n          this.$refs.table.updateCurrentPage(1)\n          this.getTableData()\n        }\n      }],\n      pageSizes: [5, 10, 20, 50]\n    }\n  },\n  methods: {\n    getTableData () {\n      const data = new Array(27)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        }))\n      this.loading = true\n      setTimeout(() =&gt; {\n        this.$set(this, 'data', data)\n        this.loading = false\n      }, 2000)\n    }\n  },\n  created () {\n    this.getTableData()\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"chuan-ru-jie-kou-fang-fa-huo-qu-biao-ge-shu-ju\"><a class=\"header-anchor\" href=\"#chuan-ru-jie-kou-fang-fa-huo-qu-biao-ge-shu-ju\">¶</a> 传入接口方法获取表格数据</h3>\n<p>开启使用接口模式needApi: true，传入接口方法apiFunc，则表格在切换分页信息时，将自动更新表格数据；</p>\n<demo-block>\n        \n        <template slot=\"source\"><df-demo10 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    ref=&quot;table&quot;\n    style=&quot;height: 387px&quot;\n    :columns=&quot;columns&quot;\n    has-index\n    has-operation\n    :operation-buttons=&quot;operationButtons&quot;\n    :operation-width=&quot;120&quot;\n    :toolbar-list=&quot;toolbarList&quot;\n    need-pagination\n    :diyPageData=&quot;false&quot;\n    :pageSizes=&quot;pageSizes&quot;\n    :defaultPageSizeIndex=&quot;1&quot;\n    needApi\n    :apiFunc=&quot;getData&quot;\n    :finishPostApi=&quot;handleFollowUp&quot;\n    :resPonseKey=&quot;resPonseKey&quot;\n  &gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name'\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }],\n      operationButtons: [{ // 操作列\n        name: '编辑',\n        click: (row, buttonIndex, rowIndex) =&gt; {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }, {\n        name: '删除',\n        click: (row, buttonIndex, rowIndex) =&gt; {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }],\n      toolbarList: [{ // 工具栏\n        name: '刷新',\n        type: 'success',\n        icon: 'df-icon-refresh',\n        click: () =&gt; {\n          this.$refs.table.getTableData()\n        }\n      }],\n      pageSizes: [5, 10, 20, 50],\n      // 若接口返回的是一个对象，则需要定义对象里哪个字段作为表格数据，哪个字段作为表格总数\n      // 若接口返回的是数组，则应该直接通过data传入表格数据\n      resPonseKey: {\n        dataKey: 'list',\n        totalKey: 'totalRows'\n      }\n    }\n  },\n  methods: {\n    getData (pageInfo, xtable) {\n      // pageInfo = {pageSize, pageIndex} 分页信息, xtable 表格实例\n      function rand (min, max) {\n        return Math.floor(Math.random() * ( max - min )) + min\n      }\n      const sex = ['男', '女']\n      const data = new Array(pageInfo.pageSize)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: sex[Number(rand(0, 2))],\n          address: `四川省武当山普陀区金沙江路 ${rand(100, 9999)} 弄`\n        }))\n      return new Promise((resolve) =&gt; {\n        setTimeout(() =&gt; {\n          resolve({\n            list: data,\n            totalRows: 30\n          })\n        }, 2000)\n      })\n    },\n    handleFollowUp (data, pageInfo, xtable) {\n      // 处理接口调完后续\n      // data 表格数据, pageInfo = {pageSize, pageIndex} 分页信息, xtable 表格实例\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"jian-dan-de-ke-bian-ji-biao-ge\"><a class=\"header-anchor\" href=\"#jian-dan-de-ke-bian-ji-biao-ge\">¶</a> 简单的可编辑表格</h3>\n<p>在column.form里配置对应每列的的表单类型与表单项配置</p>\n<demo-block>\n        \n        <template slot=\"source\"><df-demo11 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    v-loading=&quot;loading&quot;\n    ref=&quot;table&quot;\n    style=&quot;height: 387px&quot;\n    :data=&quot;data&quot;\n    :columns=&quot;columns&quot;\n    :column-options=&quot;columnOptions&quot;\n    has-operation\n    :operation-buttons=&quot;operationButtons&quot;\n    :operation-width=&quot;120&quot;\n    :need-pagination=&quot;false&quot;\n    @enter=&quot;handleFormEnter&quot;\n    @formChange=&quot;handleFormChange&quot;\n  &gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      loading: false,\n      data: [],\n      columns: [{\n        label: '日期',\n        prop: 'date',\n        form: {\n          formType: 'date-picker'\n        }\n      }, {\n        label: '姓名',\n        prop: 'name',\n        form: {\n          type: 'input',\n          modelKey: 'nickName'\n        }\n      }, {\n        label: '性别',\n        prop: 'gender',\n        form: {\n          type: 'select',\n          itemType: 'option',\n          labelKey: 'label',\n          valueKey: 'value',\n          bindObj: true, // 选项值是否绑定为整个对象\n          dicData: [\n            { label: '男', value: 0 },\n            { label: '女', value: 1 }\n          ]\n        }\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250,\n        form: {\n          type: 'input'\n        }\n      }],\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: ['date', 'name', 'gender', 'address']\n        }\n      },\n      operationButtons: [{ // 操作列\n        name: '新增',\n        showable: (row, rowIndex) =&gt; rowIndex === (this.data.length - 1),\n        click: (row, buttonIndex, rowIndex) =&gt; {\n          this.addRow()\n        }\n      }, {\n        name: '删除',\n        click: (row, buttonIndex, rowIndex) =&gt; {\n          this.data.splice(rowIndex, 1)\n        }\n      }]\n    }\n  },\n  methods: {\n    getData () {\n      function rand (min, max) {\n        return Math.floor(Math.random() * ( max - min )) + min\n      }\n      const data = new Array(5)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          date: '2016-05-03 00:00:00',\n          name: '李时珍',\n          nickName: '小珍',\n          // gender: rand(0, 2),\n          gender: {value: rand(0, 2)},\n          address: `四川省武当山普陀区金沙江路 ${rand(100, 9999)} 弄`\n        }))\n      return new Promise((resolve) =&gt; {\n        this.loading = true\n        setTimeout(() =&gt; {\n          this.$set(this, 'data', data)\n          this.$nextTick(() =&gt; this.openEdit())\n          this.loading = false\n        }, 2000)\n      })\n    },\n    // 开启编辑\n    openEdit (index) {\n      const _XTable = this.$refs.table\n      _XTable.openEdit(index)\n      // 开启某一行时，聚焦第一个输入框\n      if (index || index === 0) this.$nextTick(() =&gt; _XTable.editFocus('date', index))\n    },\n    // 新增行\n    addRow () {\n      this.data.push({\n        date: '',\n        name: '',\n        nickName: '',\n        gender: null,\n        address: ''\n      })\n      const newRowIndex = this.data.length - 1\n      this.openEdit(newRowIndex)\n    },\n    handleFormEnter (prop, value, row, index) {\n      const _XTable = this.$refs.table\n      const _Table = _XTable.getRefTable()\n      const {columnProp, rowIndex, isFirstEditableSlot} = _Table.getNextEditableSlot(prop, index)\n      isFirstEditableSlot ? this.addRow() : _XTable.editFocus(columnProp, rowIndex)\n    },\n    handleFormChange (prop, value, row, rowIndex) {\n      console.log('prop', row)\n      this.handleFormEnter(prop, value, row, rowIndex)\n    }\n  },\n  mounted () {\n    this.getData()\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"mei-ge-dan-yuan-ge-de-xia-la-xuan-xiang-du-li\"><a class=\"header-anchor\" href=\"#mei-ge-dan-yuan-ge-de-xia-la-xuan-xiang-du-li\">¶</a> 每个单元格的下拉选项独立</h3>\n<p>需要配置independent为true</p>\n<demo-block>\n        \n        <template slot=\"source\"><df-demo12 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    v-loading=&quot;loading&quot;\n    ref=&quot;table&quot;\n    style=&quot;height: 387px&quot;\n    :data=&quot;data&quot;\n    :columns=&quot;columns&quot;\n    :column-options=&quot;columnOptions&quot;\n    has-operation\n    :operation-buttons=&quot;operationButtons&quot;\n    :operation-width=&quot;120&quot;\n    :need-pagination=&quot;false&quot;\n    border\n  &gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      loading: false,\n      data: [],\n      columns: [{\n        label: '日期',\n        prop: 'date',\n        form: {\n          formType: 'date-picker'\n        }\n      }, {\n        label: '人员信息',\n        children: [{\n          label: '姓名',\n          prop: 'name',\n          form: {\n            type: 'input'\n          }\n        }, {\n          label: '性别',\n          prop: 'gender',\n          form: {\n            type: 'select',\n            itemType: 'option',\n            labelKey: 'label',\n            valueKey: 'value',\n            selectLabel: 'label',\n            dicData: [],\n            bindObj: true,\n            independent: true, // 开启独立管理下拉选项\n            filterable: true,\n            remote: true,\n            events: {\n              'focus': (e, {row, vm, $index}) =&gt; {\n                const value = row.gender // 记录下当前值（为了在获取选项后，将下拉框里的值显示成label，需要在获取选项后重置一下当前值）\n                this.$set(row, 'gender', '')\n                vm.loading = true\n                setTimeout(() =&gt; {\n                  const options = row.name ? [\n                    {label: '男', value: 0},\n                    {label: '女', value: 1}\n                  ] : []\n                  this.$set(vm, 'options', options)\n                  this.$nextTick(() =&gt; this.$set(row, 'gender', value))\n                  vm.loading = false\n                }, 1000)\n              },\n              'blur': (e, {row, vm}) =&gt; {\n                this.$set(vm, 'options', [])\n              }\n            }\n          }\n        }, {\n          label: '地址',\n          prop: 'address',\n          minWidth: 250,\n          form: {\n            type: 'input'\n          }\n        }]\n      }],\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: ['date', 'name', 'gender', 'address']\n        }\n      },\n      operationButtons: [{ // 操作列\n        name: '新增',\n        showable: (row, rowIndex) =&gt; rowIndex === (this.data.length - 1),\n        click: (row, buttonIndex, rowIndex) =&gt; {\n          this.addRow()\n        }\n      }, {\n        name: '删除',\n        click: (row, buttonIndex, rowIndex) =&gt; {\n          this.data.splice(rowIndex, 1)\n        }\n      }]\n    }\n  },\n  methods: {\n    getData () {\n      function rand (min, max) {\n        return Math.floor(Math.random() * ( max - min )) + min\n      }\n      const data = new Array(5)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          date: '2016-05-03 00:00:00',\n          name: '李时珍',\n          gender: {label: '男', value: 0},\n          address: `四川省武当山普陀区金沙江路 ${rand(100, 9999)} 弄`\n        }))\n      return new Promise((resolve) =&gt; {\n        this.loading = true\n        setTimeout(() =&gt; {\n          this.$set(this, 'data', data)\n          this.$nextTick(() =&gt; this.openEdit())\n          this.loading = false\n        }, 2000)\n      })\n    },\n    // 开启编辑\n    openEdit (index) {\n      const _XTable = this.$refs.table\n      _XTable.openEdit(index)\n      // 开启某一行时，聚焦第一个输入框\n      if (index || index === 0) this.$nextTick(() =&gt; _XTable.editFocus('date', index))\n    },\n    // 新增行\n    addRow () {\n      this.data.push({\n        date: '',\n        name: '',\n        gender: null,\n        address: ''\n      })\n      const newRowIndex = this.data.length - 1\n      this.openEdit(newRowIndex)\n    }\n  },\n  mounted () {\n    this.getData()\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"ke-bian-ji-biao-tou\"><a class=\"header-anchor\" href=\"#ke-bian-ji-biao-tou\">¶</a> 可编辑表头</h3>\n<p>表头编辑一般被用来跳转到此列的某一位置，编辑主要是由插槽来决定的，你需要定义好具名插槽slots[列字段名+HeaderEditing]里的内容，并且配置columnOptions.headerEditConfig，事件及方法参见下方文档。</p>\n<demo-block>\n        \n        <template slot=\"source\"><df-demo13 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-x-table\n    ref=&quot;table&quot;\n    style=&quot;height: 387px&quot;\n    has-index\n    :data=&quot;data&quot;\n    :columns=&quot;columns&quot;\n    :needPagination=&quot;false&quot;\n    :column-options=&quot;columnOptions&quot;\n    :toolbar-list=&quot;toolbarList&quot;\n  &gt;\n    &lt;df-select slot=&quot;dateHeaderEditing&quot; slot-scope=&quot;scope&quot; v-model=&quot;headerData.date&quot; placeholder=&quot;请选择&quot; @change=&quot;scrollToRowWithRowIndex&quot; @blur=&quot;closeHeaderEdit('date')&quot;&gt;\n      &lt;df-option\n        v-for=&quot;item in optionsId&quot;\n        :key=&quot;item.value&quot;\n        :label=&quot;item.label&quot;\n        :value=&quot;item.value&quot;&gt;\n      &lt;/df-option&gt;\n    &lt;/df-select&gt;\n    &lt;df-input slot=&quot;nameHeaderEditing&quot; slot-scope=&quot;scope&quot; v-model.number=&quot;headerData.name&quot; placeholder=&quot;输入行数并按下enter&quot; @change=&quot;scrollToRowWithRowIndex(headerData.name - 1)&quot; @blur=&quot;closeHeaderEdit('name')&quot;&gt;&lt;/df-input&gt;\n  &lt;/df-x-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'Demo',\n  data () {\n    return {\n      data: new Array(30)\n        .fill(0)\n        .map((item, index) =&gt; ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        })),\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name',\n        minWidth: 120\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }],\n      toolbarList: [{\n        name: '开启全部表头编辑',\n        click: () =&gt; {\n          this.openHeaderEdit()\n        }\n      }, {\n        name: '关闭全部表头编辑',\n        click: () =&gt; {\n          this.closeHeaderEdit()\n        }\n      }],\n      columnOptions: {\n        headerEditConfig: {\n          editableHeaders: ['date', 'name']\n        }\n      },\n      headerData: {\n        date: null,\n        name: ''\n      },\n      optionsId: []\n    }\n  },\n  methods: {\n    scrollToRowWithRowIndex (rowIndex) {\n      const _Table = this.$refs.table.getRefTable()\n      _Table.scrollToRowIndex(rowIndex)\n    },\n    openHeaderEdit (columnProp) {\n      this.$refs.table.openHeaderEdit(columnProp)\n    },\n    closeHeaderEdit (columnProp) {\n      this.$refs.table.closeHeaderEdit(columnProp)\n    }\n  },\n  created () {\n    this.optionsId = this.data.map((row, rowIndex) =&gt; {\n      return {\n        value: rowIndex,\n        label: `跳转到${row.id}`\n      }\n    })\n  },\n  mounted () {\n    this.$nextTick(() =&gt; this.openHeaderEdit())\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"shu-xing-he-pei-zhi\"><a class=\"header-anchor\" href=\"#shu-xing-he-pei-zhi\">¶</a> 属性和配置</h3>\n<p>x-table 完整地保留了 pagination 和 table 的属性和事件，请前往 <a href=\"#/component/pagination\">pagination</a> 和 <a href=\"#/component/table\">table</a> 查看详细属性和事件，以下列举它们的一些区别：</p>\n<p>1.x-table 的匿名插槽同 table，用于存放 table-column，具名插槽 header/footer 用于存放头部/尾部区域，一般来说，这里会放置一些按钮，像上面的例子那样；<br>\n2.x-table 提供了一个名为 <code>pagination-change</code> 的事件，这是一个整合了 pagination 中 <code>size-change</code> 和 <code>current-change</code> 事件的事件，即当 <code>currentPage</code> 或 <code>pageSize</code> 中任一项发生变化都会触发此事件，携带的参数是一个对象，包含当前的<code>currentPage</code> 和 <code>pageSize</code>；<br>\n3.x-table 必须配置一个有效的高度，否则 table 组件的高度的计算将出现问题；<br>\n4.x-table 也完整地保留了 pagination 和 table 的方法，但是由于它们被封装在了内部，所以你需要先取到它们的实例，才能使用对应的方法，方法名参见下方 Methods。</p>\n<h3 id=\"xtable-e-wai-de-attributes\"><a class=\"header-anchor\" href=\"#xtable-e-wai-de-attributes\">¶</a> XTable 额外的 Attributes</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>可选值</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>header-height</td>\n<td>自定义头部高度</td>\n<td>string/number</td>\n<td>*</td>\n<td>34</td>\n</tr>\n<tr>\n<td>hide-header-slot</td>\n<td>是否需要隐藏头部插槽(在头部插槽存在的情况下)</td>\n<td>boolean</td>\n<td>*</td>\n<td>fasle</td>\n</tr>\n<tr>\n<td>need-pagination</td>\n<td>是否需要 pagination 组件</td>\n<td>boolean</td>\n<td>*</td>\n<td>true</td>\n</tr>\n<tr>\n<td>pagination-height</td>\n<td>自定义分页组件高度</td>\n<td>string/number</td>\n<td>*</td>\n<td>36</td>\n</tr>\n<tr>\n<td>footer-height</td>\n<td>自定义尾部高度</td>\n<td>string/number</td>\n<td>*</td>\n<td>34</td>\n</tr>\n<tr>\n<td>hide-footer-slot</td>\n<td>是否需要隐藏尾部插槽(在尾部插槽存在的情况下)</td>\n<td>boolean</td>\n<td>*</td>\n<td>fasle</td>\n</tr>\n<tr>\n<td>data</td>\n<td>表格数据</td>\n<td>array</td>\n<td>*</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>columns</td>\n<td>列配置，详见下方</td>\n<td>array</td>\n<td>*</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>columnStrict</td>\n<td>是否开启列配置严格隔离模式,开启后,columns需要变化时,需要手动更新调用renderColumns</td>\n<td>boolean</td>\n<td>*</td>\n<td>true</td>\n</tr>\n<tr>\n<td>hasIndex</td>\n<td>是否需要序号列</td>\n<td>boolean</td>\n<td>*</td>\n<td>false</td>\n</tr>\n<tr>\n<td>hasSelection</td>\n<td>是否需要开启多选</td>\n<td>boolean</td>\n<td>*</td>\n<td>false</td>\n</tr>\n<tr>\n<td>hasOperation</td>\n<td>是否需要操作列</td>\n<td>boolean</td>\n<td>*</td>\n<td>false</td>\n</tr>\n<tr>\n<td>operationWidth</td>\n<td>操作列宽度</td>\n<td>string/number</td>\n<td>*</td>\n<td>120</td>\n</tr>\n<tr>\n<td>operationConfig</td>\n<td>操作列的其他配置</td>\n<td>object</td>\n<td>*</td>\n<td>{}</td>\n</tr>\n<tr>\n<td>operationButtons</td>\n<td>操作列按钮配置，详见下方</td>\n<td>array</td>\n<td>*</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>toolbarList</td>\n<td>工具栏按钮配置，详见下方</td>\n<td>array</td>\n<td>*</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>pageSizes</td>\n<td>可选每页条数</td>\n<td>array</td>\n<td>*</td>\n<td>[10, 20, 50, 100]</td>\n</tr>\n<tr>\n<td>defaultPageSizeIndex</td>\n<td>默认每页条数，对应pageSizes的索引</td>\n<td>number</td>\n<td>*</td>\n<td>1</td>\n</tr>\n<tr>\n<td>defaultCurrentPage</td>\n<td>默认当前页码</td>\n<td>number</td>\n<td>*</td>\n<td>1</td>\n</tr>\n<tr>\n<td>diyPageData</td>\n<td>是否自定义分页数据</td>\n<td>boolean</td>\n<td>*</td>\n<td>true</td>\n</tr>\n<tr>\n<td>total</td>\n<td>数据总数（diyPageData：true时有效）</td>\n<td>number</td>\n<td>*</td>\n<td>0</td>\n</tr>\n<tr>\n<td>pageSize</td>\n<td>每页数（diyPageData：true时有效）</td>\n<td>number</td>\n<td>*</td>\n<td>20</td>\n</tr>\n<tr>\n<td>currentPage</td>\n<td>当前页数（diyPageData：true时有效）</td>\n<td>number</td>\n<td>*</td>\n<td>1</td>\n</tr>\n<tr>\n<td>needApi</td>\n<td>是否需要调用api</td>\n<td>boolean</td>\n<td>*</td>\n<td>false</td>\n</tr>\n<tr>\n<td>apiFunc</td>\n<td>请求表格数据方法,参数为分页信息</td>\n<td>function</td>\n<td>*</td>\n<td>function (pageInfo) { Promise.resolve({}) }</td>\n</tr>\n<tr>\n<td>finishPostApi</td>\n<td>apiFunc请求完成并数据回填表格后的方法，参数依次为表格数据，分页信息，表格实例</td>\n<td>function</td>\n<td>*</td>\n<td>function (data, pageInfo, vm) {}</td>\n</tr>\n<tr>\n<td>resPonseKey</td>\n<td>当接口返回数据格式为object时，作为表格数据的key名；</td>\n<td>object</td>\n<td>*</td>\n<td>{ dataKey: 'list', totalKey: 'totalRows' }</td>\n</tr>\n<tr>\n<td>getDataAtOnce</td>\n<td>在配置了接口的情况下，是否在挂载完成后立刻请求接口</td>\n<td>Boolean</td>\n<td>*</td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"cao-zuo-lie-an-niu-pei-zhi\"><a class=\"header-anchor\" href=\"#cao-zuo-lie-an-niu-pei-zhi\">¶</a> 操作列按钮配置</h3>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>string</td>\n<td>按钮名称/图标类名（按钮默认以文本显示，若需要显示成图标，需在将operationConfig里配置buttonType: icon）</td>\n</tr>\n<tr>\n<td>showable</td>\n<td>Function(button, buttonIndex, row, rowIndex)/Boolean</td>\n<td>是否显示</td>\n</tr>\n<tr>\n<td>click</td>\n<td>Function(button, buttonIndex, row, rowIndex)</td>\n<td>按钮点击事件</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"gong-ju-lan-an-niu-pei-zhi\"><a class=\"header-anchor\" href=\"#gong-ju-lan-an-niu-pei-zhi\">¶</a> 工具栏按钮配置</h3>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>—</td>\n<td>—</td>\n<td>按钮的内容，同 button</td>\n</tr>\n<tr>\n<td>name</td>\n<td>string</td>\n<td>按钮名称</td>\n</tr>\n<tr>\n<td>click</td>\n<td>Function(button)</td>\n<td>按钮点击事件</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"lie-pei-zhi\"><a class=\"header-anchor\" href=\"#lie-pei-zhi\">¶</a> 列配置</h3>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>类型</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>—</td>\n<td>—</td>\n<td>列的内容，同 Table-column</td>\n<td>—</td>\n</tr>\n<tr>\n<td>useSlotForm</td>\n<td>boolean</td>\n<td>使用插槽编辑项</td>\n<td>—</td>\n</tr>\n<tr>\n<td>form</td>\n<td>object</td>\n<td>单元格表单配置（支持表单项本身的属性配置，具体配置详见对应的文档）</td>\n<td>—</td>\n</tr>\n<tr>\n<td>form.diyType</td>\n<td>boolean</td>\n<td>是否使用自定义表单组件</td>\n<td>—</td>\n</tr>\n<tr>\n<td>form.type</td>\n<td>string</td>\n<td>表单组件；diyType为false时，支持组件库所有表单组件，去除‘df-’前缀即可(例如：input/select/input-number)；diyType为true时，为自定义表单组件的名字</td>\n<td>—</td>\n</tr>\n<tr>\n<td>form.itemType</td>\n<td>string</td>\n<td>type里面的子表单组件，用于需要两个标签搭配使用的表单组件；例如select搭配option</td>\n<td>—</td>\n</tr>\n<tr>\n<td>form.modelKey</td>\n<td>string</td>\n<td>表单绑定字段，无则默认绑定column.prop</td>\n<td>''</td>\n</tr>\n<tr>\n<td>form.disabled</td>\n<td>boolean/function(value, row, column)</td>\n<td>表单是否禁用</td>\n<td>-</td>\n</tr>\n<tr>\n<td>form.dicData</td>\n<td>array</td>\n<td>选项数组</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>form.filterDic</td>\n<td>function(dicData, row)</td>\n<td>选项数组过滤方法</td>\n<td>-</td>\n</tr>\n<tr>\n<td>form.labelKey</td>\n<td>string</td>\n<td>选项绑定的名称字段</td>\n<td>'label'</td>\n</tr>\n<tr>\n<td>form.valueKey</td>\n<td>string</td>\n<td>选项绑定的值字段</td>\n<td>'value'</td>\n</tr>\n<tr>\n<td>form.bindObj</td>\n<td>boolean</td>\n<td>选项值是否绑定为整个对象（仅适用于select）</td>\n<td>-</td>\n</tr>\n<tr>\n<td>form.independent</td>\n<td>boolean</td>\n<td>否开启独立管理下拉选项，开启后，需要手动通过表单实例设置下拉选项options（仅适用于select）</td>\n<td>-</td>\n</tr>\n<tr>\n<td>form.events</td>\n<td>{event: function}</td>\n<td>表单项的事件（change、foucus、blur...），回调参数为：事件原本的回调参数+{row: 当前行数据, vm: 当前单元格表单项示例, $index: 当前rowIndex}</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"slot\"><a class=\"header-anchor\" href=\"#slot\">¶</a> Slot</h3>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>—</td>\n<td>表格的内容，同 table</td>\n</tr>\n<tr>\n<td>列的属性名+Header</td>\n<td>自定义具体某一列的表头内容</td>\n</tr>\n<tr>\n<td>列的属性名+HeaderEditing</td>\n<td>自定义具体某一列的表头内容</td>\n</tr>\n<tr>\n<td>列的属性名+Edit</td>\n<td>自定义具体某一列的打开编辑插槽后的内容</td>\n</tr>\n<tr>\n<td>列的属性名</td>\n<td>自定义具体某一列的内容</td>\n</tr>\n<tr>\n<td>pre</td>\n<td>插入columns配置的列前面</td>\n</tr>\n<tr>\n<td>empty</td>\n<td>自定义空数据展示内容，同 table。</td>\n</tr>\n<tr>\n<td>append</td>\n<td>插入至表格最后一行之后的内容，如果需要对表格的内容进行无限滚动操作，可能需要用到这个 slot。若表格有合计行，该 slot 会位于合计行之上，同 table。</td>\n</tr>\n<tr>\n<td>customSummary</td>\n<td>开启合计行之后，自定义合计行内容，同 table。</td>\n</tr>\n<tr>\n<td>header</td>\n<td>头部内容</td>\n</tr>\n<tr>\n<td>footer</td>\n<td>尾部内容</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"methods\"><a class=\"header-anchor\" href=\"#methods\">¶</a> Methods</h3>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getRefTable</td>\n<td>获取 table 组件，以使用其方法</td>\n<td>—</td>\n</tr>\n<tr>\n<td>getRefPagination</td>\n<td>获取 pagination 组件，以使用其方法</td>\n<td>—</td>\n</tr>\n<tr>\n<td>getFormRef</td>\n<td>获取某一行某一列表单项的ref</td>\n<td>prop, rowIndex</td>\n</tr>\n<tr>\n<td>openEdit</td>\n<td>开启编辑,有传入rowIndex时，则仅开启对应行的编辑项，反之开启全部</td>\n<td>rowIndex</td>\n</tr>\n<tr>\n<td>closeEdit</td>\n<td>关闭编辑,有传入rowIndex时，则仅关闭对应行的编辑项，反之关闭全部</td>\n<td>rowIndex</td>\n</tr>\n<tr>\n<td>editFocus</td>\n<td>编辑项聚焦</td>\n<td>prop, rowIndex</td>\n</tr>\n<tr>\n<td>editFocusSelect</td>\n<td>编辑项聚焦并全选内容</td>\n<td>prop, rowIndex</td>\n</tr>\n<tr>\n<td>editBlur</td>\n<td>编辑项失焦</td>\n<td>prop, rowIndex</td>\n</tr>\n<tr>\n<td>getTableData</td>\n<td>获取表格数据,传入keepFirstPage时,将从第一页开始搜索</td>\n<td>'keepFirstPage'</td>\n</tr>\n<tr>\n<td>updateColumns</td>\n<td>手动更新表格列配置（可在当列配置发生变化后手动调用）</td>\n<td>—</td>\n</tr>\n<tr>\n<td>openHeaderEdit</td>\n<td>开启表头编辑,有传入columnProp时，则仅开启对应列表头的编辑项，反之开启全部</td>\n<td>columnProp</td>\n</tr>\n<tr>\n<td>closeHeaderEdit</td>\n<td>关闭表头编辑,有传入columnProp时，则仅关闭对应列表头的编辑项，反之关闭全部</td>\n<td>columnProp</td>\n</tr>\n<tr>\n<td>updatePageSize</td>\n<td>更新每页条数, 入参需为数字</td>\n<td>size</td>\n</tr>\n<tr>\n<td>updateCurrentPage</td>\n<td>更新当前页数, 入参需为数字</td>\n<td>pageNumber</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"xtable-e-wai-de-events\"><a class=\"header-anchor\" href=\"#xtable-e-wai-de-events\">¶</a> XTable 额外的 Events</h3>\n<table>\n<thead>\n<tr>\n<th>事件名称</th>\n<th>说明</th>\n<th>回调参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pagination-change</td>\n<td>启用<code>pagination</code>后，当<code>pagination</code>的<code>currentPage</code>或<code>pageSize</code>中任一项发生变化都会触发此事件，携带的参数是一个对象，包含当前的<code>currentPage</code> 和 <code>pageSize</code></td>\n<td>{currentPage, pageSize}</td>\n</tr>\n<tr>\n<td>getData</td>\n<td>表格接口请求成功后触发该事件</td>\n<td>tableData</td>\n</tr>\n<tr>\n<td>formChange</td>\n<td>表格内的表单的change事件</td>\n<td>prop, value, row, rowIndex</td>\n</tr>\n</tbody>\n</table>\n\n      </section>\n    </template>\n    <script>\n      export default {\n        name: 'component-doc',\n        components: {\n          \"df-demo0\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{staticStyle:{\"height\":\"413px\"},attrs:{\"data\":_vm.tableData,\"page-sizes\":_vm.pageSizes,\"page-size\":_vm.pageSize,\"layout\":_vm.layout,\"total\":_vm.total,\"small\":false},on:{\"pagination-change\":_vm.handlePaginationChange}},[_c('df-table-column',{attrs:{\"prop\":\"index\",\"label\":\"序号\",\"width\":\"50\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"date\",\"label\":\"日期\",\"width\":\"150\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"name\",\"label\":\"姓名\",\"width\":\"150\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"gender\",\"label\":\"性别\",\"width\":\"150\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"address\",\"label\":\"地址\"}})],1)]],2)}\nvar staticRenderFns = []\n\n  \n    // 生成大量数据\nconst total = 1000\nconst tableData = new Array(total)\n  .fill(0)\n  .map((item, index) => ({\n    index: index + 1,\n    date: '2016-05-03',\n    name: '李时珍',\n    gender: '女',\n    address: '四川省武当山普陀区金沙江路 1518 弄'\n  }))\n\n// 这里的方法可以看做接口模拟，用来获取表格数据和总长度的\nconst getData = (page, pageSize) => {\n  console.log(`开始查询表格数据，当前页是第 ${page} 页，每一页请求 ${pageSize} 条数据`)\n  const result = tableData.slice(\n    pageSize * (page - 1),\n    pageSize * page\n  )\n  console.log('本次查询的结果是', result)\n  return result\n}\nconst getTotal = () => total\n\nconst democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      tableData: [],\n      total: 1,\n      pageSizes: [5, 10, 20, 50, 100, 200, 300, 400],\n      pageSize: 10,\n      currentPage: 1,\n      layout: 'total, sizes, prev, pager, next, jumper'\n    }\n  },\n  methods: {\n    getTotal () {\n      this.total = getTotal()\n    },\n    getData () {\n      this.tableData = getData(this.currentPage, this.pageSize)\n    },\n    handlePaginationChange (paginationStatus) {\n      this.currentPage = paginationStatus.currentPage\n      this.pageSize = paginationStatus.pageSize\n      this.getData()\n    }\n  },\n  created () {\n    this.getTotal()\n    this.getData()\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo1\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{staticStyle:{\"height\":\"353px\"},attrs:{\"data\":_vm.tableData,\"needPagination\":false}},[_c('df-table-column',{attrs:{\"prop\":\"index\",\"label\":\"序号\",\"width\":\"50\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"date\",\"label\":\"日期\",\"width\":\"150\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"name\",\"label\":\"姓名\",\"width\":\"150\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"gender\",\"label\":\"性别\",\"width\":\"150\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"address\",\"label\":\"地址\"}})],1)]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      tableData: new Array(10)\n        .fill(0)\n        .map((item, index) => ({\n          index: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        }))\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo2\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{staticStyle:{\"height\":\"387px\"},attrs:{\"data\":_vm.tableData,\"needPagination\":false}},[_c('template',{slot:\"header\"},[_c('df-button',{attrs:{\"type\":\"success\"}},[_c('i',{staticClass:\"df-icon-add\"}),_vm._v(\"\\n        开单\\n      \")]),_vm._v(\" \"),_c('df-button',{attrs:{\"plain\":\"\"}},[_vm._v(\"打印\")]),_vm._v(\" \"),_c('df-button',{attrs:{\"plain\":\"\",\"icon\":\"df-icon-refresh\"}})],1),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"index\",\"label\":\"序号\",\"width\":\"50\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"date\",\"label\":\"日期\",\"width\":\"150\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"name\",\"label\":\"姓名\",\"width\":\"150\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"gender\",\"label\":\"性别\",\"width\":\"150\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"address\",\"label\":\"地址\"}})],2)]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      tableData: new Array(10)\n        .fill(0)\n        .map((item, index) => ({\n          index: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        }))\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo3\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{staticStyle:{\"height\":\"387px\"},attrs:{\"data\":_vm.tableData,\"needPagination\":false}},[_c('df-table-column',{attrs:{\"prop\":\"index\",\"label\":\"序号\",\"width\":\"50\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"date\",\"label\":\"日期\",\"width\":\"150\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"name\",\"label\":\"姓名\",\"width\":\"150\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"gender\",\"label\":\"性别\",\"width\":\"150\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"address\",\"label\":\"地址\"}}),_vm._v(\" \"),_c('template',{slot:\"footer\"},[_c('df-button',{attrs:{\"type\":\"success\"}},[_c('i',{staticClass:\"df-icon-add\"}),_vm._v(\"\\n        开单\\n      \")]),_vm._v(\" \"),_c('df-button',{attrs:{\"plain\":\"\"}},[_vm._v(\"打印\")]),_vm._v(\" \"),_c('df-button',{attrs:{\"plain\":\"\",\"icon\":\"df-icon-refresh\"}})],1)],2)]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      tableData: new Array(10)\n        .fill(0)\n        .map((item, index) => ({\n          index: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        }))\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo4\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{ref:\"table\",staticStyle:{\"height\":\"387px\"},attrs:{\"has-index\":\"\",\"data\":_vm.data,\"columns\":_vm.columns,\"needPagination\":false}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      data: new Array(10)\n        .fill(0)\n        .map((item, index) => ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        })),\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name'\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }]\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo5\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{ref:\"table\",staticStyle:{\"height\":\"387px\"},attrs:{\"has-index\":\"\",\"data\":_vm.data,\"columns\":_vm.columns,\"needPagination\":false}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      data: new Array(10)\n        .fill(0)\n        .map((item, index) => ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        })),\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '人员信息',\n        children: [{\n          label: '姓名',\n          prop: 'name'\n        }, {\n          label: '性别',\n          prop: 'gender'\n        }, {\n          label: '地址',\n          prop: 'address',\n          minWidth: 250\n        }]\n      }]\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo6\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{ref:\"table\",staticStyle:{\"height\":\"387px\"},attrs:{\"data\":_vm.data,\"columns\":_vm.columns,\"needPagination\":false,\"row-key\":\"id\",\"border\":\"\",\"use-tree\":\"\",\"default-expand-all\":\"\",\"tree-props\":{children: 'children', hasChildren: 'hasChildren'}}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name'\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }],\n      data: new Array(5)\n        .fill(0)\n        .map((item, index) => ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄',\n          children: [{\n            id: Number(`${index + 1}${index + 1}`),\n            date: '2016-05-03',\n            name: '李时珍',\n            gender: '女',\n            address: '四川省武当山普陀区金沙江路 1518 弄'\n          }, {\n            id: Number(`${index + 1}${index + 2}`),\n            date: '2016-05-03',\n            name: '李时珍',\n            gender: '女',\n            address: '四川省武当山普陀区金沙江路 1518 弄'\n          }]\n        }))\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo7\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{ref:\"table\",staticStyle:{\"height\":\"387px\"},attrs:{\"data\":_vm.data,\"columns\":_vm.columns,\"has-index\":\"\",\"has-operation\":\"\",\"operation-buttons\":_vm.operationButtons,\"operation-width\":120,\"toolbar-list\":_vm.toolbarList,\"needPagination\":false}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      data: new Array(10)\n        .fill(0)\n        .map((item, index) => ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        })),\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name'\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }],\n      operationButtons: [{ // 操作列\n        name: '编辑',\n        click: (row, buttonIndex, rowIndex) => {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }, {\n        name: '删除',\n        click: (row, buttonIndex, rowIndex) => {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }],\n      toolbarList: [{ // 工具栏\n        name: '新增',\n        icon: 'df-icon-add',\n        type: 'success',\n        click: () => {}\n      }]\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo8\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{ref:\"table\",staticStyle:{\"height\":\"387px\"},attrs:{\"data\":_vm.pageData,\"columns\":_vm.columns,\"has-index\":\"\",\"has-operation\":\"\",\"operation-buttons\":_vm.operationButtons,\"operation-width\":120,\"toolbar-list\":_vm.toolbarList,\"need-pagination\":\"\",\"total\":_vm.total,\"pageSize\":_vm.pageSize,\"currentPage\":_vm.currentPage,\"pageSizes\":_vm.pageSizes,\"defaultPageSizeIndex\":1},on:{\"pagination-change\":_vm.handlePaginationChange}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      data: new Array(18)\n        .fill(0)\n        .map((item, index) => ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        })),\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name'\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }],\n      operationButtons: [{ // 操作列\n        name: '编辑',\n        click: (row, buttonIndex, rowIndex) => {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }, {\n        name: '删除',\n        click: (row, buttonIndex, rowIndex) => {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }],\n      toolbarList: [{ // 工具栏\n        name: '新增',\n        icon: 'df-icon-add',\n        type: 'success',\n        click: () => {}\n      }],\n      pageSize: 10,\n      currentPage: 1,\n      pageSizes: [5, 10, 20, 50]\n    }\n  },\n  computed: {\n    total () {\n      return this.data.length\n    },\n    pageData () {\n      const start = (this.currentPage - 1) * this.pageSize\n      const end = this.currentPage * this.pageSize\n      return this.data.slice(start, end)\n    }\n  },\n  methods: {\n    // 分页器的change事件\n    handlePaginationChange (paginationStatus) {\n      this.currentPage = paginationStatus.currentPage || 1\n      this.pageSize = paginationStatus.pageSize || 10\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo9\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.loading),expression:\"loading\"}],ref:\"table\",staticStyle:{\"height\":\"387px\"},attrs:{\"data\":_vm.data,\"columns\":_vm.columns,\"has-index\":\"\",\"has-operation\":\"\",\"operation-buttons\":_vm.operationButtons,\"operation-width\":120,\"toolbar-list\":_vm.toolbarList,\"need-pagination\":\"\",\"diyPageData\":false,\"pageSizes\":_vm.pageSizes,\"defaultPageSizeIndex\":1}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      loading: false,\n      data: [],\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name'\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }],\n      operationButtons: [{ // 操作列\n        name: '编辑',\n        click: (row, buttonIndex, rowIndex) => {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }, {\n        name: '删除',\n        click: (row, buttonIndex, rowIndex) => {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }],\n      toolbarList: [{ // 工具栏\n        name: '刷新',\n        icon: 'df-icon-refresh',\n        type: 'success',\n        click: () => {\n          this.$refs.table.updateCurrentPage(1)\n          this.getTableData()\n        }\n      }],\n      pageSizes: [5, 10, 20, 50]\n    }\n  },\n  methods: {\n    getTableData () {\n      const data = new Array(27)\n        .fill(0)\n        .map((item, index) => ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        }))\n      this.loading = true\n      setTimeout(() => {\n        this.$set(this, 'data', data)\n        this.loading = false\n      }, 2000)\n    }\n  },\n  created () {\n    this.getTableData()\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo10\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{ref:\"table\",staticStyle:{\"height\":\"387px\"},attrs:{\"columns\":_vm.columns,\"has-index\":\"\",\"has-operation\":\"\",\"operation-buttons\":_vm.operationButtons,\"operation-width\":120,\"toolbar-list\":_vm.toolbarList,\"need-pagination\":\"\",\"diyPageData\":false,\"pageSizes\":_vm.pageSizes,\"defaultPageSizeIndex\":1,\"needApi\":\"\",\"apiFunc\":_vm.getData,\"finishPostApi\":_vm.handleFollowUp,\"resPonseKey\":_vm.resPonseKey}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name'\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }],\n      operationButtons: [{ // 操作列\n        name: '编辑',\n        click: (row, buttonIndex, rowIndex) => {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }, {\n        name: '删除',\n        click: (row, buttonIndex, rowIndex) => {\n          console.log(row, buttonIndex, rowIndex)\n        }\n      }],\n      toolbarList: [{ // 工具栏\n        name: '刷新',\n        type: 'success',\n        icon: 'df-icon-refresh',\n        click: () => {\n          this.$refs.table.getTableData()\n        }\n      }],\n      pageSizes: [5, 10, 20, 50],\n      // 若接口返回的是一个对象，则需要定义对象里哪个字段作为表格数据，哪个字段作为表格总数\n      // 若接口返回的是数组，则应该直接通过data传入表格数据\n      resPonseKey: {\n        dataKey: 'list',\n        totalKey: 'totalRows'\n      }\n    }\n  },\n  methods: {\n    getData (pageInfo, xtable) {\n      // pageInfo = {pageSize, pageIndex} 分页信息, xtable 表格实例\n      function rand (min, max) {\n        return Math.floor(Math.random() * ( max - min )) + min\n      }\n      const sex = ['男', '女']\n      const data = new Array(pageInfo.pageSize)\n        .fill(0)\n        .map((item, index) => ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: sex[Number(rand(0, 2))],\n          address: `四川省武当山普陀区金沙江路 ${rand(100, 9999)} 弄`\n        }))\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            list: data,\n            totalRows: 30\n          })\n        }, 2000)\n      })\n    },\n    handleFollowUp (data, pageInfo, xtable) {\n      // 处理接口调完后续\n      // data 表格数据, pageInfo = {pageSize, pageIndex} 分页信息, xtable 表格实例\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo11\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.loading),expression:\"loading\"}],ref:\"table\",staticStyle:{\"height\":\"387px\"},attrs:{\"data\":_vm.data,\"columns\":_vm.columns,\"column-options\":_vm.columnOptions,\"has-operation\":\"\",\"operation-buttons\":_vm.operationButtons,\"operation-width\":120,\"need-pagination\":false},on:{\"enter\":_vm.handleFormEnter,\"formChange\":_vm.handleFormChange}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      loading: false,\n      data: [],\n      columns: [{\n        label: '日期',\n        prop: 'date',\n        form: {\n          formType: 'date-picker'\n        }\n      }, {\n        label: '姓名',\n        prop: 'name',\n        form: {\n          type: 'input',\n          modelKey: 'nickName'\n        }\n      }, {\n        label: '性别',\n        prop: 'gender',\n        form: {\n          type: 'select',\n          itemType: 'option',\n          labelKey: 'label',\n          valueKey: 'value',\n          bindObj: true, // 选项值是否绑定为整个对象\n          dicData: [\n            { label: '男', value: 0 },\n            { label: '女', value: 1 }\n          ]\n        }\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250,\n        form: {\n          type: 'input'\n        }\n      }],\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: ['date', 'name', 'gender', 'address']\n        }\n      },\n      operationButtons: [{ // 操作列\n        name: '新增',\n        showable: (row, rowIndex) => rowIndex === (this.data.length - 1),\n        click: (row, buttonIndex, rowIndex) => {\n          this.addRow()\n        }\n      }, {\n        name: '删除',\n        click: (row, buttonIndex, rowIndex) => {\n          this.data.splice(rowIndex, 1)\n        }\n      }]\n    }\n  },\n  methods: {\n    getData () {\n      function rand (min, max) {\n        return Math.floor(Math.random() * ( max - min )) + min\n      }\n      const data = new Array(5)\n        .fill(0)\n        .map((item, index) => ({\n          date: '2016-05-03 00:00:00',\n          name: '李时珍',\n          nickName: '小珍',\n          // gender: rand(0, 2),\n          gender: {value: rand(0, 2)},\n          address: `四川省武当山普陀区金沙江路 ${rand(100, 9999)} 弄`\n        }))\n      return new Promise((resolve) => {\n        this.loading = true\n        setTimeout(() => {\n          this.$set(this, 'data', data)\n          this.$nextTick(() => this.openEdit())\n          this.loading = false\n        }, 2000)\n      })\n    },\n    // 开启编辑\n    openEdit (index) {\n      const _XTable = this.$refs.table\n      _XTable.openEdit(index)\n      // 开启某一行时，聚焦第一个输入框\n      if (index || index === 0) this.$nextTick(() => _XTable.editFocus('date', index))\n    },\n    // 新增行\n    addRow () {\n      this.data.push({\n        date: '',\n        name: '',\n        nickName: '',\n        gender: null,\n        address: ''\n      })\n      const newRowIndex = this.data.length - 1\n      this.openEdit(newRowIndex)\n    },\n    handleFormEnter (prop, value, row, index) {\n      const _XTable = this.$refs.table\n      const _Table = _XTable.getRefTable()\n      const {columnProp, rowIndex, isFirstEditableSlot} = _Table.getNextEditableSlot(prop, index)\n      isFirstEditableSlot ? this.addRow() : _XTable.editFocus(columnProp, rowIndex)\n    },\n    handleFormChange (prop, value, row, rowIndex) {\n      console.log('prop', row)\n      this.handleFormEnter(prop, value, row, rowIndex)\n    }\n  },\n  mounted () {\n    this.getData()\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo12\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.loading),expression:\"loading\"}],ref:\"table\",staticStyle:{\"height\":\"387px\"},attrs:{\"data\":_vm.data,\"columns\":_vm.columns,\"column-options\":_vm.columnOptions,\"has-operation\":\"\",\"operation-buttons\":_vm.operationButtons,\"operation-width\":120,\"need-pagination\":false,\"border\":\"\"}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      loading: false,\n      data: [],\n      columns: [{\n        label: '日期',\n        prop: 'date',\n        form: {\n          formType: 'date-picker'\n        }\n      }, {\n        label: '人员信息',\n        children: [{\n          label: '姓名',\n          prop: 'name',\n          form: {\n            type: 'input'\n          }\n        }, {\n          label: '性别',\n          prop: 'gender',\n          form: {\n            type: 'select',\n            itemType: 'option',\n            labelKey: 'label',\n            valueKey: 'value',\n            selectLabel: 'label',\n            dicData: [],\n            bindObj: true,\n            independent: true, // 开启独立管理下拉选项\n            filterable: true,\n            remote: true,\n            events: {\n              'focus': (e, {row, vm, $index}) => {\n                const value = row.gender // 记录下当前值（为了在获取选项后，将下拉框里的值显示成label，需要在获取选项后重置一下当前值）\n                this.$set(row, 'gender', '')\n                vm.loading = true\n                setTimeout(() => {\n                  const options = row.name ? [\n                    {label: '男', value: 0},\n                    {label: '女', value: 1}\n                  ] : []\n                  this.$set(vm, 'options', options)\n                  this.$nextTick(() => this.$set(row, 'gender', value))\n                  vm.loading = false\n                }, 1000)\n              },\n              'blur': (e, {row, vm}) => {\n                this.$set(vm, 'options', [])\n              }\n            }\n          }\n        }, {\n          label: '地址',\n          prop: 'address',\n          minWidth: 250,\n          form: {\n            type: 'input'\n          }\n        }]\n      }],\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: ['date', 'name', 'gender', 'address']\n        }\n      },\n      operationButtons: [{ // 操作列\n        name: '新增',\n        showable: (row, rowIndex) => rowIndex === (this.data.length - 1),\n        click: (row, buttonIndex, rowIndex) => {\n          this.addRow()\n        }\n      }, {\n        name: '删除',\n        click: (row, buttonIndex, rowIndex) => {\n          this.data.splice(rowIndex, 1)\n        }\n      }]\n    }\n  },\n  methods: {\n    getData () {\n      function rand (min, max) {\n        return Math.floor(Math.random() * ( max - min )) + min\n      }\n      const data = new Array(5)\n        .fill(0)\n        .map((item, index) => ({\n          date: '2016-05-03 00:00:00',\n          name: '李时珍',\n          gender: {label: '男', value: 0},\n          address: `四川省武当山普陀区金沙江路 ${rand(100, 9999)} 弄`\n        }))\n      return new Promise((resolve) => {\n        this.loading = true\n        setTimeout(() => {\n          this.$set(this, 'data', data)\n          this.$nextTick(() => this.openEdit())\n          this.loading = false\n        }, 2000)\n      })\n    },\n    // 开启编辑\n    openEdit (index) {\n      const _XTable = this.$refs.table\n      _XTable.openEdit(index)\n      // 开启某一行时，聚焦第一个输入框\n      if (index || index === 0) this.$nextTick(() => _XTable.editFocus('date', index))\n    },\n    // 新增行\n    addRow () {\n      this.data.push({\n        date: '',\n        name: '',\n        gender: null,\n        address: ''\n      })\n      const newRowIndex = this.data.length - 1\n      this.openEdit(newRowIndex)\n    }\n  },\n  mounted () {\n    this.getData()\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo13\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-x-table',{ref:\"table\",staticStyle:{\"height\":\"387px\"},attrs:{\"has-index\":\"\",\"data\":_vm.data,\"columns\":_vm.columns,\"needPagination\":false,\"column-options\":_vm.columnOptions,\"toolbar-list\":_vm.toolbarList},scopedSlots:_vm._u([{key:\"dateHeaderEditing\",fn:function(scope){return _c('df-select',{attrs:{\"placeholder\":\"请选择\"},on:{\"change\":_vm.scrollToRowWithRowIndex,\"blur\":function($event){return _vm.closeHeaderEdit('date')}},model:{value:(_vm.headerData.date),callback:function ($$v) {_vm.$set(_vm.headerData, \"date\", $$v)},expression:\"headerData.date\"}},_vm._l((_vm.optionsId),function(item){return _c('df-option',{key:item.value,attrs:{\"label\":item.label,\"value\":item.value}})}),1)}},{key:\"nameHeaderEditing\",fn:function(scope){return _c('df-input',{attrs:{\"placeholder\":\"输入行数并按下enter\"},on:{\"change\":function($event){return _vm.scrollToRowWithRowIndex(_vm.headerData.name - 1)},\"blur\":function($event){return _vm.closeHeaderEdit('name')}},model:{value:(_vm.headerData.name),callback:function ($$v) {_vm.$set(_vm.headerData, \"name\", _vm._n($$v))},expression:\"headerData.name\"}})}}])})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  name: 'Demo',\n  data () {\n    return {\n      data: new Array(30)\n        .fill(0)\n        .map((item, index) => ({\n          id: index + 1,\n          date: '2016-05-03',\n          name: '李时珍',\n          gender: '女',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        })),\n      columns: [{\n        label: '日期',\n        prop: 'date'\n      }, {\n        label: '姓名',\n        prop: 'name',\n        minWidth: 120\n      }, {\n        label: '性别',\n        prop: 'gender'\n      }, {\n        label: '地址',\n        prop: 'address',\n        minWidth: 250\n      }],\n      toolbarList: [{\n        name: '开启全部表头编辑',\n        click: () => {\n          this.openHeaderEdit()\n        }\n      }, {\n        name: '关闭全部表头编辑',\n        click: () => {\n          this.closeHeaderEdit()\n        }\n      }],\n      columnOptions: {\n        headerEditConfig: {\n          editableHeaders: ['date', 'name']\n        }\n      },\n      headerData: {\n        date: null,\n        name: ''\n      },\n      optionsId: []\n    }\n  },\n  methods: {\n    scrollToRowWithRowIndex (rowIndex) {\n      const _Table = this.$refs.table.getRefTable()\n      _Table.scrollToRowIndex(rowIndex)\n    },\n    openHeaderEdit (columnProp) {\n      this.$refs.table.openHeaderEdit(columnProp)\n    },\n    closeHeaderEdit (columnProp) {\n      this.$refs.table.closeHeaderEdit(columnProp)\n    }\n  },\n  created () {\n    this.optionsId = this.data.map((row, rowIndex) => {\n      return {\n        value: rowIndex,\n        label: `跳转到${row.id}`\n      }\n    })\n  },\n  mounted () {\n    this.$nextTick(() => this.openHeaderEdit())\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\n        }\n      }\n    </script>\n  ","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js!../../../docs/md-loader/index.js!../../../node_modules/eslint-loader/index.js??ref--14-0!./xTable.md?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js!../../../docs/md-loader/index.js!../../../node_modules/eslint-loader/index.js??ref--14-0!./xTable.md?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./xTable.md?vue&type=template&id=771883df&\"\nimport script from \"./xTable.md?vue&type=script&lang=js&\"\nexport * from \"./xTable.md?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}