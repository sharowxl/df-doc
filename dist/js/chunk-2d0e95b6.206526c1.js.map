{"version":3,"sources":["webpack:///./src/docs-ui/form/pageSelect.md","webpack:///src/docs-ui/form/pageSelect.md","webpack:///./src/docs-ui/form/pageSelect.md?3373","webpack:///./src/docs-ui/form/pageSelect.md?f937"],"names":["render","_vm","this","_c","_self","staticClass","_m","_v","slot","pre","attrs","staticRenderFns","name","components","_h","$createElement","pageSize","querySelectList","on","change","focus","blur","scopedSlots","_u","key","fn","scope","_l","list","item","valueKey","label","model","value","callback","$$v","expression","democomponentExport","data","price","size","column","width","prop","methods","_ref","_this","page","pagesize","keyword","console","log","filterList","filter","includes","currentPageList","slice","Promise","resolve","reject","total","length","catch","err","val","event","_objectSpread","position","_ref2","_this2","index","col","_ref3","_this3","_ref4","_this4","backgroundColor","icons","XIANSHILX","TUBIAO","_ref5","_this5","pureIcons","CHUNTUBIAO","_ref6","_this6","component"],"mappings":"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","file":"js/chunk-2d0e95b6.206526c1.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('section',{staticClass:\"content df-doc\"},[_vm._m(0),_c('p',[_vm._v(\"在 df-select 基础上进行的改造，将下拉选项改为分页展示。\")]),_vm._m(1),_c('p',[_vm._v(\"适用广泛的基础用法。\")]),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"动态下拉组件\"),_c('code',[_vm._v(\"v-model\")]),_vm._v(\"属性可以获取当前选中的值，通过传入参数完成下拉的基础用法详情见demo。\")])]),_c('template',{slot:\"source\"},[_c('df-demo0')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-page-select\\n    v-model=\\\"value\\\"\\n    selectLabel=\\\"label\\\"\\n    valueKey=\\\"valueKey\\\"\\n    @change=\\\"change\\\"\\n    @focus=\\\"focus\\\"\\n    @blur=\\\"blur\\\"\\n    :pageSize=\\\"pageSize\\\"\\n    :querySelectList=\\\"querySelectList\\\"\\n    currentPlaceholder=\\\"点击开启选择\\\"\\n  >\\n    <template v-slot=\\\"scope\\\">\\n      <df-option\\n        v-for=\\\"item in scope.list\\\"\\n        :key=\\\"item.valueKey\\\"\\n        :value=\\\"item\\\"\\n        :label=\\\"item.label\\\"\\n      />\\n    </template>\\n  </df-page-select>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      value: {},\\n      pageSize: 5,\\n      list: [\\n        {\\n          valueKey: '001',\\n          label: '胸部左侧X光',\\n          price: '38',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '002',\\n          label: '胸透',\\n          price: '36',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '003',\\n          label: '胸部右侧X光',\\n          price: '35',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '004',\\n          label: '抽血检测',\\n          price: '34',\\n          size: '√'\\n        }\\n      ],\\n      column: [\\n        {width: 20, label: '收费名称', prop: 'label'},\\n        {width: 20, label: '位置', prop: 'position'},\\n        {width: 20, label: '价格', prop: 'price'},\\n        {width: 20, label: '是否', prop: 'size'}\\n      ]\\n    }\\n  },\\n  methods: {\\n    querySelectList ({page, pagesize, keyword}) {\\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\\n      console.log(page, pagesize, keyword)\\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\\n      const filterList = this.list.filter(item => item.label.includes(keyword))\\n      // 然后根据当前页和每页条数, 计算出这一页的结果\\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\\n      return new Promise((resolve, reject) => {\\n        resolve({\\n          list: currentPageList,\\n          total: filterList.length,\\n          column: this.column\\n        })\\n      }).catch(err => {\\n        console.log(err)\\n      })\\n    },\\n    change (val) {\\n      console.log(val)\\n    },\\n    focus (event) {\\n      console.log('获取焦点')\\n    },\\n    blur (event) {\\n      console.log('失去焦点')\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(2),_c('p',[_vm._v(\"适用于大量数据数据查看摘用信息的时候可以进行使用。\")]),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"详情见demo\")])]),_c('template',{slot:\"source\"},[_c('df-demo1')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-page-select\\n    v-model='value'\\n    :pageSize=\\\"pageSize\\\"\\n    valueKey=\\\"valueKey\\\"\\n    selectLabel=\\\"label\\\"\\n    @change=\\\"change\\\"\\n    @focus=\\\"focus\\\"\\n    @blur=\\\"blur\\\"\\n    :querySelectList=\\\"querySelectList\\\" >\\n      <template v-slot=\\\"scope\\\">\\n        <df-option\\n          v-for=\\\"item in scope.list\\\"\\n          :key=\\\"item.valueKey\\\"\\n          :value=\\\"item\\\"\\n          :label=\\\"item.label\\\"\\n        />\\n      </template>\\n  </df-page-select>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      value: {},\\n      pageSize: 5,\\n      list: [\\n        {\\n          valueKey: '001',\\n          label: '胸部左侧X光',\\n          price: '38',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '002',\\n          label: '胸透',\\n          price: '36',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '003',\\n          label: '胸部右侧X光',\\n          price: '35',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '004',\\n          label: '抽血检测',\\n          price: '34',\\n          size: '√'\\n        }, {\\n          valueKey: '005',\\n          label: '核算检测',\\n          price: '99',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '021',\\n          label: '头部检测',\\n          price: '25',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '022',\\n          label: '核酸检测',\\n          position: '西湖区',\\n          price: '22',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '023',\\n          label: '血液检测',\\n          price: '21',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '024',\\n          label: '酒精检测',\\n          price: '29',\\n          size: '√'\\n        }\\n      ],\\n      column: [\\n        {width: 20, label: '收费名称', prop: 'label'},\\n        {width: 20, label: '位置', prop: 'position'},\\n        {width: 20, label: '价格', prop: 'price'},\\n        {width: 20, label: '是否', prop: 'size'}\\n      ]\\n    }\\n  },\\n  methods: {\\n    querySelectList ({page, pagesize, keyword}) {\\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\\n      console.log(page, pagesize, keyword)\\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\\n      const filterList = this.list.filter(item => item.label.includes(keyword))\\n      // 然后根据当前页和每页条数, 计算出这一页的结果\\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\\n      return new Promise((resolve, reject) => {\\n        resolve({\\n          list: currentPageList,\\n          total: filterList.length,\\n          column: this.column\\n        })\\n      }).catch(err => {\\n        console.log(err)\\n      })\\n    },\\n    change (val) {\\n      console.log(val)\\n    },\\n    focus (event) {\\n      console.log('获取焦点')\\n    },\\n    blur (event) {\\n      console.log('失去焦点')\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(3),_c('p',[_vm._v(\"适用于多列数据展示。\")]),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"需要在插槽内部插入df-select-column列组件 传入\"),_c('code',[_vm._v(\"optionIndex\")]),_vm._v(\" \"),_c('code',[_vm._v(\"width\")]),_vm._v(\" \"),_c('code',[_vm._v(\"label\")]),_vm._v(\" \"),_c('code',[_vm._v(\"key\")]),_vm._v(\" \"),_c('code',[_vm._v(\"prop\")]),_vm._v(\"来渲染出表头header\")])]),_c('template',{slot:\"source\"},[_c('df-demo2')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-page-select\\n    v-model='value'\\n    table\\n    :pageSize=\\\"pageSize\\\"\\n    selectLabel=\\\"label\\\"\\n    @change=\\\"change\\\"\\n    @focus=\\\"focus\\\"\\n    @blur=\\\"blur\\\"\\n    valueKey=\\\"valueKey\\\"\\n    :querySelectList=\\\"querySelectList\\\" >\\n      <template v-slot=\\\"scope\\\">\\n        <df-option\\n          v-for=\\\"(item, index) in scope.list\\\"\\n          :key=\\\"item.valueKey\\\"\\n          :value=\\\"item\\\"\\n          :label=\\\"item.label\\\"\\n        >\\n          <df-select-column\\n            :optionIndex=\\\"index\\\"\\n            :width=\\\"col.width * 6\\\"\\n            v-for=\\\"col in scope.column\\\"\\n            :label=\\\"col.label\\\"\\n            :key=\\\"col.prop\\\"\\n            :prop=\\\"col.prop\\\"\\n          />\\n        </df-option>\\n      </template>\\n  </df-page-select>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      value: {\\n        valueKey: '024',\\n        label: '酒精检测'\\n      },\\n      pageSize: 5,\\n      list: [\\n        {\\n          valueKey: '001',\\n          label: '胸部左侧X光',\\n          price: '38',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '002',\\n          label: '胸透',\\n          price: '36',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '003',\\n          label: '胸部右侧X光',\\n          price: '35',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '004',\\n          label: '抽血检测',\\n          price: '34',\\n          size: '√'\\n        }, {\\n          valueKey: '005',\\n          label: '核算检测',\\n          price: '99',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '021',\\n          label: '头部检测',\\n          price: '25',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '022',\\n          label: '核酸检测',\\n          position: '西湖区',\\n          price: '22',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '023',\\n          label: '血液检测',\\n          price: '21',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '024',\\n          label: '酒精检测',\\n          price: '29',\\n          size: '√'\\n        }\\n      ],\\n      column: [\\n        {width: 20, label: '收费名称', prop: 'label'},\\n        {width: 20, label: '位置', prop: 'position'},\\n        {width: 20, label: '价格', prop: 'price'},\\n        {width: 20, label: '是否', prop: 'size'}\\n      ]\\n    }\\n  },\\n  methods: {\\n    querySelectList ({page, pagesize, keyword}) {\\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\\n      console.log(page, pagesize, keyword)\\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\\n      const filterList = this.list.filter(item => item.label.includes(keyword))\\n      // 然后根据当前页和每页条数, 计算出这一页的结果\\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\\n      return new Promise((resolve, reject) => {\\n        resolve({\\n          list: currentPageList,\\n          total: filterList.length,\\n          column: this.column\\n        })\\n      }).catch(err => {\\n        console.log(err)\\n      })\\n    },\\n    change (val) {\\n      console.log(val)\\n    },\\n    focus (event) {\\n      console.log('获取焦点')\\n    },\\n    blur (event) {\\n      console.log('失去焦点')\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(4),_c('p',[_vm._v(\"适用于多列数据展示。\")]),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"提供了width属性 可以直接控制 \"),_c('code',[_vm._v(\"input\")]),_vm._v(\" 宽度\")])]),_c('template',{slot:\"source\"},[_c('df-demo3')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-page-select\\n    width=\\\"300px\\\"\\n    v-model='value'\\n    table\\n    :pageSize=\\\"pageSize\\\"\\n    selectLabel=\\\"label\\\"\\n    @change=\\\"change\\\"\\n    @focus=\\\"focus\\\"\\n    @blur=\\\"blur\\\"\\n    :isShow=\\\"true\\\"\\n    valueKey=\\\"valueKey\\\"\\n    :querySelectList=\\\"querySelectList\\\" >\\n      <template v-slot=\\\"scope\\\">\\n        <df-option\\n          v-for=\\\"(item, index) in scope.list\\\"\\n          :key=\\\"item.valueKey\\\"\\n          :value=\\\"item\\\"\\n          :label=\\\"item.label\\\"\\n        >\\n          <df-select-column\\n            :optionIndex=\\\"index\\\"\\n            :width=\\\"col.width*5\\\"\\n            v-for=\\\"col in scope.column\\\"\\n            :label=\\\"col.label\\\"\\n            :key=\\\"col.prop\\\"\\n            :prop=\\\"col.prop\\\"\\n          />\\n        </df-option>\\n      </template>\\n  </df-page-select>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      value: {\\n        valueKey: '024',\\n        label: '1111'\\n      },\\n      pageSize: 5,\\n      list: [\\n        {\\n          valueKey: '001',\\n          label: '胸部左侧X光',\\n          price: '38',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '002',\\n          label: '胸透',\\n          price: '36',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '003',\\n          label: '胸部右侧X光',\\n          price: '35',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '004',\\n          label: '抽血检测',\\n          price: '34',\\n          size: '√'\\n        }, {\\n          valueKey: '005',\\n          label: '核算检测',\\n          price: '99',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '021',\\n          label: '头部检测',\\n          price: '25',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '022',\\n          label: '核酸检测',\\n          position: '西湖区',\\n          price: '22',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '023',\\n          label: '血液检测',\\n          price: '21',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '024',\\n          label: '酒精检测',\\n          price: '29',\\n          size: '√'\\n        }\\n      ],\\n      column: [\\n        {width: 20, label: '收费名称', prop: 'label'},\\n        {width: 20, label: '位置', prop: 'position'},\\n        {width: 20, label: '价格', prop: 'price'},\\n        {width: 20, label: '是否', prop: 'size'}\\n      ]\\n    }\\n  },\\n  methods: {\\n    querySelectList ({page, pagesize, keyword}) {\\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\\n      console.log(page, pagesize, keyword)\\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\\n      const filterList = this.list.filter(item => item.label.includes(keyword))\\n      // 然后根据当前页和每页条数, 计算出这一页的结果\\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\\n      return new Promise((resolve, reject) => {\\n        resolve({\\n          list: currentPageList,\\n          total: filterList.length,\\n          column: this.column\\n        })\\n      }).catch(err => {\\n        console.log(err)\\n      })\\n    },\\n    change (val) {\\n      console.log(val)\\n    },\\n    focus (event) {\\n      console.log('获取焦点')\\n    },\\n    blur (event) {\\n      console.log('失去焦点')\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(5),_c('p',[_vm._v(\"可以指定列的背景色和图标展示。\")]),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"按照如下例子中所示, 给 column 配置中添加属性 backgroundColor 和 icons 属性即可, backgroundColor 会直接根据字段来判断需要什么背景色, icons 会将字段用逗号分成数组, 按照下标的值是否为 '1' 来判断需要展示哪些图标, 图标的配置中, key 表示图标的汉字, value 表示图标的颜色\")])]),_c('template',{slot:\"source\"},[_c('df-demo4')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-page-select\\n    width=\\\"300px\\\"\\n    v-model='value'\\n    table\\n    :pageSize=\\\"pageSize\\\"\\n    selectLabel=\\\"label\\\"\\n    @change=\\\"change\\\"\\n    @focus=\\\"focus\\\"\\n    @blur=\\\"blur\\\"\\n    :isShow=\\\"true\\\"\\n    valueKey=\\\"valueKey\\\"\\n    :querySelectList=\\\"querySelectList\\\" >\\n      <template v-slot=\\\"scope\\\">\\n        <df-option\\n          v-for=\\\"(item, index) in scope.list\\\"\\n          :key=\\\"item.valueKey\\\"\\n          :value=\\\"item\\\"\\n          :label=\\\"item.label\\\"\\n        >\\n          <df-select-column\\n            :optionIndex=\\\"index\\\"\\n            :width=\\\"col.width*5\\\"\\n            v-for=\\\"col in scope.column\\\"\\n            :label=\\\"col.label\\\"\\n            :key=\\\"col.prop\\\"\\n            :prop=\\\"col.prop\\\"\\n            :backgroundColor=\\\"col.backgroundColor\\\"\\n            :icons=\\\"col.icons\\\"\\n          />\\n        </df-option>\\n      </template>\\n  </df-page-select>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      value: {},\\n      pageSize: 5,\\n      list: [\\n        {\\n          valueKey: '001',\\n          XIANSHILX: '西',\\n          label: '胸部左侧X光',\\n          TUBIAO: '1,0,0,0,1,1',\\n          price: '38',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '002',\\n          XIANSHILX: '草',\\n          label: '胸透',\\n          TUBIAO: '0,0,0,0,1,0',\\n          price: '36',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '003',\\n          XIANSHILX: '成',\\n          label: '胸部右侧X光',\\n          TUBIAO: '0,1,0,0,0,1',\\n          price: '35',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '004',\\n          XIANSHILX: '西',\\n          label: '抽血检测',\\n          TUBIAO: '0,0,1,0,0,0',\\n          price: '34',\\n          size: '√'\\n        }, {\\n          valueKey: '005',\\n          XIANSHILX: '草',\\n          label: '核算检测',\\n          TUBIAO: '0,0,0,0,0,0',\\n          price: '99',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '021',\\n          XIANSHILX: '成',\\n          label: '头部检测',\\n          TUBIAO: '0,0,0,1,0,0',\\n          price: '25',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '022',\\n          XIANSHILX: '西',\\n          label: '核酸检测',\\n          TUBIAO: '0,0,0,0,0,0',\\n          position: '西湖区',\\n          price: '22',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '023',\\n          XIANSHILX: '草',\\n          label: '血液检测',\\n          TUBIAO: '0,1,1,0,0,0',\\n          price: '21',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '024',\\n          XIANSHILX: '成',\\n          label: '酒精检测',\\n          TUBIAO: '0,0,1,0,0,0',\\n          price: '29',\\n          size: '√'\\n        }\\n      ],\\n      column: [\\n        {\\n          width: 8,\\n          label: '分类',\\n          prop: 'XIANSHILX',\\n          backgroundColor: [{\\n            key: '西',\\n            value: '#fdf2d1'\\n          }, {\\n            key: '成',\\n            value: '#fbe6dc'\\n          }, {\\n            key: '草',\\n            value: '#e0eed5'\\n          }]\\n        },\\n        {width: 20, label: '收费名称', prop: 'label'},\\n        {\\n          width: 20,\\n          label: '图标',\\n          prop: 'TUBIAO',\\n          icons: [{\\n            key: '毒',\\n            value: '#af90f8'\\n          }, {\\n            key: '麻',\\n            value: '#af90f8'\\n          }, {\\n            key: '精I',\\n            value: '#af90f8'\\n          }, {\\n            key: '精II',\\n            value: '#af90f8'\\n          }, {\\n            key: '跌',\\n            value: '#f2a25c'\\n          }, {\\n            key: '危',\\n            value: '#ed6a66'\\n          }]\\n        },\\n        {width: 20, label: '位置', prop: 'position'},\\n        {width: 20, label: '价格', prop: 'price'},\\n        {width: 20, label: '是否', prop: 'size'}\\n      ]\\n    }\\n  },\\n  methods: {\\n    querySelectList ({page, pagesize, keyword}) {\\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\\n      console.log(page, pagesize, keyword)\\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\\n      const filterList = this.list.filter(item => item.label.includes(keyword))\\n      // 然后根据当前页和每页条数, 计算出这一页的结果\\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\\n      return new Promise((resolve, reject) => {\\n        resolve({\\n          list: currentPageList,\\n          total: filterList.length,\\n          column: this.column\\n        })\\n      }).catch(err => {\\n        console.log(err)\\n      })\\n    },\\n    change (val) {\\n      console.log(val)\\n    },\\n    focus (event) {\\n      console.log('获取焦点')\\n    },\\n    blur (event) {\\n      console.log('失去焦点')\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(6),_c('p',[_vm._v(\"可以指定列的展示一个纯图标。\")]),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"和上面给 column 配置中添加属性 icons 属性的使用但是类似, 在这里使用 pureIcons来标识纯图标, 每一项的 key 标识图标的类名, value 表示图标的颜色 , backgroundColor 会直接根据字段来判断需要什么背景色, icons 会将字段用逗号分成数组, 按照下标的值是否为 '1' 来判断需要展示哪些图标\")])]),_c('template',{slot:\"source\"},[_c('df-demo5')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-page-select\\n    width=\\\"300px\\\"\\n    v-model='value'\\n    table\\n    :pageSize=\\\"pageSize\\\"\\n    selectLabel=\\\"label\\\"\\n    @change=\\\"change\\\"\\n    @focus=\\\"focus\\\"\\n    @blur=\\\"blur\\\"\\n    :isShow=\\\"true\\\"\\n    valueKey=\\\"valueKey\\\"\\n    :querySelectList=\\\"querySelectList\\\" >\\n      <template v-slot=\\\"scope\\\">\\n        <df-option\\n          v-for=\\\"(item, index) in scope.list\\\"\\n          :key=\\\"item.valueKey\\\"\\n          :value=\\\"item\\\"\\n          :label=\\\"item.label\\\"\\n        >\\n          <df-select-column\\n            :optionIndex=\\\"index\\\"\\n            :width=\\\"col.width*5\\\"\\n            v-for=\\\"col in scope.column\\\"\\n            :label=\\\"col.label\\\"\\n            :key=\\\"col.prop\\\"\\n            :prop=\\\"col.prop\\\"\\n            :pureIcons=\\\"col.pureIcons\\\"\\n          />\\n        </df-option>\\n      </template>\\n  </df-page-select>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      value: {},\\n      pageSize: 5,\\n      list: [\\n        {\\n          valueKey: '001',\\n          XIANSHILX: '西',\\n          label: '胸部左侧X光',\\n          CHUNTUBIAO: '1,0,0,0,1,1',\\n          price: '38',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '002',\\n          XIANSHILX: '草',\\n          label: '胸透',\\n          CHUNTUBIAO: '0,0,0,0,1,0',\\n          price: '36',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '003',\\n          XIANSHILX: '成',\\n          label: '胸部右侧X光',\\n          CHUNTUBIAO: '0,1,0,0,0,1',\\n          price: '35',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '004',\\n          XIANSHILX: '西',\\n          label: '抽血检测',\\n          CHUNTUBIAO: '0,0,1,0,0,0',\\n          price: '34',\\n          size: '√'\\n        }, {\\n          valueKey: '005',\\n          XIANSHILX: '草',\\n          label: '核算检测',\\n          CHUNTUBIAO: '0,0,0,0,0,0',\\n          price: '99',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '021',\\n          XIANSHILX: '成',\\n          label: '头部检测',\\n          CHUNTUBIAO: '0,0,0,1,0,0',\\n          price: '25',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '022',\\n          XIANSHILX: '西',\\n          label: '核酸检测',\\n          CHUNTUBIAO: '0,0,0,0,0,0',\\n          position: '西湖区',\\n          price: '22',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '023',\\n          XIANSHILX: '草',\\n          label: '血液检测',\\n          CHUNTUBIAO: '0,1,1,0,0,0',\\n          price: '21',\\n          size: '√'\\n        },\\n        {\\n          valueKey: '024',\\n          XIANSHILX: '成',\\n          label: '酒精检测',\\n          CHUNTUBIAO: '0,0,1,0,0,0',\\n          price: '29',\\n          size: '√'\\n        }\\n      ],\\n      column: [\\n        {\\n          width: 8,\\n          label: '分类',\\n          prop: 'XIANSHILX'\\n        },\\n        {width: 20, label: '收费名称', prop: 'label'},\\n        {\\n          width: 20,\\n          label: '纯图标',\\n          prop: 'CHUNTUBIAO',\\n          pureIcons: [{\\n            key: 'correct',\\n            value: '#af90f8'\\n          }, {\\n            key: 'download',\\n            value: '#af90f8'\\n          }, {\\n            key: 'setting-line',\\n            value: '#af90f8'\\n          }, {\\n            key: 'print',\\n            value: '#af90f8'\\n          }, {\\n            key: 'history-linear',\\n            value: '#f2a25c'\\n          }, {\\n            key: 'top-circle',\\n            value: '#ed6a66'\\n          }]\\n        },\\n        {width: 20, label: '位置', prop: 'position'},\\n        {width: 20, label: '价格', prop: 'price'},\\n        {width: 20, label: '是否', prop: 'size'}\\n      ]\\n    }\\n  },\\n  methods: {\\n    querySelectList ({page, pagesize, keyword}) {\\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\\n      console.log(page, pagesize, keyword)\\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\\n      const filterList = this.list.filter(item => item.label.includes(keyword))\\n      // 然后根据当前页和每页条数, 计算出这一页的结果\\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\\n      return new Promise((resolve, reject) => {\\n        resolve({\\n          list: currentPageList,\\n          total: filterList.length,\\n          column: this.column\\n        })\\n      }).catch(err => {\\n        console.log(err)\\n      })\\n    },\\n    change (val) {\\n      console.log(val)\\n    },\\n    focus (event) {\\n      console.log('获取焦点')\\n    },\\n    blur (event) {\\n      console.log('失去焦点')\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(7),_vm._m(8),_vm._m(9),_vm._m(10),_vm._m(11),_vm._m(12),_vm._m(13),_vm._m(14),_vm._m(15),_vm._m(16)],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('h2',{attrs:{\"id\":\"pageselect-xia-la-fen-ye\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#pageselect-xia-la-fen-ye\"}},[_vm._v(\"¶\")]),_vm._v(\" PageSelect 下拉分页\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"ji-chu-yong-fa-bu-xian-shi-biao-tou\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#ji-chu-yong-fa-bu-xian-shi-biao-tou\"}},[_vm._v(\"¶\")]),_vm._v(\" 基础用法不显示表头\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"duo-ye-xia-la\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#duo-ye-xia-la\"}},[_vm._v(\"¶\")]),_vm._v(\" 多页下拉\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"xian-shi-biao-tou-column-dai-mo-ren-zhi\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#xian-shi-biao-tou-column-dai-mo-ren-zhi\"}},[_vm._v(\"¶\")]),_vm._v(\" 显示表头column（带默认值）\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"zi-ding-yi-kuan-du-dai-mo-ren-zhi\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#zi-ding-yi-kuan-du-dai-mo-ren-zhi\"}},[_vm._v(\"¶\")]),_vm._v(\" 自定义宽度（带默认值）\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"zhi-chi-tian-jia-bei-jing-se-he-tu-biao\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#zhi-chi-tian-jia-bei-jing-se-he-tu-biao\"}},[_vm._v(\"¶\")]),_vm._v(\" 支持添加背景色和图标\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"zhi-chi-tian-jia-chun-tu-biao\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#zhi-chi-tian-jia-chun-tu-biao\"}},[_vm._v(\"¶\")]),_vm._v(\" 支持添加纯图标\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"dfselectpage-attributes\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#dfselectpage-attributes\"}},[_vm._v(\"¶\")]),_vm._v(\" DfSelectPage Attributes\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"参数\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"类型\")]),_c('th',[_vm._v(\"默认值\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"v-model/value\")]),_c('td',[_vm._v(\"当前value值\")]),_c('td',[_vm._v(\"-\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"width\")]),_c('td',[_vm._v(\"可以控制PageSelect组件的宽度\")]),_c('td',[_vm._v(\"String\")]),_c('td')]),_c('tr',[_c('td',[_vm._v(\"table\")]),_c('td',[_vm._v(\"是否显示表头\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"false\")])]),_c('tr',[_c('td',[_vm._v(\"pageSize\")]),_c('td',[_vm._v(\"每页条数\")]),_c('td',[_vm._v(\"number\")]),_c('td',[_vm._v(\"20\")])]),_c('tr',[_c('td',[_vm._v(\"querySelectList\")]),_c('td',[_vm._v(\"处理请求相应体，入参:(请求返回的数据){list,column,total}，出参：object {page,pagesize,keyword}\")]),_c('td',[_vm._v(\"function\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"valueKey\")]),_c('td',[_vm._v(\"获取每一项option的唯一标识\")]),_c('td',[_vm._v(\"String/Number\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"selectLabel\")]),_c('td',[_vm._v(\"选中项lable的key值(必填项)\")]),_c('td',[_vm._v(\"String\")]),_c('td',[_vm._v(\"- 必填\")])]),_c('tr',[_c('td',[_vm._v(\"isShow\")]),_c('td',[_vm._v(\"组件销毁清空list colunm\")]),_c('td',[_vm._v(\"Boolean\")]),_c('td')]),_c('tr',[_c('td',[_vm._v(\"inner-input-inject-style\")]),_c('td',[_vm._v(\"/\"),_c('em',[_vm._v(\"新增\")]),_vm._v(\"/ 内层输入框的注入样式，当样式需求比较复杂时，以 style 对象注入的形式定制内层输入框的样式\")]),_c('td',[_vm._v(\"object\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"close-dropdown-when-empty\")]),_c('td',[_vm._v(\"/\"),_c('em',[_vm._v(\"新增\")]),_vm._v(\"/ 当输入框聚焦时，如果输入值为空，是否要禁止下拉框的展开\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"false\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"dfselectcolumn-attributes\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#dfselectcolumn-attributes\"}},[_vm._v(\"¶\")]),_vm._v(\" DfSelectColumn Attributes\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"参数\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"类型\")]),_c('th',[_vm._v(\"默认值\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"optionIndex\")]),_c('td',[_vm._v(\"option组件当前下标\")]),_c('td',[_vm._v(\"String/Number\")]),_c('td')]),_c('tr',[_c('td',[_vm._v(\"width\")]),_c('td',[_vm._v(\"表头宽度\")]),_c('td',[_vm._v(\"String/Number\")]),_c('td')]),_c('tr',[_c('td',[_vm._v(\"label\")]),_c('td',[_vm._v(\"显示列对应表头信息\")]),_c('td'),_c('td')]),_c('tr',[_c('td',[_vm._v(\"prop\")]),_c('td',[_vm._v(\"显示对应列的属性名\")]),_c('td'),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"backgroundColor\")]),_c('td',[_vm._v(\"根据对应列的属性值来判断用什么背景颜色\")]),_c('td'),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"icons\")]),_c('td',[_vm._v(\"根据对应列的属性值按照逗号分割后的数组来判断用哪些图标\")]),_c('td'),_c('td',[_vm._v(\"-\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"dfoption-attributes\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#dfoption-attributes\"}},[_vm._v(\"¶\")]),_vm._v(\" DfOption Attributes\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"参数\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"类型\")]),_c('th',[_vm._v(\"可选值\")]),_c('th',[_vm._v(\"默认值\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"value\")]),_c('td',[_vm._v(\"选项的值\")]),_c('td',[_vm._v(\"string/number/object\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"label\")]),_c('td',[_vm._v(\"选项的标签，若不设置则默认与 \"),_c('code',[_vm._v(\"value\")]),_vm._v(\" 相同\")]),_c('td',[_vm._v(\"string/number\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"disabled\")]),_c('td',[_vm._v(\"是否禁用该选项\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"false\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"pageselect-events\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#pageselect-events\"}},[_vm._v(\"¶\")]),_vm._v(\" pageSelect Events\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"方法名\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"参数\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"focus\")]),_c('td',[_vm._v(\"使 input 获取焦点\")]),_c('td',[_vm._v(\"event\")])]),_c('tr',[_c('td',[_vm._v(\"blur\")]),_c('td',[_vm._v(\"使 input 失去焦点，并隐藏下拉框\")]),_c('td',[_vm._v(\"event\")])]),_c('tr',[_c('td',[_vm._v(\"change\")]),_c('td',[_vm._v(\"当optionValue发生改变触发\")]),_c('td',[_vm._v(\"value\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"pageselect-methods\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#pageselect-methods\"}},[_vm._v(\"¶\")]),_vm._v(\" pageSelect Methods\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"方法名\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"参数\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"clearDataList\")]),_c('td'),_c('td')]),_c('tr',[_c('td',[_vm._v(\"focus\")]),_c('td',[_vm._v(\"使select获取焦点\")]),_c('td')]),_c('tr',[_c('td',[_vm._v(\"blur\")]),_c('td',[_vm._v(\"使select失去焦点\")]),_c('td')])])])\n}]\n\nexport { render, staticRenderFns }","\n    <template>\n      <section class=\"content df-doc\">\n        <h2 id=\"pageselect-xia-la-fen-ye\"><a class=\"header-anchor\" href=\"#pageselect-xia-la-fen-ye\">¶</a> PageSelect 下拉分页</h2>\n<p>在 df-select 基础上进行的改造，将下拉选项改为分页展示。</p>\n<h3 id=\"ji-chu-yong-fa-bu-xian-shi-biao-tou\"><a class=\"header-anchor\" href=\"#ji-chu-yong-fa-bu-xian-shi-biao-tou\">¶</a> 基础用法不显示表头</h3>\n<p>适用广泛的基础用法。</p>\n<demo-block>\n        <div><p>动态下拉组件<code>v-model</code>属性可以获取当前选中的值，通过传入参数完成下拉的基础用法详情见demo。</p>\n</div>\n        <template slot=\"source\"><df-demo0 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-page-select\n    v-model=&quot;value&quot;\n    selectLabel=&quot;label&quot;\n    valueKey=&quot;valueKey&quot;\n    @change=&quot;change&quot;\n    @focus=&quot;focus&quot;\n    @blur=&quot;blur&quot;\n    :pageSize=&quot;pageSize&quot;\n    :querySelectList=&quot;querySelectList&quot;\n    currentPlaceholder=&quot;点击开启选择&quot;\n  &gt;\n    &lt;template v-slot=&quot;scope&quot;&gt;\n      &lt;df-option\n        v-for=&quot;item in scope.list&quot;\n        :key=&quot;item.valueKey&quot;\n        :value=&quot;item&quot;\n        :label=&quot;item.label&quot;\n      /&gt;\n    &lt;/template&gt;\n  &lt;/df-page-select&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      value: {},\n      pageSize: 5,\n      list: [\n        {\n          valueKey: '001',\n          label: '胸部左侧X光',\n          price: '38',\n          size: '√'\n        },\n        {\n          valueKey: '002',\n          label: '胸透',\n          price: '36',\n          size: '√'\n        },\n        {\n          valueKey: '003',\n          label: '胸部右侧X光',\n          price: '35',\n          size: '√'\n        },\n        {\n          valueKey: '004',\n          label: '抽血检测',\n          price: '34',\n          size: '√'\n        }\n      ],\n      column: [\n        {width: 20, label: '收费名称', prop: 'label'},\n        {width: 20, label: '位置', prop: 'position'},\n        {width: 20, label: '价格', prop: 'price'},\n        {width: 20, label: '是否', prop: 'size'}\n      ]\n    }\n  },\n  methods: {\n    querySelectList ({page, pagesize, keyword}) {\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\n      console.log(page, pagesize, keyword)\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\n      const filterList = this.list.filter(item =&gt; item.label.includes(keyword))\n      // 然后根据当前页和每页条数, 计算出这一页的结果\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\n      return new Promise((resolve, reject) =&gt; {\n        resolve({\n          list: currentPageList,\n          total: filterList.length,\n          column: this.column\n        })\n      }).catch(err =&gt; {\n        console.log(err)\n      })\n    },\n    change (val) {\n      console.log(val)\n    },\n    focus (event) {\n      console.log('获取焦点')\n    },\n    blur (event) {\n      console.log('失去焦点')\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"duo-ye-xia-la\"><a class=\"header-anchor\" href=\"#duo-ye-xia-la\">¶</a> 多页下拉</h3>\n<p>适用于大量数据数据查看摘用信息的时候可以进行使用。</p>\n<demo-block>\n        <div><p>详情见demo</p>\n</div>\n        <template slot=\"source\"><df-demo1 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-page-select\n    v-model='value'\n    :pageSize=&quot;pageSize&quot;\n    valueKey=&quot;valueKey&quot;\n    selectLabel=&quot;label&quot;\n    @change=&quot;change&quot;\n    @focus=&quot;focus&quot;\n    @blur=&quot;blur&quot;\n    :querySelectList=&quot;querySelectList&quot; &gt;\n      &lt;template v-slot=&quot;scope&quot;&gt;\n        &lt;df-option\n          v-for=&quot;item in scope.list&quot;\n          :key=&quot;item.valueKey&quot;\n          :value=&quot;item&quot;\n          :label=&quot;item.label&quot;\n        /&gt;\n      &lt;/template&gt;\n  &lt;/df-page-select&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      value: {},\n      pageSize: 5,\n      list: [\n        {\n          valueKey: '001',\n          label: '胸部左侧X光',\n          price: '38',\n          size: '√'\n        },\n        {\n          valueKey: '002',\n          label: '胸透',\n          price: '36',\n          size: '√'\n        },\n        {\n          valueKey: '003',\n          label: '胸部右侧X光',\n          price: '35',\n          size: '√'\n        },\n        {\n          valueKey: '004',\n          label: '抽血检测',\n          price: '34',\n          size: '√'\n        }, {\n          valueKey: '005',\n          label: '核算检测',\n          price: '99',\n          size: '√'\n        },\n        {\n          valueKey: '021',\n          label: '头部检测',\n          price: '25',\n          size: '√'\n        },\n        {\n          valueKey: '022',\n          label: '核酸检测',\n          position: '西湖区',\n          price: '22',\n          size: '√'\n        },\n        {\n          valueKey: '023',\n          label: '血液检测',\n          price: '21',\n          size: '√'\n        },\n        {\n          valueKey: '024',\n          label: '酒精检测',\n          price: '29',\n          size: '√'\n        }\n      ],\n      column: [\n        {width: 20, label: '收费名称', prop: 'label'},\n        {width: 20, label: '位置', prop: 'position'},\n        {width: 20, label: '价格', prop: 'price'},\n        {width: 20, label: '是否', prop: 'size'}\n      ]\n    }\n  },\n  methods: {\n    querySelectList ({page, pagesize, keyword}) {\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\n      console.log(page, pagesize, keyword)\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\n      const filterList = this.list.filter(item =&gt; item.label.includes(keyword))\n      // 然后根据当前页和每页条数, 计算出这一页的结果\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\n      return new Promise((resolve, reject) =&gt; {\n        resolve({\n          list: currentPageList,\n          total: filterList.length,\n          column: this.column\n        })\n      }).catch(err =&gt; {\n        console.log(err)\n      })\n    },\n    change (val) {\n      console.log(val)\n    },\n    focus (event) {\n      console.log('获取焦点')\n    },\n    blur (event) {\n      console.log('失去焦点')\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"xian-shi-biao-tou-column-dai-mo-ren-zhi\"><a class=\"header-anchor\" href=\"#xian-shi-biao-tou-column-dai-mo-ren-zhi\">¶</a> 显示表头column（带默认值）</h3>\n<p>适用于多列数据展示。</p>\n<demo-block>\n        <div><p>需要在插槽内部插入df-select-column列组件 传入<code>optionIndex</code> <code>width</code> <code>label</code> <code>key</code> <code>prop</code>来渲染出表头header</p>\n</div>\n        <template slot=\"source\"><df-demo2 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-page-select\n    v-model='value'\n    table\n    :pageSize=&quot;pageSize&quot;\n    selectLabel=&quot;label&quot;\n    @change=&quot;change&quot;\n    @focus=&quot;focus&quot;\n    @blur=&quot;blur&quot;\n    valueKey=&quot;valueKey&quot;\n    :querySelectList=&quot;querySelectList&quot; &gt;\n      &lt;template v-slot=&quot;scope&quot;&gt;\n        &lt;df-option\n          v-for=&quot;(item, index) in scope.list&quot;\n          :key=&quot;item.valueKey&quot;\n          :value=&quot;item&quot;\n          :label=&quot;item.label&quot;\n        &gt;\n          &lt;df-select-column\n            :optionIndex=&quot;index&quot;\n            :width=&quot;col.width * 6&quot;\n            v-for=&quot;col in scope.column&quot;\n            :label=&quot;col.label&quot;\n            :key=&quot;col.prop&quot;\n            :prop=&quot;col.prop&quot;\n          /&gt;\n        &lt;/df-option&gt;\n      &lt;/template&gt;\n  &lt;/df-page-select&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      value: {\n        valueKey: '024',\n        label: '酒精检测'\n      },\n      pageSize: 5,\n      list: [\n        {\n          valueKey: '001',\n          label: '胸部左侧X光',\n          price: '38',\n          size: '√'\n        },\n        {\n          valueKey: '002',\n          label: '胸透',\n          price: '36',\n          size: '√'\n        },\n        {\n          valueKey: '003',\n          label: '胸部右侧X光',\n          price: '35',\n          size: '√'\n        },\n        {\n          valueKey: '004',\n          label: '抽血检测',\n          price: '34',\n          size: '√'\n        }, {\n          valueKey: '005',\n          label: '核算检测',\n          price: '99',\n          size: '√'\n        },\n        {\n          valueKey: '021',\n          label: '头部检测',\n          price: '25',\n          size: '√'\n        },\n        {\n          valueKey: '022',\n          label: '核酸检测',\n          position: '西湖区',\n          price: '22',\n          size: '√'\n        },\n        {\n          valueKey: '023',\n          label: '血液检测',\n          price: '21',\n          size: '√'\n        },\n        {\n          valueKey: '024',\n          label: '酒精检测',\n          price: '29',\n          size: '√'\n        }\n      ],\n      column: [\n        {width: 20, label: '收费名称', prop: 'label'},\n        {width: 20, label: '位置', prop: 'position'},\n        {width: 20, label: '价格', prop: 'price'},\n        {width: 20, label: '是否', prop: 'size'}\n      ]\n    }\n  },\n  methods: {\n    querySelectList ({page, pagesize, keyword}) {\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\n      console.log(page, pagesize, keyword)\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\n      const filterList = this.list.filter(item =&gt; item.label.includes(keyword))\n      // 然后根据当前页和每页条数, 计算出这一页的结果\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\n      return new Promise((resolve, reject) =&gt; {\n        resolve({\n          list: currentPageList,\n          total: filterList.length,\n          column: this.column\n        })\n      }).catch(err =&gt; {\n        console.log(err)\n      })\n    },\n    change (val) {\n      console.log(val)\n    },\n    focus (event) {\n      console.log('获取焦点')\n    },\n    blur (event) {\n      console.log('失去焦点')\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"zi-ding-yi-kuan-du-dai-mo-ren-zhi\"><a class=\"header-anchor\" href=\"#zi-ding-yi-kuan-du-dai-mo-ren-zhi\">¶</a> 自定义宽度（带默认值）</h3>\n<p>适用于多列数据展示。</p>\n<demo-block>\n        <div><p>提供了width属性 可以直接控制 <code>input</code> 宽度</p>\n</div>\n        <template slot=\"source\"><df-demo3 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-page-select\n    width=&quot;300px&quot;\n    v-model='value'\n    table\n    :pageSize=&quot;pageSize&quot;\n    selectLabel=&quot;label&quot;\n    @change=&quot;change&quot;\n    @focus=&quot;focus&quot;\n    @blur=&quot;blur&quot;\n    :isShow=&quot;true&quot;\n    valueKey=&quot;valueKey&quot;\n    :querySelectList=&quot;querySelectList&quot; &gt;\n      &lt;template v-slot=&quot;scope&quot;&gt;\n        &lt;df-option\n          v-for=&quot;(item, index) in scope.list&quot;\n          :key=&quot;item.valueKey&quot;\n          :value=&quot;item&quot;\n          :label=&quot;item.label&quot;\n        &gt;\n          &lt;df-select-column\n            :optionIndex=&quot;index&quot;\n            :width=&quot;col.width*5&quot;\n            v-for=&quot;col in scope.column&quot;\n            :label=&quot;col.label&quot;\n            :key=&quot;col.prop&quot;\n            :prop=&quot;col.prop&quot;\n          /&gt;\n        &lt;/df-option&gt;\n      &lt;/template&gt;\n  &lt;/df-page-select&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      value: {\n        valueKey: '024',\n        label: '1111'\n      },\n      pageSize: 5,\n      list: [\n        {\n          valueKey: '001',\n          label: '胸部左侧X光',\n          price: '38',\n          size: '√'\n        },\n        {\n          valueKey: '002',\n          label: '胸透',\n          price: '36',\n          size: '√'\n        },\n        {\n          valueKey: '003',\n          label: '胸部右侧X光',\n          price: '35',\n          size: '√'\n        },\n        {\n          valueKey: '004',\n          label: '抽血检测',\n          price: '34',\n          size: '√'\n        }, {\n          valueKey: '005',\n          label: '核算检测',\n          price: '99',\n          size: '√'\n        },\n        {\n          valueKey: '021',\n          label: '头部检测',\n          price: '25',\n          size: '√'\n        },\n        {\n          valueKey: '022',\n          label: '核酸检测',\n          position: '西湖区',\n          price: '22',\n          size: '√'\n        },\n        {\n          valueKey: '023',\n          label: '血液检测',\n          price: '21',\n          size: '√'\n        },\n        {\n          valueKey: '024',\n          label: '酒精检测',\n          price: '29',\n          size: '√'\n        }\n      ],\n      column: [\n        {width: 20, label: '收费名称', prop: 'label'},\n        {width: 20, label: '位置', prop: 'position'},\n        {width: 20, label: '价格', prop: 'price'},\n        {width: 20, label: '是否', prop: 'size'}\n      ]\n    }\n  },\n  methods: {\n    querySelectList ({page, pagesize, keyword}) {\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\n      console.log(page, pagesize, keyword)\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\n      const filterList = this.list.filter(item =&gt; item.label.includes(keyword))\n      // 然后根据当前页和每页条数, 计算出这一页的结果\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\n      return new Promise((resolve, reject) =&gt; {\n        resolve({\n          list: currentPageList,\n          total: filterList.length,\n          column: this.column\n        })\n      }).catch(err =&gt; {\n        console.log(err)\n      })\n    },\n    change (val) {\n      console.log(val)\n    },\n    focus (event) {\n      console.log('获取焦点')\n    },\n    blur (event) {\n      console.log('失去焦点')\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"zhi-chi-tian-jia-bei-jing-se-he-tu-biao\"><a class=\"header-anchor\" href=\"#zhi-chi-tian-jia-bei-jing-se-he-tu-biao\">¶</a> 支持添加背景色和图标</h3>\n<p>可以指定列的背景色和图标展示。</p>\n<demo-block>\n        <div><p>按照如下例子中所示, 给 column 配置中添加属性 backgroundColor 和 icons 属性即可, backgroundColor 会直接根据字段来判断需要什么背景色, icons 会将字段用逗号分成数组, 按照下标的值是否为 '1' 来判断需要展示哪些图标, 图标的配置中, key 表示图标的汉字, value 表示图标的颜色</p>\n</div>\n        <template slot=\"source\"><df-demo4 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-page-select\n    width=&quot;300px&quot;\n    v-model='value'\n    table\n    :pageSize=&quot;pageSize&quot;\n    selectLabel=&quot;label&quot;\n    @change=&quot;change&quot;\n    @focus=&quot;focus&quot;\n    @blur=&quot;blur&quot;\n    :isShow=&quot;true&quot;\n    valueKey=&quot;valueKey&quot;\n    :querySelectList=&quot;querySelectList&quot; &gt;\n      &lt;template v-slot=&quot;scope&quot;&gt;\n        &lt;df-option\n          v-for=&quot;(item, index) in scope.list&quot;\n          :key=&quot;item.valueKey&quot;\n          :value=&quot;item&quot;\n          :label=&quot;item.label&quot;\n        &gt;\n          &lt;df-select-column\n            :optionIndex=&quot;index&quot;\n            :width=&quot;col.width*5&quot;\n            v-for=&quot;col in scope.column&quot;\n            :label=&quot;col.label&quot;\n            :key=&quot;col.prop&quot;\n            :prop=&quot;col.prop&quot;\n            :backgroundColor=&quot;col.backgroundColor&quot;\n            :icons=&quot;col.icons&quot;\n          /&gt;\n        &lt;/df-option&gt;\n      &lt;/template&gt;\n  &lt;/df-page-select&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      value: {},\n      pageSize: 5,\n      list: [\n        {\n          valueKey: '001',\n          XIANSHILX: '西',\n          label: '胸部左侧X光',\n          TUBIAO: '1,0,0,0,1,1',\n          price: '38',\n          size: '√'\n        },\n        {\n          valueKey: '002',\n          XIANSHILX: '草',\n          label: '胸透',\n          TUBIAO: '0,0,0,0,1,0',\n          price: '36',\n          size: '√'\n        },\n        {\n          valueKey: '003',\n          XIANSHILX: '成',\n          label: '胸部右侧X光',\n          TUBIAO: '0,1,0,0,0,1',\n          price: '35',\n          size: '√'\n        },\n        {\n          valueKey: '004',\n          XIANSHILX: '西',\n          label: '抽血检测',\n          TUBIAO: '0,0,1,0,0,0',\n          price: '34',\n          size: '√'\n        }, {\n          valueKey: '005',\n          XIANSHILX: '草',\n          label: '核算检测',\n          TUBIAO: '0,0,0,0,0,0',\n          price: '99',\n          size: '√'\n        },\n        {\n          valueKey: '021',\n          XIANSHILX: '成',\n          label: '头部检测',\n          TUBIAO: '0,0,0,1,0,0',\n          price: '25',\n          size: '√'\n        },\n        {\n          valueKey: '022',\n          XIANSHILX: '西',\n          label: '核酸检测',\n          TUBIAO: '0,0,0,0,0,0',\n          position: '西湖区',\n          price: '22',\n          size: '√'\n        },\n        {\n          valueKey: '023',\n          XIANSHILX: '草',\n          label: '血液检测',\n          TUBIAO: '0,1,1,0,0,0',\n          price: '21',\n          size: '√'\n        },\n        {\n          valueKey: '024',\n          XIANSHILX: '成',\n          label: '酒精检测',\n          TUBIAO: '0,0,1,0,0,0',\n          price: '29',\n          size: '√'\n        }\n      ],\n      column: [\n        {\n          width: 8,\n          label: '分类',\n          prop: 'XIANSHILX',\n          backgroundColor: [{\n            key: '西',\n            value: '#fdf2d1'\n          }, {\n            key: '成',\n            value: '#fbe6dc'\n          }, {\n            key: '草',\n            value: '#e0eed5'\n          }]\n        },\n        {width: 20, label: '收费名称', prop: 'label'},\n        {\n          width: 20,\n          label: '图标',\n          prop: 'TUBIAO',\n          icons: [{\n            key: '毒',\n            value: '#af90f8'\n          }, {\n            key: '麻',\n            value: '#af90f8'\n          }, {\n            key: '精I',\n            value: '#af90f8'\n          }, {\n            key: '精II',\n            value: '#af90f8'\n          }, {\n            key: '跌',\n            value: '#f2a25c'\n          }, {\n            key: '危',\n            value: '#ed6a66'\n          }]\n        },\n        {width: 20, label: '位置', prop: 'position'},\n        {width: 20, label: '价格', prop: 'price'},\n        {width: 20, label: '是否', prop: 'size'}\n      ]\n    }\n  },\n  methods: {\n    querySelectList ({page, pagesize, keyword}) {\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\n      console.log(page, pagesize, keyword)\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\n      const filterList = this.list.filter(item =&gt; item.label.includes(keyword))\n      // 然后根据当前页和每页条数, 计算出这一页的结果\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\n      return new Promise((resolve, reject) =&gt; {\n        resolve({\n          list: currentPageList,\n          total: filterList.length,\n          column: this.column\n        })\n      }).catch(err =&gt; {\n        console.log(err)\n      })\n    },\n    change (val) {\n      console.log(val)\n    },\n    focus (event) {\n      console.log('获取焦点')\n    },\n    blur (event) {\n      console.log('失去焦点')\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"zhi-chi-tian-jia-chun-tu-biao\"><a class=\"header-anchor\" href=\"#zhi-chi-tian-jia-chun-tu-biao\">¶</a> 支持添加纯图标</h3>\n<p>可以指定列的展示一个纯图标。</p>\n<demo-block>\n        <div><p>和上面给 column 配置中添加属性 icons 属性的使用但是类似, 在这里使用 pureIcons来标识纯图标, 每一项的 key 标识图标的类名, value 表示图标的颜色 , backgroundColor 会直接根据字段来判断需要什么背景色, icons 会将字段用逗号分成数组, 按照下标的值是否为 '1' 来判断需要展示哪些图标</p>\n</div>\n        <template slot=\"source\"><df-demo5 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-page-select\n    width=&quot;300px&quot;\n    v-model='value'\n    table\n    :pageSize=&quot;pageSize&quot;\n    selectLabel=&quot;label&quot;\n    @change=&quot;change&quot;\n    @focus=&quot;focus&quot;\n    @blur=&quot;blur&quot;\n    :isShow=&quot;true&quot;\n    valueKey=&quot;valueKey&quot;\n    :querySelectList=&quot;querySelectList&quot; &gt;\n      &lt;template v-slot=&quot;scope&quot;&gt;\n        &lt;df-option\n          v-for=&quot;(item, index) in scope.list&quot;\n          :key=&quot;item.valueKey&quot;\n          :value=&quot;item&quot;\n          :label=&quot;item.label&quot;\n        &gt;\n          &lt;df-select-column\n            :optionIndex=&quot;index&quot;\n            :width=&quot;col.width*5&quot;\n            v-for=&quot;col in scope.column&quot;\n            :label=&quot;col.label&quot;\n            :key=&quot;col.prop&quot;\n            :prop=&quot;col.prop&quot;\n            :pureIcons=&quot;col.pureIcons&quot;\n          /&gt;\n        &lt;/df-option&gt;\n      &lt;/template&gt;\n  &lt;/df-page-select&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      value: {},\n      pageSize: 5,\n      list: [\n        {\n          valueKey: '001',\n          XIANSHILX: '西',\n          label: '胸部左侧X光',\n          CHUNTUBIAO: '1,0,0,0,1,1',\n          price: '38',\n          size: '√'\n        },\n        {\n          valueKey: '002',\n          XIANSHILX: '草',\n          label: '胸透',\n          CHUNTUBIAO: '0,0,0,0,1,0',\n          price: '36',\n          size: '√'\n        },\n        {\n          valueKey: '003',\n          XIANSHILX: '成',\n          label: '胸部右侧X光',\n          CHUNTUBIAO: '0,1,0,0,0,1',\n          price: '35',\n          size: '√'\n        },\n        {\n          valueKey: '004',\n          XIANSHILX: '西',\n          label: '抽血检测',\n          CHUNTUBIAO: '0,0,1,0,0,0',\n          price: '34',\n          size: '√'\n        }, {\n          valueKey: '005',\n          XIANSHILX: '草',\n          label: '核算检测',\n          CHUNTUBIAO: '0,0,0,0,0,0',\n          price: '99',\n          size: '√'\n        },\n        {\n          valueKey: '021',\n          XIANSHILX: '成',\n          label: '头部检测',\n          CHUNTUBIAO: '0,0,0,1,0,0',\n          price: '25',\n          size: '√'\n        },\n        {\n          valueKey: '022',\n          XIANSHILX: '西',\n          label: '核酸检测',\n          CHUNTUBIAO: '0,0,0,0,0,0',\n          position: '西湖区',\n          price: '22',\n          size: '√'\n        },\n        {\n          valueKey: '023',\n          XIANSHILX: '草',\n          label: '血液检测',\n          CHUNTUBIAO: '0,1,1,0,0,0',\n          price: '21',\n          size: '√'\n        },\n        {\n          valueKey: '024',\n          XIANSHILX: '成',\n          label: '酒精检测',\n          CHUNTUBIAO: '0,0,1,0,0,0',\n          price: '29',\n          size: '√'\n        }\n      ],\n      column: [\n        {\n          width: 8,\n          label: '分类',\n          prop: 'XIANSHILX'\n        },\n        {width: 20, label: '收费名称', prop: 'label'},\n        {\n          width: 20,\n          label: '纯图标',\n          prop: 'CHUNTUBIAO',\n          pureIcons: [{\n            key: 'correct',\n            value: '#af90f8'\n          }, {\n            key: 'download',\n            value: '#af90f8'\n          }, {\n            key: 'setting-line',\n            value: '#af90f8'\n          }, {\n            key: 'print',\n            value: '#af90f8'\n          }, {\n            key: 'history-linear',\n            value: '#f2a25c'\n          }, {\n            key: 'top-circle',\n            value: '#ed6a66'\n          }]\n        },\n        {width: 20, label: '位置', prop: 'position'},\n        {width: 20, label: '价格', prop: 'price'},\n        {width: 20, label: '是否', prop: 'size'}\n      ]\n    }\n  },\n  methods: {\n    querySelectList ({page, pagesize, keyword}) {\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\n      console.log(page, pagesize, keyword)\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\n      const filterList = this.list.filter(item =&gt; item.label.includes(keyword))\n      // 然后根据当前页和每页条数, 计算出这一页的结果\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\n      return new Promise((resolve, reject) =&gt; {\n        resolve({\n          list: currentPageList,\n          total: filterList.length,\n          column: this.column\n        })\n      }).catch(err =&gt; {\n        console.log(err)\n      })\n    },\n    change (val) {\n      console.log(val)\n    },\n    focus (event) {\n      console.log('获取焦点')\n    },\n    blur (event) {\n      console.log('失去焦点')\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"dfselectpage-attributes\"><a class=\"header-anchor\" href=\"#dfselectpage-attributes\">¶</a> DfSelectPage Attributes</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v-model/value</td>\n<td>当前value值</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>width</td>\n<td>可以控制PageSelect组件的宽度</td>\n<td>String</td>\n<td></td>\n</tr>\n<tr>\n<td>table</td>\n<td>是否显示表头</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>pageSize</td>\n<td>每页条数</td>\n<td>number</td>\n<td>20</td>\n</tr>\n<tr>\n<td>querySelectList</td>\n<td>处理请求相应体，入参:(请求返回的数据){list,column,total}，出参：object {page,pagesize,keyword}</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>valueKey</td>\n<td>获取每一项option的唯一标识</td>\n<td>String/Number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>selectLabel</td>\n<td>选中项lable的key值(必填项)</td>\n<td>String</td>\n<td>- 必填</td>\n</tr>\n<tr>\n<td>isShow</td>\n<td>组件销毁清空list colunm</td>\n<td>Boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>inner-input-inject-style</td>\n<td>/<em>新增</em>/ 内层输入框的注入样式，当样式需求比较复杂时，以 style 对象注入的形式定制内层输入框的样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>close-dropdown-when-empty</td>\n<td>/<em>新增</em>/ 当输入框聚焦时，如果输入值为空，是否要禁止下拉框的展开</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"dfselectcolumn-attributes\"><a class=\"header-anchor\" href=\"#dfselectcolumn-attributes\">¶</a> DfSelectColumn Attributes</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>optionIndex</td>\n<td>option组件当前下标</td>\n<td>String/Number</td>\n<td></td>\n</tr>\n<tr>\n<td>width</td>\n<td>表头宽度</td>\n<td>String/Number</td>\n<td></td>\n</tr>\n<tr>\n<td>label</td>\n<td>显示列对应表头信息</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>prop</td>\n<td>显示对应列的属性名</td>\n<td></td>\n<td>-</td>\n</tr>\n<tr>\n<td>backgroundColor</td>\n<td>根据对应列的属性值来判断用什么背景颜色</td>\n<td></td>\n<td>-</td>\n</tr>\n<tr>\n<td>icons</td>\n<td>根据对应列的属性值按照逗号分割后的数组来判断用哪些图标</td>\n<td></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"dfoption-attributes\"><a class=\"header-anchor\" href=\"#dfoption-attributes\">¶</a> DfOption Attributes</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>可选值</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>选项的值</td>\n<td>string/number/object</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>label</td>\n<td>选项的标签，若不设置则默认与 <code>value</code> 相同</td>\n<td>string/number</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用该选项</td>\n<td>boolean</td>\n<td>—</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"pageselect-events\"><a class=\"header-anchor\" href=\"#pageselect-events\">¶</a> pageSelect Events</h3>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>focus</td>\n<td>使 input 获取焦点</td>\n<td>event</td>\n</tr>\n<tr>\n<td>blur</td>\n<td>使 input 失去焦点，并隐藏下拉框</td>\n<td>event</td>\n</tr>\n<tr>\n<td>change</td>\n<td>当optionValue发生改变触发</td>\n<td>value</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"pageselect-methods\"><a class=\"header-anchor\" href=\"#pageselect-methods\">¶</a> pageSelect Methods</h3>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>clearDataList</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>focus</td>\n<td>使select获取焦点</td>\n<td></td>\n</tr>\n<tr>\n<td>blur</td>\n<td>使select失去焦点</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n\n      </section>\n    </template>\n    <script>\n      export default {\n        name: 'component-doc',\n        components: {\n          \"df-demo0\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-page-select',{attrs:{\"selectLabel\":\"label\",\"valueKey\":\"valueKey\",\"pageSize\":_vm.pageSize,\"querySelectList\":_vm.querySelectList,\"currentPlaceholder\":\"点击开启选择\"},on:{\"change\":_vm.change,\"focus\":_vm.focus,\"blur\":_vm.blur},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return _vm._l((scope.list),function(item){return _c('df-option',{key:item.valueKey,attrs:{\"value\":item,\"label\":item.label}})})}}]),model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      value: {},\n      pageSize: 5,\n      list: [\n        {\n          valueKey: '001',\n          label: '胸部左侧X光',\n          price: '38',\n          size: '√'\n        },\n        {\n          valueKey: '002',\n          label: '胸透',\n          price: '36',\n          size: '√'\n        },\n        {\n          valueKey: '003',\n          label: '胸部右侧X光',\n          price: '35',\n          size: '√'\n        },\n        {\n          valueKey: '004',\n          label: '抽血检测',\n          price: '34',\n          size: '√'\n        }\n      ],\n      column: [\n        {width: 20, label: '收费名称', prop: 'label'},\n        {width: 20, label: '位置', prop: 'position'},\n        {width: 20, label: '价格', prop: 'price'},\n        {width: 20, label: '是否', prop: 'size'}\n      ]\n    }\n  },\n  methods: {\n    querySelectList ({page, pagesize, keyword}) {\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\n      console.log(page, pagesize, keyword)\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\n      const filterList = this.list.filter(item => item.label.includes(keyword))\n      // 然后根据当前页和每页条数, 计算出这一页的结果\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\n      return new Promise((resolve, reject) => {\n        resolve({\n          list: currentPageList,\n          total: filterList.length,\n          column: this.column\n        })\n      }).catch(err => {\n        console.log(err)\n      })\n    },\n    change (val) {\n      console.log(val)\n    },\n    focus (event) {\n      console.log('获取焦点')\n    },\n    blur (event) {\n      console.log('失去焦点')\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo1\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-page-select',{attrs:{\"pageSize\":_vm.pageSize,\"valueKey\":\"valueKey\",\"selectLabel\":\"label\",\"querySelectList\":_vm.querySelectList},on:{\"change\":_vm.change,\"focus\":_vm.focus,\"blur\":_vm.blur},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return _vm._l((scope.list),function(item){return _c('df-option',{key:item.valueKey,attrs:{\"value\":item,\"label\":item.label}})})}}]),model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      value: {},\n      pageSize: 5,\n      list: [\n        {\n          valueKey: '001',\n          label: '胸部左侧X光',\n          price: '38',\n          size: '√'\n        },\n        {\n          valueKey: '002',\n          label: '胸透',\n          price: '36',\n          size: '√'\n        },\n        {\n          valueKey: '003',\n          label: '胸部右侧X光',\n          price: '35',\n          size: '√'\n        },\n        {\n          valueKey: '004',\n          label: '抽血检测',\n          price: '34',\n          size: '√'\n        }, {\n          valueKey: '005',\n          label: '核算检测',\n          price: '99',\n          size: '√'\n        },\n        {\n          valueKey: '021',\n          label: '头部检测',\n          price: '25',\n          size: '√'\n        },\n        {\n          valueKey: '022',\n          label: '核酸检测',\n          position: '西湖区',\n          price: '22',\n          size: '√'\n        },\n        {\n          valueKey: '023',\n          label: '血液检测',\n          price: '21',\n          size: '√'\n        },\n        {\n          valueKey: '024',\n          label: '酒精检测',\n          price: '29',\n          size: '√'\n        }\n      ],\n      column: [\n        {width: 20, label: '收费名称', prop: 'label'},\n        {width: 20, label: '位置', prop: 'position'},\n        {width: 20, label: '价格', prop: 'price'},\n        {width: 20, label: '是否', prop: 'size'}\n      ]\n    }\n  },\n  methods: {\n    querySelectList ({page, pagesize, keyword}) {\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\n      console.log(page, pagesize, keyword)\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\n      const filterList = this.list.filter(item => item.label.includes(keyword))\n      // 然后根据当前页和每页条数, 计算出这一页的结果\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\n      return new Promise((resolve, reject) => {\n        resolve({\n          list: currentPageList,\n          total: filterList.length,\n          column: this.column\n        })\n      }).catch(err => {\n        console.log(err)\n      })\n    },\n    change (val) {\n      console.log(val)\n    },\n    focus (event) {\n      console.log('获取焦点')\n    },\n    blur (event) {\n      console.log('失去焦点')\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo2\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-page-select',{attrs:{\"table\":\"\",\"pageSize\":_vm.pageSize,\"selectLabel\":\"label\",\"valueKey\":\"valueKey\",\"querySelectList\":_vm.querySelectList},on:{\"change\":_vm.change,\"focus\":_vm.focus,\"blur\":_vm.blur},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return _vm._l((scope.list),function(item,index){return _c('df-option',{key:item.valueKey,attrs:{\"value\":item,\"label\":item.label}},_vm._l((scope.column),function(col){return _c('df-select-column',{key:col.prop,attrs:{\"optionIndex\":index,\"width\":col.width * 6,\"label\":col.label,\"prop\":col.prop}})}),1)})}}]),model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      value: {\n        valueKey: '024',\n        label: '酒精检测'\n      },\n      pageSize: 5,\n      list: [\n        {\n          valueKey: '001',\n          label: '胸部左侧X光',\n          price: '38',\n          size: '√'\n        },\n        {\n          valueKey: '002',\n          label: '胸透',\n          price: '36',\n          size: '√'\n        },\n        {\n          valueKey: '003',\n          label: '胸部右侧X光',\n          price: '35',\n          size: '√'\n        },\n        {\n          valueKey: '004',\n          label: '抽血检测',\n          price: '34',\n          size: '√'\n        }, {\n          valueKey: '005',\n          label: '核算检测',\n          price: '99',\n          size: '√'\n        },\n        {\n          valueKey: '021',\n          label: '头部检测',\n          price: '25',\n          size: '√'\n        },\n        {\n          valueKey: '022',\n          label: '核酸检测',\n          position: '西湖区',\n          price: '22',\n          size: '√'\n        },\n        {\n          valueKey: '023',\n          label: '血液检测',\n          price: '21',\n          size: '√'\n        },\n        {\n          valueKey: '024',\n          label: '酒精检测',\n          price: '29',\n          size: '√'\n        }\n      ],\n      column: [\n        {width: 20, label: '收费名称', prop: 'label'},\n        {width: 20, label: '位置', prop: 'position'},\n        {width: 20, label: '价格', prop: 'price'},\n        {width: 20, label: '是否', prop: 'size'}\n      ]\n    }\n  },\n  methods: {\n    querySelectList ({page, pagesize, keyword}) {\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\n      console.log(page, pagesize, keyword)\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\n      const filterList = this.list.filter(item => item.label.includes(keyword))\n      // 然后根据当前页和每页条数, 计算出这一页的结果\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\n      return new Promise((resolve, reject) => {\n        resolve({\n          list: currentPageList,\n          total: filterList.length,\n          column: this.column\n        })\n      }).catch(err => {\n        console.log(err)\n      })\n    },\n    change (val) {\n      console.log(val)\n    },\n    focus (event) {\n      console.log('获取焦点')\n    },\n    blur (event) {\n      console.log('失去焦点')\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo3\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-page-select',{attrs:{\"width\":\"300px\",\"table\":\"\",\"pageSize\":_vm.pageSize,\"selectLabel\":\"label\",\"isShow\":true,\"valueKey\":\"valueKey\",\"querySelectList\":_vm.querySelectList},on:{\"change\":_vm.change,\"focus\":_vm.focus,\"blur\":_vm.blur},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return _vm._l((scope.list),function(item,index){return _c('df-option',{key:item.valueKey,attrs:{\"value\":item,\"label\":item.label}},_vm._l((scope.column),function(col){return _c('df-select-column',{key:col.prop,attrs:{\"optionIndex\":index,\"width\":col.width*5,\"label\":col.label,\"prop\":col.prop}})}),1)})}}]),model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      value: {\n        valueKey: '024',\n        label: '1111'\n      },\n      pageSize: 5,\n      list: [\n        {\n          valueKey: '001',\n          label: '胸部左侧X光',\n          price: '38',\n          size: '√'\n        },\n        {\n          valueKey: '002',\n          label: '胸透',\n          price: '36',\n          size: '√'\n        },\n        {\n          valueKey: '003',\n          label: '胸部右侧X光',\n          price: '35',\n          size: '√'\n        },\n        {\n          valueKey: '004',\n          label: '抽血检测',\n          price: '34',\n          size: '√'\n        }, {\n          valueKey: '005',\n          label: '核算检测',\n          price: '99',\n          size: '√'\n        },\n        {\n          valueKey: '021',\n          label: '头部检测',\n          price: '25',\n          size: '√'\n        },\n        {\n          valueKey: '022',\n          label: '核酸检测',\n          position: '西湖区',\n          price: '22',\n          size: '√'\n        },\n        {\n          valueKey: '023',\n          label: '血液检测',\n          price: '21',\n          size: '√'\n        },\n        {\n          valueKey: '024',\n          label: '酒精检测',\n          price: '29',\n          size: '√'\n        }\n      ],\n      column: [\n        {width: 20, label: '收费名称', prop: 'label'},\n        {width: 20, label: '位置', prop: 'position'},\n        {width: 20, label: '价格', prop: 'price'},\n        {width: 20, label: '是否', prop: 'size'}\n      ]\n    }\n  },\n  methods: {\n    querySelectList ({page, pagesize, keyword}) {\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\n      console.log(page, pagesize, keyword)\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\n      const filterList = this.list.filter(item => item.label.includes(keyword))\n      // 然后根据当前页和每页条数, 计算出这一页的结果\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\n      return new Promise((resolve, reject) => {\n        resolve({\n          list: currentPageList,\n          total: filterList.length,\n          column: this.column\n        })\n      }).catch(err => {\n        console.log(err)\n      })\n    },\n    change (val) {\n      console.log(val)\n    },\n    focus (event) {\n      console.log('获取焦点')\n    },\n    blur (event) {\n      console.log('失去焦点')\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo4\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-page-select',{attrs:{\"width\":\"300px\",\"table\":\"\",\"pageSize\":_vm.pageSize,\"selectLabel\":\"label\",\"isShow\":true,\"valueKey\":\"valueKey\",\"querySelectList\":_vm.querySelectList},on:{\"change\":_vm.change,\"focus\":_vm.focus,\"blur\":_vm.blur},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return _vm._l((scope.list),function(item,index){return _c('df-option',{key:item.valueKey,attrs:{\"value\":item,\"label\":item.label}},_vm._l((scope.column),function(col){return _c('df-select-column',{key:col.prop,attrs:{\"optionIndex\":index,\"width\":col.width*5,\"label\":col.label,\"prop\":col.prop,\"backgroundColor\":col.backgroundColor,\"icons\":col.icons}})}),1)})}}]),model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      value: {},\n      pageSize: 5,\n      list: [\n        {\n          valueKey: '001',\n          XIANSHILX: '西',\n          label: '胸部左侧X光',\n          TUBIAO: '1,0,0,0,1,1',\n          price: '38',\n          size: '√'\n        },\n        {\n          valueKey: '002',\n          XIANSHILX: '草',\n          label: '胸透',\n          TUBIAO: '0,0,0,0,1,0',\n          price: '36',\n          size: '√'\n        },\n        {\n          valueKey: '003',\n          XIANSHILX: '成',\n          label: '胸部右侧X光',\n          TUBIAO: '0,1,0,0,0,1',\n          price: '35',\n          size: '√'\n        },\n        {\n          valueKey: '004',\n          XIANSHILX: '西',\n          label: '抽血检测',\n          TUBIAO: '0,0,1,0,0,0',\n          price: '34',\n          size: '√'\n        }, {\n          valueKey: '005',\n          XIANSHILX: '草',\n          label: '核算检测',\n          TUBIAO: '0,0,0,0,0,0',\n          price: '99',\n          size: '√'\n        },\n        {\n          valueKey: '021',\n          XIANSHILX: '成',\n          label: '头部检测',\n          TUBIAO: '0,0,0,1,0,0',\n          price: '25',\n          size: '√'\n        },\n        {\n          valueKey: '022',\n          XIANSHILX: '西',\n          label: '核酸检测',\n          TUBIAO: '0,0,0,0,0,0',\n          position: '西湖区',\n          price: '22',\n          size: '√'\n        },\n        {\n          valueKey: '023',\n          XIANSHILX: '草',\n          label: '血液检测',\n          TUBIAO: '0,1,1,0,0,0',\n          price: '21',\n          size: '√'\n        },\n        {\n          valueKey: '024',\n          XIANSHILX: '成',\n          label: '酒精检测',\n          TUBIAO: '0,0,1,0,0,0',\n          price: '29',\n          size: '√'\n        }\n      ],\n      column: [\n        {\n          width: 8,\n          label: '分类',\n          prop: 'XIANSHILX',\n          backgroundColor: [{\n            key: '西',\n            value: '#fdf2d1'\n          }, {\n            key: '成',\n            value: '#fbe6dc'\n          }, {\n            key: '草',\n            value: '#e0eed5'\n          }]\n        },\n        {width: 20, label: '收费名称', prop: 'label'},\n        {\n          width: 20,\n          label: '图标',\n          prop: 'TUBIAO',\n          icons: [{\n            key: '毒',\n            value: '#af90f8'\n          }, {\n            key: '麻',\n            value: '#af90f8'\n          }, {\n            key: '精I',\n            value: '#af90f8'\n          }, {\n            key: '精II',\n            value: '#af90f8'\n          }, {\n            key: '跌',\n            value: '#f2a25c'\n          }, {\n            key: '危',\n            value: '#ed6a66'\n          }]\n        },\n        {width: 20, label: '位置', prop: 'position'},\n        {width: 20, label: '价格', prop: 'price'},\n        {width: 20, label: '是否', prop: 'size'}\n      ]\n    }\n  },\n  methods: {\n    querySelectList ({page, pagesize, keyword}) {\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\n      console.log(page, pagesize, keyword)\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\n      const filterList = this.list.filter(item => item.label.includes(keyword))\n      // 然后根据当前页和每页条数, 计算出这一页的结果\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\n      return new Promise((resolve, reject) => {\n        resolve({\n          list: currentPageList,\n          total: filterList.length,\n          column: this.column\n        })\n      }).catch(err => {\n        console.log(err)\n      })\n    },\n    change (val) {\n      console.log(val)\n    },\n    focus (event) {\n      console.log('获取焦点')\n    },\n    blur (event) {\n      console.log('失去焦点')\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo5\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-page-select',{attrs:{\"width\":\"300px\",\"table\":\"\",\"pageSize\":_vm.pageSize,\"selectLabel\":\"label\",\"isShow\":true,\"valueKey\":\"valueKey\",\"querySelectList\":_vm.querySelectList},on:{\"change\":_vm.change,\"focus\":_vm.focus,\"blur\":_vm.blur},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return _vm._l((scope.list),function(item,index){return _c('df-option',{key:item.valueKey,attrs:{\"value\":item,\"label\":item.label}},_vm._l((scope.column),function(col){return _c('df-select-column',{key:col.prop,attrs:{\"optionIndex\":index,\"width\":col.width*5,\"label\":col.label,\"prop\":col.prop,\"pureIcons\":col.pureIcons}})}),1)})}}]),model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}})]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      value: {},\n      pageSize: 5,\n      list: [\n        {\n          valueKey: '001',\n          XIANSHILX: '西',\n          label: '胸部左侧X光',\n          CHUNTUBIAO: '1,0,0,0,1,1',\n          price: '38',\n          size: '√'\n        },\n        {\n          valueKey: '002',\n          XIANSHILX: '草',\n          label: '胸透',\n          CHUNTUBIAO: '0,0,0,0,1,0',\n          price: '36',\n          size: '√'\n        },\n        {\n          valueKey: '003',\n          XIANSHILX: '成',\n          label: '胸部右侧X光',\n          CHUNTUBIAO: '0,1,0,0,0,1',\n          price: '35',\n          size: '√'\n        },\n        {\n          valueKey: '004',\n          XIANSHILX: '西',\n          label: '抽血检测',\n          CHUNTUBIAO: '0,0,1,0,0,0',\n          price: '34',\n          size: '√'\n        }, {\n          valueKey: '005',\n          XIANSHILX: '草',\n          label: '核算检测',\n          CHUNTUBIAO: '0,0,0,0,0,0',\n          price: '99',\n          size: '√'\n        },\n        {\n          valueKey: '021',\n          XIANSHILX: '成',\n          label: '头部检测',\n          CHUNTUBIAO: '0,0,0,1,0,0',\n          price: '25',\n          size: '√'\n        },\n        {\n          valueKey: '022',\n          XIANSHILX: '西',\n          label: '核酸检测',\n          CHUNTUBIAO: '0,0,0,0,0,0',\n          position: '西湖区',\n          price: '22',\n          size: '√'\n        },\n        {\n          valueKey: '023',\n          XIANSHILX: '草',\n          label: '血液检测',\n          CHUNTUBIAO: '0,1,1,0,0,0',\n          price: '21',\n          size: '√'\n        },\n        {\n          valueKey: '024',\n          XIANSHILX: '成',\n          label: '酒精检测',\n          CHUNTUBIAO: '0,0,1,0,0,0',\n          price: '29',\n          size: '√'\n        }\n      ],\n      column: [\n        {\n          width: 8,\n          label: '分类',\n          prop: 'XIANSHILX'\n        },\n        {width: 20, label: '收费名称', prop: 'label'},\n        {\n          width: 20,\n          label: '纯图标',\n          prop: 'CHUNTUBIAO',\n          pureIcons: [{\n            key: 'correct',\n            value: '#af90f8'\n          }, {\n            key: 'download',\n            value: '#af90f8'\n          }, {\n            key: 'setting-line',\n            value: '#af90f8'\n          }, {\n            key: 'print',\n            value: '#af90f8'\n          }, {\n            key: 'history-linear',\n            value: '#f2a25c'\n          }, {\n            key: 'top-circle',\n            value: '#ed6a66'\n          }]\n        },\n        {width: 20, label: '位置', prop: 'position'},\n        {width: 20, label: '价格', prop: 'price'},\n        {width: 20, label: '是否', prop: 'size'}\n      ]\n    }\n  },\n  methods: {\n    querySelectList ({page, pagesize, keyword}) {\n      // page: 当前页, pagesize: 每页条数, keyword: 输入框内的搜索关键字\n      console.log(page, pagesize, keyword)\n      // 首先根据输入框内的搜索关键字筛选出符合条件的项\n      const filterList = this.list.filter(item => item.label.includes(keyword))\n      // 然后根据当前页和每页条数, 计算出这一页的结果\n      const currentPageList = filterList.slice((page - 1) * pagesize, page * pagesize)\n      return new Promise((resolve, reject) => {\n        resolve({\n          list: currentPageList,\n          total: filterList.length,\n          column: this.column\n        })\n      }).catch(err => {\n        console.log(err)\n      })\n    },\n    change (val) {\n      console.log(val)\n    },\n    focus (event) {\n      console.log('获取焦点')\n    },\n    blur (event) {\n      console.log('失去焦点')\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\n        }\n      }\n    </script>\n  ","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js!../../../docs/md-loader/index.js!../../../node_modules/eslint-loader/index.js??ref--14-0!./pageSelect.md?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js!../../../docs/md-loader/index.js!../../../node_modules/eslint-loader/index.js??ref--14-0!./pageSelect.md?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./pageSelect.md?vue&type=template&id=14c902d4&\"\nimport script from \"./pageSelect.md?vue&type=script&lang=js&\"\nexport * from \"./pageSelect.md?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}