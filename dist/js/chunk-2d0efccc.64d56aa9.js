(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0efccc"],{"9a3a":function(e,n,t){"use strict";t.r(n);var d=function(){var e=this,n=e._self._c;return n("section",{staticClass:"content df-doc"},[e._m(0),n("p",[e._v("用清晰的层级结构展示信息，可展开或折叠。")]),e._m(1),n("p",[e._v("基础的树形结构展示。")]),n("demo-block",[n("template",{slot:"source"},[n("df-demo0")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <df-tree :data=\"data\" :props=\"defaultProps\" @node-click=\"handleNodeClick\"></df-tree>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          label: '一级 1',\n          children: [{\n            label: '二级 1-1',\n            children: [{\n              label: '三级 1-1-1'\n            }]\n          }]\n        }, {\n          label: '一级 2',\n          children: [{\n            label: '二级 2-1',\n            children: [{\n              label: '三级 2-1-1'\n            }]\n          }, {\n            label: '二级 2-2',\n            children: [{\n              label: '三级 2-2-1'\n            }]\n          }]\n        }, {\n          label: '一级 3',\n          children: [{\n            label: '二级 3-1',\n            children: [{\n              label: '三级 3-1-1'\n            }]\n          }, {\n            label: '二级 3-2',\n            children: [{\n              label: '三级 3-2-1'\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    },\n    methods: {\n      handleNodeClick(data) {\n        console.log(data);\n      }\n    }\n  };\n<\/script>\n")])])])],2),e._m(2),n("p",[e._v("根据需要可以自由定义每个节点下的图标。")]),n("demo-block",[n("div",[n("p",[e._v("声明属性"),n("code",[e._v("custom-icon")]),e._v(", 该属性是一个函数, 自带 4 个参数, 分别是 节点、节点数据、节点是否展开、节点是否是最终层节点, 根据这些状态判断要为此节点赋予何种图标, 在函数的最后"),n("code",[e._v("return")]),e._v("一个对象, 对象包含图标类型和图标名称, 目前我们 "),n("a",{attrs:{href:"#/component/icon"}},[e._v("图标库")]),e._v(" 支持的图标类型有"),n("code",[e._v("icon")]),e._v("型和"),n("code",[e._v("svg")]),e._v("型, 如果"),n("code",[e._v("return")]),e._v("的是一个空值, 则会自动使用原本的默认图标。")])]),n("template",{slot:"source"},[n("df-demo1")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <df-tree :data=\"data\" :custom-icon=\"customIcon\"></df-tree>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      data: [{\n        label: '一级 1',\n        children: [{\n          label: '二级 1-1',\n          children: [{\n            label: '三级 1-1-1'\n          }]\n        }]\n      }, {\n        label: '一级 2',\n        children: [{\n          label: '二级 2-1',\n          children: [{\n            label: '三级 2-1-1'\n          }]\n        }, {\n          label: '二级 2-2',\n          children: [{\n            label: '三级 2-2-1'\n          }]\n        }]\n      }, {\n        label: '一级 3',\n        children: [{\n          label: '二级 3-1',\n          children: [{\n            label: '三级 3-1-1'\n          }]\n        }, {\n          label: '二级 3-2',\n          children: [{\n            label: '三级 3-2-1'\n          }]\n        }]\n      }]\n    }\n  },\n  methods: {\n    customIcon (node, data, expanded, isLeaf) {\n      // 如果节点的 label 是 '一级 3', 则不使用自定义图标, 此情况下返回一个 null, 组件就会自动使用默认图标\n      if (data.label === '一级 3') return null\n      // 如果是最终层节点, 则使用 icon 类型的图标 star\n      if (isLeaf) return { iconType: 'icon', iconName: 'star' }\n      // 如果节点是展开状态, 使用 svg 类型图标 folder-open\n      if (expanded) return { iconType: 'svg', iconName: 'folder-open' }\n      // 如果节点是收起状态, 使用 svg 类型图标 folder\n      if (!expanded) return { iconType: 'svg', iconName: 'folder' }\n    }\n  }\n}\n<\/script>\n")])])])],2),e._m(3),n("p",[e._v("适用于需要选择层级时使用。")]),n("demo-block",[n("div",[n("p",[e._v("本例还展示了动态加载节点数据的方法。")])]),n("template",{slot:"source"},[n("df-demo2")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <df-tree\n    :props=\"props\"\n    :load=\"loadNode\"\n    lazy\n    show-checkbox\n    @check-change=\"handleCheckChange\">\n  </df-tree>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        props: {\n          label: 'name',\n          children: 'zones'\n        },\n        count: 1\n      };\n    },\n    methods: {\n      handleCheckChange(data, checked, indeterminate) {\n        console.log(data, checked, indeterminate);\n      },\n      handleNodeClick(data) {\n        console.log(data);\n      },\n      loadNode(node, resolve) {\n        if (node.level === 0) {\n          return resolve([{ name: 'region1' }, { name: 'region2' }]);\n        }\n        if (node.level > 3) return resolve([]);\n\n        var hasChild;\n        if (node.data.name === 'region1') {\n          hasChild = true;\n        } else if (node.data.name === 'region2') {\n          hasChild = false;\n        } else {\n          hasChild = Math.random() > 0.5;\n        }\n\n        setTimeout(() => {\n          var data;\n          if (hasChild) {\n            data = [{\n              name: 'zone' + this.count++\n            }, {\n              name: 'zone' + this.count++\n            }];\n          } else {\n            data = [];\n          }\n\n          resolve(data);\n        }, 500);\n      }\n    }\n  };\n<\/script>\n")])])])],2),e._m(4),n("demo-block",[n("div",[n("p",[e._v("由于在点击节点时才进行该层数据的获取，默认情况下 Tree 无法预知某个节点是否为叶子节点，所以会为每个节点添加一个下拉按钮，如果节点没有下层数据，则点击后下拉按钮会消失。同时，你也可以提前告知 Tree 某个节点是否为叶子节点，从而避免在叶子节点前渲染下拉按钮。")])]),n("template",{slot:"source"},[n("df-demo3")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <df-tree\n    :props=\"props\"\n    :load=\"loadNode\"\n    lazy\n    show-checkbox>\n  </df-tree>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        props: {\n          label: 'name',\n          children: 'zones',\n          isLeaf: 'leaf'\n        },\n      };\n    },\n    methods: {\n      loadNode(node, resolve) {\n        if (node.level === 0) {\n          return resolve([{ name: 'region' }]);\n        }\n        if (node.level > 1) return resolve([]);\n\n        setTimeout(() => {\n          const data = [{\n            name: 'leaf',\n            leaf: true\n          }, {\n            name: 'zone'\n          }];\n\n          resolve(data);\n        }, 500);\n      }\n    }\n  };\n<\/script>\n")])])])],2),e._m(5),n("p",[e._v("可将 Tree 的某些节点设置为默认展开或默认选中")]),n("demo-block",[n("div",[n("p",[e._v("分别通过"),n("code",[e._v("default-expanded-keys")]),e._v("和"),n("code",[e._v("default-checked-keys")]),e._v("设置默认展开和默认选中的节点。需要注意的是，此时必须设置"),n("code",[e._v("node-key")]),e._v("，其值为节点数据中的一个字段名，该字段在整棵树中是唯一的。")])]),n("template",{slot:"source"},[n("df-demo4")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <df-tree\n    :data=\"data\"\n    show-checkbox\n    node-key=\"id\"\n    :default-expanded-keys=\"[2, 3]\"\n    :default-checked-keys=\"[5]\"\n    :props=\"defaultProps\">\n  </df-tree>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: '一级 1',\n          children: [{\n            id: 4,\n            label: '二级 1-1',\n            children: [{\n              id: 9,\n              label: '三级 1-1-1'\n            }, {\n              id: 10,\n              label: '三级 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: '一级 2',\n          children: [{\n            id: 5,\n            label: '二级 2-1'\n          }, {\n            id: 6,\n            label: '二级 2-2'\n          }]\n        }, {\n          id: 3,\n          label: '一级 3',\n          children: [{\n            id: 7,\n            label: '二级 3-1'\n          }, {\n            id: 8,\n            label: '二级 3-2'\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")])])])],2),e._m(6),n("p",[e._v("可将 Tree 的某些节点设置为禁用状态")]),n("demo-block",[n("div",[n("p",[e._v("通过"),n("code",[e._v("disabled")]),e._v("设置禁用状态。")])]),n("template",{slot:"source"},[n("df-demo5")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <df-tree\n    :data=\"data\"\n    show-checkbox\n    node-key=\"id\"\n    :default-expanded-keys=\"[2, 3]\"\n    :default-checked-keys=\"[5]\">\n  </df-tree>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: '一级 2',\n          children: [{\n            id: 3,\n            label: '二级 2-1',\n            children: [{\n              id: 4,\n              label: '三级 3-1-1'\n            }, {\n              id: 5,\n              label: '三级 3-1-2',\n              disabled: true\n            }]\n          }, {\n            id: 2,\n            label: '二级 2-2',\n            disabled: true,\n            children: [{\n              id: 6,\n              label: '三级 3-2-1'\n            }, {\n              id: 7,\n              label: '三级 3-2-2',\n              disabled: true\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")])])])],2),e._m(7),n("p",[e._v("可以通过回调函数的形式设置某些节点设置为禁用状态")]),n("demo-block",[n("div",[n("p",[e._v("给 tree 传递函数"),n("code",[e._v("node-disabled-func")]),e._v(", 该函数自带两个参数, 节点的 node 和 data, 通过对节点数据的判断, 返回是否禁用, 与节点数据中的"),n("code",[e._v("disabled")]),e._v("同时生效。")])]),n("template",{slot:"source"},[n("df-demo6")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <df-tree\n    :data=\"data\"\n    show-checkbox\n    node-key=\"id\"\n    :default-expanded-keys=\"[2, 3]\"\n    :default-checked-keys=\"[5]\"\n    :node-disabled-func=\"nodeDisabledFunc\">\n  </df-tree>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      data: [{\n        id: 1,\n        label: '一级 2',\n        children: [{\n          id: 3,\n          label: '二级 2-1',\n          children: [{\n            id: 4,\n            label: '三级 3-1-1'\n          }, {\n            id: 5,\n            label: '三级 3-1-2',\n            disabled: true\n          }]\n        }, {\n          id: 2,\n          label: '二级 2-2',\n          disabled: true,\n          children: [{\n            id: 6,\n            label: '三级 3-2-1'\n          }, {\n            id: 7,\n            label: '三级 3-2-2',\n            disabled: true\n          }]\n        }]\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      }\n    }\n  },\n  methods: {\n    nodeDisabledFunc (node, data) {\n      return data.label === '一级 2' || data.label === '二级 2-1'\n    }\n  }\n}\n<\/script>\n")])])])],2),e._m(8),n("demo-block",[n("div",[n("p",[e._v("本例展示如何获取和设置选中节点。获取和设置各有两种方式：通过 node 或通过 key。如果需要通过 key 来获取或设置，则必须设置"),n("code",[e._v("node-key")]),e._v("。")])]),n("template",{slot:"source"},[n("df-demo7")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <df-tree\n    :data=\"data\"\n    show-checkbox\n    default-expand-all\n    node-key=\"id\"\n    ref=\"tree\"\n    highlight-current\n    :props=\"defaultProps\">\n  </df-tree>\n</template>\n\n<div class=\"buttons\">\n  <df-button @click=\"getCheckedNodes\">通过 node 获取</df-button>\n  <df-button @click=\"getCheckedKeys\">通过 key 获取</df-button>\n  <df-button @click=\"setCheckedNodes\">通过 node 设置</df-button>\n  <df-button @click=\"setCheckedKeys\">通过 key 设置</df-button>\n  <df-button @click=\"resetChecked\">清空</df-button>\n</div>\n\n<script>\n  export default {\n    methods: {\n      getCheckedNodes() {\n        console.log(this.$refs.tree.getCheckedNodes());\n      },\n      getCheckedKeys() {\n        console.log(this.$refs.tree.getCheckedKeys());\n      },\n      setCheckedNodes() {\n        this.$refs.tree.setCheckedNodes([{\n          id: 5,\n          label: '二级 2-1'\n        }, {\n          id: 9,\n          label: '三级 1-1-1'\n        }]);\n      },\n      setCheckedKeys() {\n        this.$refs.tree.setCheckedKeys([3]);\n      },\n      resetChecked() {\n        this.$refs.tree.setCheckedKeys([]);\n      }\n    },\n\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: '一级 1',\n          children: [{\n            id: 4,\n            label: '二级 1-1',\n            children: [{\n              id: 9,\n              label: '三级 1-1-1'\n            }, {\n              id: 10,\n              label: '三级 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: '一级 2',\n          children: [{\n            id: 5,\n            label: '二级 2-1'\n          }, {\n            id: 6,\n            label: '二级 2-2'\n          }]\n        }, {\n          id: 3,\n          label: '一级 3',\n          children: [{\n            id: 7,\n            label: '二级 3-1'\n          }, {\n            id: 8,\n            label: '二级 3-2'\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")])])])],2),e._m(9),n("p",[e._v("节点的内容支持自定义，可以在节点区添加按钮或图标等内容")]),n("demo-block",[n("div",[n("p",[e._v("可以通过两种方法进行树节点内容的自定义："),n("code",[e._v("render-content")]),e._v("和 scoped slot。使用"),n("code",[e._v("render-content")]),e._v("指定渲染函数，该函数返回需要的节点区内容即可。渲染函数的用法请参考 Vue 文档。使用 scoped slot 会传入两个参数"),n("code",[e._v("node")]),e._v("和"),n("code",[e._v("data")]),e._v("，分别表示当前节点的 Node 对象和当前节点的数据。注意：由于 jsfiddle 不支持 JSX 语法，所以"),n("code",[e._v("render-content")]),e._v("示例在 jsfiddle 中无法运行。但是在实际的项目中，只要正确地配置了相关依赖，就可以正常运行。")])]),n("template",{slot:"source"},[n("df-demo8")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <div class="custom-tree-container">\n    <div class="block">\n      <p>使用 render-content</p>\n      <df-tree\n        :data="data"\n        show-checkbox\n        node-key="id"\n        default-expand-all\n        :expand-on-click-node="false"\n        :render-content="renderContent">\n      </df-tree>\n    </div>\n    <div class="block">\n      <p>使用 scoped slot</p>\n      <df-tree\n        :data="data"\n        show-checkbox\n        node-key="id"\n        default-expand-all\n        :expand-on-click-node="false">\n        <span class="custom-tree-node" slot-scope="{ node, data }">\n          <span>{{ node.label }}</span>\n          <span>\n            <df-button\n              type="text"\n              size="mini"\n              @click="() => append(data)">\n              Append\n            </df-button>\n            <df-button\n              type="text"\n              size="mini"\n              @click="() => remove(node, data)">\n              Delete\n            </df-button>\n          </span>\n        </span>\n      </df-tree>\n    </div>\n  </div>\n</template>\n\n<script>\n  let id = 1000;\n\n  export default {\n    data() {\n      const data = [{\n        id: 1,\n        label: \'一级 1\',\n        children: [{\n          id: 4,\n          label: \'二级 1-1\',\n          children: [{\n            id: 9,\n            label: \'三级 1-1-1\'\n          }, {\n            id: 10,\n            label: \'三级 1-1-2\'\n          }]\n        }]\n      }, {\n        id: 2,\n        label: \'一级 2\',\n        children: [{\n          id: 5,\n          label: \'二级 2-1\'\n        }, {\n          id: 6,\n          label: \'二级 2-2\'\n        }]\n      }, {\n        id: 3,\n        label: \'一级 3\',\n        children: [{\n          id: 7,\n          label: \'二级 3-1\'\n        }, {\n          id: 8,\n          label: \'二级 3-2\'\n        }]\n      }];\n      return {\n        data: JSON.parse(JSON.stringify(data)),\n        data: JSON.parse(JSON.stringify(data))\n      }\n    },\n\n    methods: {\n      append(data) {\n        const newChild = { id: id++, label: \'testtest\', children: [] };\n        if (!data.children) {\n          this.$set(data, \'children\', []);\n        }\n        data.children.push(newChild);\n      },\n\n      remove(node, data) {\n        const parent = node.parent;\n        const children = parent.data.children || parent.data;\n        const index = children.findIndex(d => d.id === data.id);\n        children.splice(index, 1);\n      },\n\n      renderContent(h, { node, data, store }) {\n        return (\n          <span class="custom-tree-node">\n            <span>{node.label}</span>\n            <span>\n              <df-button size="mini" type="text" on-click={ () => this.append(data) }>Append</df-button>\n              <df-button size="mini" type="text" on-click={ () => this.remove(node, data) }>Delete</df-button>\n            </span>\n          </span>);\n      }\n    }\n  };\n<\/script>\n\n<style>\n  .custom-tree-node {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 14px;\n    padding-right: 8px;\n  }\n</style>\n')])])])],2),e._m(10),n("p",[e._v("通过关键字过滤树节点")]),n("demo-block",[n("div",[n("p",[e._v("在需要对节点进行过滤时，调用 Tree 实例的"),n("code",[e._v("filter")]),e._v("方法，参数为关键字。需要注意的是，此时需要设置"),n("code",[e._v("filter-node-method")]),e._v("，值为过滤函数。")])]),n("template",{slot:"source"},[n("df-demo9")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <div>\n    <df-input\n      placeholder=\"输入关键字进行过滤\"\n      v-model=\"filterText\">\n    </df-input>\n\n    <df-tree\n      class=\"filter-tree\"\n      :data=\"data\"\n      :props=\"defaultProps\"\n      default-expand-all\n      :filter-node-method=\"filterNode\"\n      ref=\"tree\">\n    </df-tree>\n  </div>\n</template>\n\n<script>\n  export default {\n    watch: {\n      filterText(val) {\n        this.$refs.tree.filter(val);\n      }\n    },\n\n    methods: {\n      filterNode(value, data) {\n        if (!value) return true;\n        return data.label.indexOf(value) !== -1;\n      }\n    },\n\n    data() {\n      return {\n        filterText: '',\n        data: [{\n          id: 1,\n          label: '一级 1',\n          children: [{\n            id: 4,\n            label: '二级 1-1',\n            children: [{\n              id: 9,\n              label: '三级 1-1-1'\n            }, {\n              id: 10,\n              label: '三级 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: '一级 2',\n          children: [{\n            id: 5,\n            label: '二级 2-1'\n          }, {\n            id: 6,\n            label: '二级 2-2'\n          }]\n        }, {\n          id: 3,\n          label: '一级 3',\n          children: [{\n            id: 7,\n            label: '二级 3-1'\n          }, {\n            id: 8,\n            label: '二级 3-2'\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")])])])],2),e._m(11),n("p",[e._v("对于同一级的节点，每次只能展开一个")]),n("demo-block",[n("template",{slot:"source"},[n("df-demo10")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <df-tree\n    :data=\"data\"\n    :props=\"defaultProps\"\n    accordion\n    @node-click=\"handleNodeClick\">\n  </df-tree>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          label: '一级 1',\n          children: [{\n            label: '二级 1-1',\n            children: [{\n              label: '三级 1-1-1'\n            }]\n          }]\n        }, {\n          label: '一级 2',\n          children: [{\n            label: '二级 2-1',\n            children: [{\n              label: '三级 2-1-1'\n            }]\n          }, {\n            label: '二级 2-2',\n            children: [{\n              label: '三级 2-2-1'\n            }]\n          }]\n        }, {\n          label: '一级 3',\n          children: [{\n            label: '二级 3-1',\n            children: [{\n              label: '三级 3-1-1'\n            }]\n          }, {\n            label: '二级 3-2',\n            children: [{\n              label: '三级 3-2-1'\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    },\n    methods: {\n      handleNodeClick(data) {\n        console.log(data);\n      }\n    }\n  };\n<\/script>\n")])])])],2),e._m(12),n("p",[e._v("通过 draggable 属性可让节点变为可拖拽。")]),n("demo-block",[n("template",{slot:"source"},[n("df-demo11")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <df-tree\n    :data=\"data\"\n    node-key=\"id\"\n    default-expand-all\n    @node-drag-start=\"handleDragStart\"\n    @node-drag-enter=\"handleDragEnter\"\n    @node-drag-leave=\"handleDragLeave\"\n    @node-drag-over=\"handleDragOver\"\n    @node-drag-end=\"handleDragEnd\"\n    @node-drop=\"handleDrop\"\n    draggable\n    :allow-drop=\"allowDrop\"\n    :allow-drag=\"allowDrag\">\n  </df-tree>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: '一级 1',\n          children: [{\n            id: 4,\n            label: '二级 1-1',\n            children: [{\n              id: 9,\n              label: '三级 1-1-1'\n            }, {\n              id: 10,\n              label: '三级 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: '一级 2',\n          children: [{\n            id: 5,\n            label: '二级 2-1'\n          }, {\n            id: 6,\n            label: '二级 2-2'\n          }]\n        }, {\n          id: 3,\n          label: '一级 3',\n          children: [{\n            id: 7,\n            label: '二级 3-1'\n          }, {\n            id: 8,\n            label: '二级 3-2',\n            children: [{\n             id: 11,\n              label: '三级 3-2-1'\n            }, {\n              id: 12,\n              label: '三级 3-2-2'\n            }, {\n              id: 13,\n              label: '三级 3-2-3'\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    },\n    methods: {\n      handleDragStart(node, ev) {\n        console.log('drag start', node);\n      },\n      handleDragEnter(draggingNode, dropNode, ev) {\n        console.log('tree drag enter: ', dropNode.label);\n      },\n      handleDragLeave(draggingNode, dropNode, ev) {\n        console.log('tree drag leave: ', dropNode.label);\n      },\n      handleDragOver(draggingNode, dropNode, ev) {\n        console.log('tree drag over: ', dropNode.label);\n      },\n      handleDragEnd(draggingNode, dropNode, dropType, ev) {\n        console.log('tree drag end: ', dropNode && dropNode.label, dropType);\n      },\n      handleDrop(draggingNode, dropNode, dropType, ev) {\n        console.log('tree drop: ', dropNode.label, dropType);\n      },\n      allowDrop(draggingNode, dropNode, type) {\n        if (dropNode.data.label === '二级 3-1') {\n          return type !== 'inner';\n        } else {\n          return true;\n        }\n      },\n      allowDrag(draggingNode) {\n        return draggingNode.data.label.indexOf('三级 3-2-2') === -1;\n      }\n    }\n  };\n<\/script>\n")])])])],2),e._m(13),n("p",[e._v("配置某个节点处的更多操作按钮组。")]),n("demo-block",[n("div",[n("p",[e._v("传入属性"),n("code",[e._v("need-operations")]),e._v("以开启树节点更多操作，传入"),n("code",[e._v("set-operations")]),e._v("方法以配置某一节点处的按钮组，此属性是一个函数，参数是节点对象，通过业务判断，返回该节点的按钮组即可，若安徽的按钮组为空，那么此节点的操作按钮将被隐藏。当某一按钮被点击时，会外派事件"),n("code",[e._v("operation-click")]),e._v("，携带被点击处的信息。属性"),n("code",[e._v("hide-on-click")]),e._v("表示点击按钮后是否自动隐藏弹出框。支持传入"),n("code",[e._v("hidden-operations")]),e._v("、"),n("code",[e._v("loading-operations")]),e._v("或"),n("code",[e._v("disabled-operations")]),e._v("设置某些按钮的隐藏、禁用或加载，需要注意的是"),n("code",[e._v("hidden-operations")]),e._v("、"),n("code",[e._v("loading-operations")]),e._v("或"),n("code",[e._v("disabled-operations")]),e._v("必须通过 Vue 指定的 "),n("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B"}},[e._v("数组更新检测")]),e._v(" 方法来改变值，否则将不能监听其变化。")])]),n("template",{slot:"source"},[n("df-demo12")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <div>\n    <df-tree\n      :data=\"data\"\n      :props=\"defaultProps\"\n      @node-click=\"handleNodeClick\"\n      need-operations\n      :set-operations=\"setOperations\"\n      @operation-click=\"operationClick\"\n      :hidden-operations=\"hiddenOperations\"\n      :loading-operations=\"loadingOperations\"\n      :disabled-operations=\"disabledOperations\"\n    ></df-tree>\n    <br>\n    <df-button @click.stop=\"hideOperation\">隐藏第一个节点的第一个操作</df-button>\n    <df-button @click.stop=\"showOperation\">显示第一个节点的第一个操作</df-button>\n    <br><br>\n    <df-button @click.stop=\"loadingOperation\">设置第二个节点的操作组为 loading</df-button>\n    <df-button @click.stop=\"unLoadingOperation\">清除所有操作的 loading</df-button>\n    <br><br>\n    <df-button @click.stop=\"disableOperation\">设置第三个节点第一个操作为 disabled</df-button>\n    <df-button @click.stop=\"enableOperation\">清除第三个节点第一个操作的 disabled</df-button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      data: [{\n        id: 1,\n        label: '一级 1',\n        children: [{\n          id: 11,\n          label: '二级 1-1',\n          children: [{\n            id: 111,\n            label: '三级 1-1-1'\n          }, {\n            id: 112,\n            label: '三级 1-1-2'\n          }]\n        }]\n      }, {\n        id: 2,\n        label: '一级 2',\n        children: [{\n          id: 21,\n          label: '二级 2-1'\n        }, {\n          id: 22,\n          label: '二级 2-2'\n        }]\n      }, {\n        id: 3,\n        label: '一级 3',\n        children: [{\n          id: 31,\n          label: '二级 3-1'\n        }, {\n          id: 32,\n          label: '二级 3-2'\n        }]\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      hiddenOperations: [],\n      loadingOperations: [],\n      disabledOperations: [{operationIndex: 2, id: 1}]\n    }\n  },\n  methods: {\n    handleNodeClick (data) {\n      console.log(data)\n    },\n    setOperations (node) {\n      if (node.data.id === 1) return ['订单', '方法', '刚刚']\n      else return ['请求', '哇哇', '嗯嗯']\n    },\n    operationClick (...data) {\n      console.log(data)\n    },\n    hideOperation () {\n      this.hiddenOperations.push({operationIndex: 0, id: 1})\n    },\n    showOperation () {\n      this.hiddenOperations = []\n    },\n    loadingOperation () {\n      this.loadingOperations.push({operationIndex: 0, id: 2}, {operationIndex: 1, id: 2}, {operationIndex: 2, id: 2})\n    },\n    unLoadingOperation () {\n      this.loadingOperations = []\n    },\n    disableOperation () {\n      this.disabledOperations.push({operationIndex: 0, id: 3})\n    },\n    enableOperation () {\n      this.disabledOperations = []\n    }\n  }\n}\n<\/script>\n\n\n")])])])],2),e._m(14),e._m(15),e._m(16),e._m(17),e._m(18),e._m(19),e._m(20),e._m(21),e._m(22),e._m(23),e._m(24)],1)},a=[function(){var e=this,n=e._self._c;return n("h2",{attrs:{id:"tree-shu-xing-kong-jian"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tree-shu-xing-kong-jian"}},[e._v("¶")]),e._v(" Tree 树形控件")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"ji-chu-yong-fa"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ji-chu-yong-fa"}},[e._v("¶")]),e._v(" 基础用法")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"zi-ding-yi-tu-biao"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#zi-ding-yi-tu-biao"}},[e._v("¶")]),e._v(" 自定义图标")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"ke-xuan-ze"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ke-xuan-ze"}},[e._v("¶")]),e._v(" 可选择")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"lan-jia-zai-zi-ding-yi-ye-zi-jie-dian"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lan-jia-zai-zi-ding-yi-ye-zi-jie-dian"}},[e._v("¶")]),e._v(" 懒加载自定义叶子节点")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"mo-ren-zhan-kai-he-mo-ren-xuan-zhong"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mo-ren-zhan-kai-he-mo-ren-xuan-zhong"}},[e._v("¶")]),e._v(" 默认展开和默认选中")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"jin-yong-zhuang-tai"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jin-yong-zhuang-tai"}},[e._v("¶")]),e._v(" 禁用状态")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"jin-yong-zhuang-tai-tong-guo-hui-diao-han-shu-dong-tai-she-zhi-jie-dian-de-jin-yong"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jin-yong-zhuang-tai-tong-guo-hui-diao-han-shu-dong-tai-she-zhi-jie-dian-de-jin-yong"}},[e._v("¶")]),e._v(" 禁用状态（通过回调函数动态设置节点的禁用）")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"shu-jie-dian-de-xuan-ze"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#shu-jie-dian-de-xuan-ze"}},[e._v("¶")]),e._v(" 树节点的选择")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"zi-ding-yi-jie-dian-nei-rong"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#zi-ding-yi-jie-dian-nei-rong"}},[e._v("¶")]),e._v(" 自定义节点内容")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"jie-dian-guo-lu"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jie-dian-guo-lu"}},[e._v("¶")]),e._v(" 节点过滤")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"shou-feng-qin-mo-shi"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#shou-feng-qin-mo-shi"}},[e._v("¶")]),e._v(" 手风琴模式")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"ke-tuo-zhuai-jie-dian"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ke-tuo-zhuai-jie-dian"}},[e._v("¶")]),e._v(" 可拖拽节点")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"jie-dian-geng-duo-cao-zuo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jie-dian-geng-duo-cao-zuo"}},[e._v("¶")]),e._v(" 节点更多操作")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"attributes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attributes"}},[e._v("¶")]),e._v(" Attributes")])},function(){var e=this,n=e._self._c;return n("table",[n("thead",[n("tr",[n("th",[e._v("参数")]),n("th",[e._v("说明")]),n("th",[e._v("类型")]),n("th",[e._v("可选值")]),n("th",[e._v("默认值")])])]),n("tbody",[n("tr",[n("td",[e._v("data")]),n("td",[e._v("展示数据")]),n("td",[e._v("array")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("empty-text")]),n("td",[e._v("内容为空的时候展示的文本")]),n("td",[e._v("String")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("node-key")]),n("td",[e._v("每个树节点用来作为唯一标识的属性，整棵树应该是唯一的")]),n("td",[e._v("String")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("props")]),n("td",[e._v("配置选项，具体看下表")]),n("td",[e._v("object")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("render-after-expand")]),n("td",[e._v("是否在第一次展开某个树节点后才渲染其子节点")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("true")])]),n("tr",[n("td",[e._v("load")]),n("td",[e._v("加载子树数据的方法，仅当 lazy 属性为true 时生效")]),n("td",[e._v("function(node, resolve)")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("render-content")]),n("td",[e._v("树节点的内容区的渲染 Function")]),n("td",[e._v("Function(h, { node, data, store }")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("highlight-current")]),n("td",[e._v("是否高亮当前选中节点，默认值是 false。")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("false")])]),n("tr",[n("td",[e._v("default-expand-all")]),n("td",[e._v("是否默认展开所有节点")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("false")])]),n("tr",[n("td",[e._v("expand-on-click-node")]),n("td",[e._v("是否在点击节点的时候展开或者收缩节点， 默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("true")])]),n("tr",[n("td",[e._v("check-on-click-node")]),n("td",[e._v("是否在点击节点的时候选中节点，默认值为 false，即只有在点击复选框时才会选中节点。")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("false")])]),n("tr",[n("td",[e._v("auto-expand-parent")]),n("td",[e._v("展开子节点的时候是否自动展开父节点")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("true")])]),n("tr",[n("td",[e._v("default-expanded-keys")]),n("td",[e._v("默认展开的节点的 key 的数组")]),n("td",[e._v("array")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("show-checkbox")]),n("td",[e._v("节点是否可被选择")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("false")])]),n("tr",[n("td",[e._v("check-strictly")]),n("td",[e._v("在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("false")])]),n("tr",[n("td",[e._v("default-checked-keys")]),n("td",[e._v("默认勾选的节点的 key 的数组")]),n("td",[e._v("array")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("current-node-key")]),n("td",[e._v("当前选中的节点")]),n("td",[e._v("string, number")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("filter-node-method")]),n("td",[e._v("对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏")]),n("td",[e._v("Function(value, data, node)")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("accordion")]),n("td",[e._v("是否每次只打开一个同级树节点展开")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("false")])]),n("tr",[n("td",[e._v("indent")]),n("td",[e._v("相邻级节点间的水平缩进，单位为像素")]),n("td",[e._v("number")]),n("td",[e._v("—")]),n("td",[e._v("16")])]),n("tr",[n("td",[e._v("icon-class")]),n("td",[e._v("自定义树节点的图标")]),n("td",[e._v("string")]),n("td",[e._v("-")]),n("td",[e._v("-")])]),n("tr",[n("td",[e._v("lazy")]),n("td",[e._v("是否懒加载子节点，需与 load 方法结合使用")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("false")])]),n("tr",[n("td",[e._v("draggable")]),n("td",[e._v("是否开启拖拽节点功能")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("false")])]),n("tr",[n("td",[e._v("allow-drag")]),n("td",[e._v("判断节点能否被拖拽")]),n("td",[e._v("Function(node)")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("allow-drop")]),n("td",[e._v("拖拽时判定目标节点能否被放置。"),n("code",[e._v("type")]),e._v(" 参数有三种情况：'prev'、'inner' 和 'next'，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后")]),n("td",[e._v("Function(draggingNode, dropNode, type)")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("need-operations")]),n("td",[e._v("/"),n("em",[e._v("新增")]),e._v("/ 是否需要配置节点更多操作按钮组")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("false")])]),n("tr",[n("td",[e._v("set-operations")]),n("td",[e._v("/"),n("em",[e._v("新增")]),e._v("/ 动态配置节点更多操作按钮组的名称")]),n("td",[e._v("Function(node)")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("hidden-operations")]),n("td",[e._v("/"),n("em",[e._v("新增")]),e._v("/ 设置节点更多操作按钮组的隐藏")]),n("td",[e._v("Array")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("loading-operations")]),n("td",[e._v("/"),n("em",[e._v("新增")]),e._v("/ 设置节点更多操作按钮组的 loading 状态")]),n("td",[e._v("Array")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("disabled-operations")]),n("td",[e._v("/"),n("em",[e._v("新增")]),e._v("/ 设置节点更多操作按钮组的 disabled 状态")]),n("td",[e._v("Array")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("hide-on-click")]),n("td",[e._v("/"),n("em",[e._v("新增")]),e._v("/ 是否在弹出节点更多操作按钮组后隐藏弹出框")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("true")])]),n("tr",[n("td",[e._v("stop-on-click-operation")]),n("td",[e._v("/"),n("em",[e._v("新增")]),e._v("/ 是否在点击更多操作三个点时阻止点击事件的向上冒泡")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("true")])]),n("tr",[n("td",[e._v("show-tree-icon")]),n("td",[e._v("/"),n("em",[e._v("新增")]),e._v("/ 是否显示树形控件的图标")]),n("td",[e._v("boolean")]),n("td",[e._v("—")]),n("td",[e._v("true")])]),n("tr",[n("td",[e._v("node-disabled-func")]),n("td",[e._v("/"),n("em",[e._v("新增")]),e._v("/ 通过回调函数的形式控制某些节点的禁用状态")]),n("td",[e._v("function")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("custom-icon")]),n("td",[e._v("/"),n("em",[e._v("新增")]),e._v("/ 通过回调函数的形式控制节点的图标展示, 函数自带 4 个参数, 分别是 节点、节点数据、节点是否展开、节点是否是最终层节点")]),n("td",[e._v("function")]),n("td",[e._v("—")]),n("td",[e._v("—")])])])])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"props"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("¶")]),e._v(" props")])},function(){var e=this,n=e._self._c;return n("table",[n("thead",[n("tr",[n("th",[e._v("参数")]),n("th",[e._v("说明")]),n("th",[e._v("类型")]),n("th",[e._v("可选值")]),n("th",[e._v("默认值")])])]),n("tbody",[n("tr",[n("td",[e._v("label")]),n("td",[e._v("指定节点标签为节点对象的某个属性值")]),n("td",[e._v("string, function(data, node)")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("children")]),n("td",[e._v("指定子树为节点对象的某个属性值")]),n("td",[e._v("string")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("disabled")]),n("td",[e._v("指定节点选择框是否禁用为节点对象的某个属性值")]),n("td",[e._v("boolean, function(data, node)")]),n("td",[e._v("—")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("isLeaf")]),n("td",[e._v("指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效")]),n("td",[e._v("boolean, function(data, node)")]),n("td",[e._v("—")]),n("td",[e._v("—")])])])])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"fang-fa"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fang-fa"}},[e._v("¶")]),e._v(" 方法")])},function(){var e=this,n=e._self._c;return n("p",[n("code",[e._v("Tree")]),e._v(" 内部使用了 Node 类型的对象来包装用户传入的数据，用来保存目前节点的状态。 "),n("code",[e._v("Tree")]),e._v(" 拥有如下方法：")])},function(){var e=this,n=e._self._c;return n("table",[n("thead",[n("tr",[n("th",[e._v("方法名")]),n("th",[e._v("说明")]),n("th",[e._v("参数")])])]),n("tbody",[n("tr",[n("td",[e._v("filter")]),n("td",[e._v("对树节点进行筛选操作")]),n("td",[e._v("接收一个任意类型的参数，该参数会在 filter-node-method 中作为第一个参数")])]),n("tr",[n("td",[e._v("updateKeyChildren")]),n("td",[e._v("通过 keys 设置节点子元素，使用此方法必须设置 node-key 属性")]),n("td",[e._v("(key, data) 接收两个参数，1. 节点 key 2. 节点数据的数组")])]),n("tr",[n("td",[e._v("getCheckedNodes")]),n("td",[e._v("若节点可被选择（即 "),n("code",[e._v("show-checkbox")]),e._v(" 为 "),n("code",[e._v("true")]),e._v("），则返回目前被选中的节点所组成的数组")]),n("td",[e._v("(leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 "),n("code",[e._v("false")]),e._v(" 2. 是否包含半选节点，默认值为 "),n("code",[e._v("false")])])]),n("tr",[n("td",[e._v("setCheckedNodes")]),n("td",[e._v("设置目前勾选的节点，使用此方法必须设置 node-key 属性")]),n("td",[e._v("(nodes) 接收勾选节点数据的数组")])]),n("tr",[n("td",[e._v("getCheckedKeys")]),n("td",[e._v("若节点可被选择（即 "),n("code",[e._v("show-checkbox")]),e._v(" 为 "),n("code",[e._v("true")]),e._v("），则返回目前被选中的节点的 key 所组成的数组")]),n("td",[e._v("(leafOnly) 接收一个 boolean 类型的参数，若为 "),n("code",[e._v("true")]),e._v(" 则仅返回被选中的叶子节点的 keys，默认值为 "),n("code",[e._v("false")])])]),n("tr",[n("td",[e._v("setCheckedKeys")]),n("td",[e._v("通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性")]),n("td",[e._v("(keys, leafOnly) 接收两个参数，1. 勾选节点的 key 的数组 2. boolean 类型的参数，若为 "),n("code",[e._v("true")]),e._v(" 则仅设置叶子节点的选中状态，默认值为 "),n("code",[e._v("false")])])]),n("tr",[n("td",[e._v("setChecked")]),n("td",[e._v("通过 key / data 设置某个节点的勾选状态，使用此方法必须设置 node-key 属性")]),n("td",[e._v("(key/data, checked, deep) 接收三个参数，1. 勾选节点的 key 或者 data 2. boolean 类型，节点是否选中 3. boolean 类型，是否设置子节点 ，默认为 false")])]),n("tr",[n("td",[e._v("getHalfCheckedNodes")]),n("td",[e._v("若节点可被选择（即 "),n("code",[e._v("show-checkbox")]),e._v(" 为 "),n("code",[e._v("true")]),e._v("），则返回目前半选中的节点所组成的数组")]),n("td",[e._v("-")])]),n("tr",[n("td",[e._v("getHalfCheckedKeys")]),n("td",[e._v("若节点可被选择（即 "),n("code",[e._v("show-checkbox")]),e._v(" 为 "),n("code",[e._v("true")]),e._v("），则返回目前半选中的节点的 key 所组成的数组")]),n("td",[e._v("-")])]),n("tr",[n("td",[e._v("getCurrentKey")]),n("td",[e._v("获取当前被选中节点的 key，使用此方法必须设置 node-key 属性，若没有节点被选中则返回 null")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("getCurrentNode")]),n("td",[e._v("获取当前被选中节点的 data，若没有节点被选中则返回 null")]),n("td",[e._v("—")])]),n("tr",[n("td",[e._v("setCurrentKey")]),n("td",[e._v("通过 key 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性")]),n("td",[e._v("(key) 待被选节点的 key，若为 null 则取消当前高亮的节点")])]),n("tr",[n("td",[e._v("setCurrentNode")]),n("td",[e._v("通过 node 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性")]),n("td",[e._v("(node) 待被选节点的 node")])]),n("tr",[n("td",[e._v("getNode")]),n("td",[e._v("根据 data 或者 key 拿到 Tree 组件中的 node")]),n("td",[e._v("(data) 要获得 node 的 key 或者 data")])]),n("tr",[n("td",[e._v("remove")]),n("td",[e._v("删除 Tree 中的一个节点，使用此方法必须设置 node-key 属性")]),n("td",[e._v("(data) 要删除的节点的 data 或者 node")])]),n("tr",[n("td",[e._v("append")]),n("td",[e._v("为 Tree 中的一个节点追加一个子节点")]),n("td",[e._v("(data, parentNode) 接收两个参数，1. 要追加的子节点的 data 2. 子节点的 parent 的 data、key 或者 node")])]),n("tr",[n("td",[e._v("insertBefore")]),n("td",[e._v("为 Tree 的一个节点的前面增加一个节点")]),n("td",[e._v("(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的后一个节点的 data、key 或者 node")])]),n("tr",[n("td",[e._v("insertAfter")]),n("td",[e._v("为 Tree 的一个节点的后面增加一个节点")]),n("td",[e._v("(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的前一个节点的 data、key 或者 node")])]),n("tr",[n("td",[e._v("setNodeExpandStatus")]),n("td",[e._v("设置某个节点的展开状态")]),n("td",[e._v("(nodeKey, expandStatus) 接收两个参数，1. 节点的 key 2. 节点的展开状态，true 为展开，false 为收起")])]),n("tr",[n("td",[e._v("setAllExpandStatus")]),n("td",[e._v("设置全部节点的展开状态")]),n("td",[e._v("(expandStatus) 接收一个参数，全部节点的展开状态，true 为展开，false 为收起")])])])])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"events"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[e._v("¶")]),e._v(" Events")])},function(){var e=this,n=e._self._c;return n("table",[n("thead",[n("tr",[n("th",[e._v("事件名称")]),n("th",[e._v("说明")]),n("th",[e._v("回调参数")])])]),n("tbody",[n("tr",[n("td",[e._v("node-click")]),n("td",[e._v("节点被点击时的回调")]),n("td",[e._v("共三个参数，依次为：传递给 "),n("code",[e._v("data")]),e._v(" 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。")])]),n("tr",[n("td",[e._v("node-contextmenu")]),n("td",[e._v("当某一节点被鼠标右键点击时会触发该事件")]),n("td",[e._v("共四个参数，依次为：event、传递给 "),n("code",[e._v("data")]),e._v(" 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。")])]),n("tr",[n("td",[e._v("check-change")]),n("td",[e._v("节点选中状态发生变化时的回调")]),n("td",[e._v("共三个参数，依次为：传递给 "),n("code",[e._v("data")]),e._v(" 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点")])]),n("tr",[n("td",[e._v("check")]),n("td",[e._v("当复选框被点击的时候触发")]),n("td",[e._v("共两个参数，依次为：传递给 "),n("code",[e._v("data")]),e._v(" 属性的数组中该节点所对应的对象、树目前的选中状态对象，包含 checkedNodes、checkedKeys、halfCheckedNodes、halfCheckedKeys 四个属性")])]),n("tr",[n("td",[e._v("current-change")]),n("td",[e._v("当前选中节点变化时触发的事件")]),n("td",[e._v("共两个参数，依次为：当前节点的数据，当前节点的 Node 对象")])]),n("tr",[n("td",[e._v("node-expand")]),n("td",[e._v("节点被展开时触发的事件")]),n("td",[e._v("共三个参数，依次为：传递给 "),n("code",[e._v("data")]),e._v(" 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身")])]),n("tr",[n("td",[e._v("node-collapse")]),n("td",[e._v("节点被关闭时触发的事件")]),n("td",[e._v("共三个参数，依次为：传递给 "),n("code",[e._v("data")]),e._v(" 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身")])]),n("tr",[n("td",[e._v("node-drag-start")]),n("td",[e._v("节点开始拖拽时触发的事件")]),n("td",[e._v("共两个参数，依次为：被拖拽节点对应的 Node、event")])]),n("tr",[n("td",[e._v("node-drag-enter")]),n("td",[e._v("拖拽进入其他节点时触发的事件")]),n("td",[e._v("共三个参数，依次为：被拖拽节点对应的 Node、所进入节点对应的 Node、event")])]),n("tr",[n("td",[e._v("node-drag-leave")]),n("td",[e._v("拖拽离开某个节点时触发的事件")]),n("td",[e._v("共三个参数，依次为：被拖拽节点对应的 Node、所离开节点对应的 Node、event")])]),n("tr",[n("td",[e._v("node-drag-over")]),n("td",[e._v("在拖拽节点时触发的事件（类似浏览器的 mouseover 事件）")]),n("td",[e._v("共三个参数，依次为：被拖拽节点对应的 Node、当前进入节点对应的 Node、event")])]),n("tr",[n("td",[e._v("node-drag-end")]),n("td",[e._v("拖拽结束时（可能未成功）触发的事件")]),n("td",[e._v("共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点（可能为空）、被拖拽节点的放置位置（before、after、inner）、event")])]),n("tr",[n("td",[e._v("node-drop")]),n("td",[e._v("拖拽成功完成时触发的事件")]),n("td",[e._v("共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点、被拖拽节点的放置位置（before、after、inner）、event")])]),n("tr",[n("td",[e._v("operation-click")]),n("td",[e._v("/"),n("em",[e._v("新增")]),e._v("/ 使用节点更多操作按钮组时，触发任一操作后触发（参数：操作处的节点、操作名称、操作在操作组中的下标）")]),n("td",[e._v("node, operation, operationIndex")])])])])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"scoped-slot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scoped-slot"}},[e._v("¶")]),e._v(" Scoped Slot")])},function(){var e=this,n=e._self._c;return n("table",[n("thead",[n("tr",[n("th",[e._v("name")]),n("th",[e._v("说明")])])]),n("tbody",[n("tr",[n("td",[e._v("—")]),n("td",[e._v("自定义树节点的内容，参数为 { node, data }")])])])])}],l=t("ade3"),r=t("5530"),o=(t("b0c0"),t("e9c4"),t("14d9"),t("c740"),t("a434"),t("4de4"),t("d3b7"),t("c975"),{name:"component-doc",components:{"df-demo0":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("df-tree",{attrs:{data:e.data,props:e.defaultProps},on:{"node-click":e.handleNodeClick}})]],2)},n=[],t={data:function(){return{data:[{label:"一级 1",children:[{label:"二级 1-1",children:[{label:"三级 1-1-1"}]}]},{label:"一级 2",children:[{label:"二级 2-1",children:[{label:"三级 2-1-1"}]},{label:"二级 2-2",children:[{label:"三级 2-2-1"}]}]},{label:"一级 3",children:[{label:"二级 3-1",children:[{label:"三级 3-1-1"}]},{label:"二级 3-2",children:[{label:"三级 3-2-1"}]}]}],defaultProps:{children:"children",label:"label"}}},methods:{handleNodeClick:function(e){console.log(e)}}};return Object(r["a"])({render:e,staticRenderFns:n},t)}(),"df-demo1":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("df-tree",{attrs:{data:e.data,"custom-icon":e.customIcon}})]],2)},n=[],t={data:function(){return{data:[{label:"一级 1",children:[{label:"二级 1-1",children:[{label:"三级 1-1-1"}]}]},{label:"一级 2",children:[{label:"二级 2-1",children:[{label:"三级 2-1-1"}]},{label:"二级 2-2",children:[{label:"三级 2-2-1"}]}]},{label:"一级 3",children:[{label:"二级 3-1",children:[{label:"三级 3-1-1"}]},{label:"二级 3-2",children:[{label:"三级 3-2-1"}]}]}]}},methods:{customIcon:function(e,n,t,d){return"一级 3"===n.label?null:d?{iconType:"icon",iconName:"star"}:t?{iconType:"svg",iconName:"folder-open"}:t?void 0:{iconType:"svg",iconName:"folder"}}}};return Object(r["a"])({render:e,staticRenderFns:n},t)}(),"df-demo2":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("df-tree",{attrs:{props:e.props,load:e.loadNode,lazy:"","show-checkbox":""},on:{"check-change":e.handleCheckChange}})]],2)},n=[],t={data:function(){return{props:{label:"name",children:"zones"},count:1}},methods:{handleCheckChange:function(e,n,t){console.log(e,n,t)},handleNodeClick:function(e){console.log(e)},loadNode:function(e,n){var t,d=this;return 0===e.level?n([{name:"region1"},{name:"region2"}]):e.level>3?n([]):(t="region1"===e.data.name||"region2"!==e.data.name&&Math.random()>.5,void setTimeout((function(){var e;e=t?[{name:"zone"+d.count++},{name:"zone"+d.count++}]:[],n(e)}),500))}}};return Object(r["a"])({render:e,staticRenderFns:n},t)}(),"df-demo3":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("df-tree",{attrs:{props:e.props,load:e.loadNode,lazy:"","show-checkbox":""}})]],2)},n=[],t={data:function(){return{props:{label:"name",children:"zones",isLeaf:"leaf"}}},methods:{loadNode:function(e,n){return 0===e.level?n([{name:"region"}]):e.level>1?n([]):void setTimeout((function(){var e=[{name:"leaf",leaf:!0},{name:"zone"}];n(e)}),500)}}};return Object(r["a"])({render:e,staticRenderFns:n},t)}(),"df-demo4":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("df-tree",{attrs:{data:e.data,"show-checkbox":"","node-key":"id","default-expanded-keys":[2,3],"default-checked-keys":[5],props:e.defaultProps}})]],2)},n=[],t={data:function(){return{data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}],defaultProps:{children:"children",label:"label"}}}};return Object(r["a"])({render:e,staticRenderFns:n},t)}(),"df-demo5":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("df-tree",{attrs:{data:e.data,"show-checkbox":"","node-key":"id","default-expanded-keys":[2,3],"default-checked-keys":[5]}})]],2)},n=[],t={data:function(){return{data:[{id:1,label:"一级 2",children:[{id:3,label:"二级 2-1",children:[{id:4,label:"三级 3-1-1"},{id:5,label:"三级 3-1-2",disabled:!0}]},{id:2,label:"二级 2-2",disabled:!0,children:[{id:6,label:"三级 3-2-1"},{id:7,label:"三级 3-2-2",disabled:!0}]}]}],defaultProps:{children:"children",label:"label"}}}};return Object(r["a"])({render:e,staticRenderFns:n},t)}(),"df-demo6":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("df-tree",{attrs:{data:e.data,"show-checkbox":"","node-key":"id","default-expanded-keys":[2,3],"default-checked-keys":[5],"node-disabled-func":e.nodeDisabledFunc}})]],2)},n=[],t={data:function(){return{data:[{id:1,label:"一级 2",children:[{id:3,label:"二级 2-1",children:[{id:4,label:"三级 3-1-1"},{id:5,label:"三级 3-1-2",disabled:!0}]},{id:2,label:"二级 2-2",disabled:!0,children:[{id:6,label:"三级 3-2-1"},{id:7,label:"三级 3-2-2",disabled:!0}]}]}],defaultProps:{children:"children",label:"label"}}},methods:{nodeDisabledFunc:function(e,n){return"一级 2"===n.label||"二级 2-1"===n.label}}};return Object(r["a"])({render:e,staticRenderFns:n},t)}(),"df-demo7":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("df-tree",{ref:"tree",attrs:{data:e.data,"show-checkbox":"","default-expand-all":"","node-key":"id","highlight-current":"",props:e.defaultProps}})],e._v(" "),t("div",{staticClass:"buttons"},[t("df-button",{on:{click:e.getCheckedNodes}},[e._v("通过 node 获取")]),e._v(" "),t("df-button",{on:{click:e.getCheckedKeys}},[e._v("通过 key 获取")]),e._v(" "),t("df-button",{on:{click:e.setCheckedNodes}},[e._v("通过 node 设置")]),e._v(" "),t("df-button",{on:{click:e.setCheckedKeys}},[e._v("通过 key 设置")]),e._v(" "),t("df-button",{on:{click:e.resetChecked}},[e._v("清空")])],1)],2)},n=[],t={methods:{getCheckedNodes:function(){console.log(this.$refs.tree.getCheckedNodes())},getCheckedKeys:function(){console.log(this.$refs.tree.getCheckedKeys())},setCheckedNodes:function(){this.$refs.tree.setCheckedNodes([{id:5,label:"二级 2-1"},{id:9,label:"三级 1-1-1"}])},setCheckedKeys:function(){this.$refs.tree.setCheckedKeys([3])},resetChecked:function(){this.$refs.tree.setCheckedKeys([])}},data:function(){return{data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}],defaultProps:{children:"children",label:"label"}}}};return Object(r["a"])({render:e,staticRenderFns:n},t)}(),"df-demo8":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("div",{staticClass:"custom-tree-container"},[t("div",{staticClass:"block"},[t("p",[e._v("使用 render-content")]),e._v(" "),t("df-tree",{attrs:{data:e.data,"show-checkbox":"","node-key":"id","default-expand-all":"","expand-on-click-node":!1,"render-content":e.renderContent}})],1),e._v(" "),t("div",{staticClass:"block"},[t("p",[e._v("使用 scoped slot")]),e._v(" "),t("df-tree",{attrs:{data:e.data,"show-checkbox":"","node-key":"id","default-expand-all":"","expand-on-click-node":!1},scopedSlots:e._u([{key:"default",fn:function(n){var d=n.node,a=n.data;return t("span",{staticClass:"custom-tree-node"},[t("span",[e._v(e._s(d.label))]),e._v(" "),t("span",[t("df-button",{attrs:{type:"text",size:"mini"},on:{click:function(){return e.append(a)}}},[e._v("\n              Append\n            ")]),e._v(" "),t("df-button",{attrs:{type:"text",size:"mini"},on:{click:function(){return e.remove(d,a)}}},[e._v("\n              Delete\n            ")])],1)])}}])})],1)])]],2)},n=[],t=1e3,d={data:function(){var e=[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}];return Object(l["a"])({data:JSON.parse(JSON.stringify(e))},"data",JSON.parse(JSON.stringify(e)))},methods:{append:function(e){var n={id:t++,label:"testtest",children:[]};e.children||this.$set(e,"children",[]),e.children.push(n)},remove:function(e,n){var t=e.parent,d=t.data.children||t.data,a=d.findIndex((function(e){return e.id===n.id}));d.splice(a,1)},renderContent:function(e,n){var t=this,d=n.node,a=n.data;n.store;return e("span",{class:"custom-tree-node"},[e("span",[d.label]),e("span",[e("df-button",{attrs:{size:"mini",type:"text"},on:{click:function(){return t.append(a)}}},["Append"]),e("df-button",{attrs:{size:"mini",type:"text"},on:{click:function(){return t.remove(d,a)}}},["Delete"])])])}}};return Object(r["a"])({render:e,staticRenderFns:n},d)}(),"df-demo9":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("div",[t("df-input",{attrs:{placeholder:"输入关键字进行过滤"},model:{value:e.filterText,callback:function(n){e.filterText=n},expression:"filterText"}}),e._v(" "),t("df-tree",{ref:"tree",staticClass:"filter-tree",attrs:{data:e.data,props:e.defaultProps,"default-expand-all":"","filter-node-method":e.filterNode}})],1)]],2)},n=[],t={watch:{filterText:function(e){this.$refs.tree.filter(e)}},methods:{filterNode:function(e,n){return!e||-1!==n.label.indexOf(e)}},data:function(){return{filterText:"",data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}],defaultProps:{children:"children",label:"label"}}}};return Object(r["a"])({render:e,staticRenderFns:n},t)}(),"df-demo10":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("df-tree",{attrs:{data:e.data,props:e.defaultProps,accordion:""},on:{"node-click":e.handleNodeClick}})]],2)},n=[],t={data:function(){return{data:[{label:"一级 1",children:[{label:"二级 1-1",children:[{label:"三级 1-1-1"}]}]},{label:"一级 2",children:[{label:"二级 2-1",children:[{label:"三级 2-1-1"}]},{label:"二级 2-2",children:[{label:"三级 2-2-1"}]}]},{label:"一级 3",children:[{label:"二级 3-1",children:[{label:"三级 3-1-1"}]},{label:"二级 3-2",children:[{label:"三级 3-2-1"}]}]}],defaultProps:{children:"children",label:"label"}}},methods:{handleNodeClick:function(e){console.log(e)}}};return Object(r["a"])({render:e,staticRenderFns:n},t)}(),"df-demo11":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("df-tree",{attrs:{data:e.data,"node-key":"id","default-expand-all":"",draggable:"","allow-drop":e.allowDrop,"allow-drag":e.allowDrag},on:{"node-drag-start":e.handleDragStart,"node-drag-enter":e.handleDragEnter,"node-drag-leave":e.handleDragLeave,"node-drag-over":e.handleDragOver,"node-drag-end":e.handleDragEnd,"node-drop":e.handleDrop}})]],2)},n=[],t={data:function(){return{data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2",children:[{id:11,label:"三级 3-2-1"},{id:12,label:"三级 3-2-2"},{id:13,label:"三级 3-2-3"}]}]}],defaultProps:{children:"children",label:"label"}}},methods:{handleDragStart:function(e,n){console.log("drag start",e)},handleDragEnter:function(e,n,t){console.log("tree drag enter: ",n.label)},handleDragLeave:function(e,n,t){console.log("tree drag leave: ",n.label)},handleDragOver:function(e,n,t){console.log("tree drag over: ",n.label)},handleDragEnd:function(e,n,t,d){console.log("tree drag end: ",n&&n.label,t)},handleDrop:function(e,n,t,d){console.log("tree drop: ",n.label,t)},allowDrop:function(e,n,t){return"二级 3-1"!==n.data.label||"inner"!==t},allowDrag:function(e){return-1===e.data.label.indexOf("三级 3-2-2")}}};return Object(r["a"])({render:e,staticRenderFns:n},t)}(),"df-demo12":function(){var e=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("div",[t("df-tree",{attrs:{data:e.data,props:e.defaultProps,"need-operations":"","set-operations":e.setOperations,"hidden-operations":e.hiddenOperations,"loading-operations":e.loadingOperations,"disabled-operations":e.disabledOperations},on:{"node-click":e.handleNodeClick,"operation-click":e.operationClick}}),e._v(" "),t("br"),e._v(" "),t("df-button",{on:{click:function(n){return n.stopPropagation(),e.hideOperation.apply(null,arguments)}}},[e._v("隐藏第一个节点的第一个操作")]),e._v(" "),t("df-button",{on:{click:function(n){return n.stopPropagation(),e.showOperation.apply(null,arguments)}}},[e._v("显示第一个节点的第一个操作")]),e._v(" "),t("br"),t("br"),e._v(" "),t("df-button",{on:{click:function(n){return n.stopPropagation(),e.loadingOperation.apply(null,arguments)}}},[e._v("设置第二个节点的操作组为 loading")]),e._v(" "),t("df-button",{on:{click:function(n){return n.stopPropagation(),e.unLoadingOperation.apply(null,arguments)}}},[e._v("清除所有操作的 loading")]),e._v(" "),t("br"),t("br"),e._v(" "),t("df-button",{on:{click:function(n){return n.stopPropagation(),e.disableOperation.apply(null,arguments)}}},[e._v("设置第三个节点第一个操作为 disabled")]),e._v(" "),t("df-button",{on:{click:function(n){return n.stopPropagation(),e.enableOperation.apply(null,arguments)}}},[e._v("清除第三个节点第一个操作的 disabled")])],1)]],2)},n=[],t={data:function(){return{data:[{id:1,label:"一级 1",children:[{id:11,label:"二级 1-1",children:[{id:111,label:"三级 1-1-1"},{id:112,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:21,label:"二级 2-1"},{id:22,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:31,label:"二级 3-1"},{id:32,label:"二级 3-2"}]}],defaultProps:{children:"children",label:"label"},hiddenOperations:[],loadingOperations:[],disabledOperations:[{operationIndex:2,id:1}]}},methods:{handleNodeClick:function(e){console.log(e)},setOperations:function(e){return 1===e.data.id?["订单","方法","刚刚"]:["请求","哇哇","嗯嗯"]},operationClick:function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];console.log(n)},hideOperation:function(){this.hiddenOperations.push({operationIndex:0,id:1})},showOperation:function(){this.hiddenOperations=[]},loadingOperation:function(){this.loadingOperations.push({operationIndex:0,id:2},{operationIndex:1,id:2},{operationIndex:2,id:2})},unLoadingOperation:function(){this.loadingOperations=[]},disableOperation:function(){this.disabledOperations.push({operationIndex:0,id:3})},enableOperation:function(){this.disabledOperations=[]}}};return Object(r["a"])({render:e,staticRenderFns:n},t)}()}}),i=o,c=t("2877"),s=Object(c["a"])(i,d,a,!1,null,null,null);n["default"]=s.exports}}]);
//# sourceMappingURL=chunk-2d0efccc.64d56aa9.js.map