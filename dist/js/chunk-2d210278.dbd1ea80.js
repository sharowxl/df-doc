(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d210278"],{b74a:function(e,t,n){"use strict";n.r(t);var o=function(){var e=this,t=e._self._c;return t("section",{staticClass:"content df-doc"},[e._m(0),t("p",[e._v("将 table 组件关于编辑的部分集中到这里统一介绍。")]),e._m(1),t("p",[e._v("使用插槽来自己定义编辑的内容。")]),t("demo-block",[t("div",[t("p",[e._v("配置"),t("code",[e._v("mode")]),e._v("为"),t("code",[e._v("slot")]),e._v("即可，注意在这样的情况下，编辑主要是由插槽来决定的，你需要定义好具名插槽"),t("code",[e._v("slots.editing")]),e._v("里的内容，事件及方法参见下方文档。")])]),t("template",{slot:"source"},[t("df-demo0")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <df-table\n    :data="tableData"\n    :columnOptions="columnOptions"\n    style="width: 100%"\n    ref="table"\n    @edit-disabled="cellEditDisabled"\n    @switch-to-editing-slot="switchToEditingSlot"\n    @restore-editing-slot="restoreEditingSlot">\n    <df-table-column prop="date" label="日期" width="180">\n      <div slot="editing" slot-scope="scope" style="display: flex">\n        <df-input v-model="scope.row.date" />\n        <df-button type="text" @click="saveEdit(scope.column.property, scope.$index)">保存</df-button>\n      </div>\n    </df-table-column>\n    <df-table-column prop="name" label="姓名" width="180">\n      <div slot="editing" slot-scope="scope">\n        <df-button type="primary" @click="saveEdit(scope.column.property, scope.$index)">关闭编辑插槽</df-button>\n      </div>\n    </df-table-column>\n    <df-table-column prop="address" label="地址">\n      <div slot="editing" slot-scope="scope">\n        <df-button @click="saveEdit(scope.column.property, scope.$index)">关闭编辑插槽</df-button>\n      </div>\n    </df-table-column>\n  </df-table>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: \'click\',\n          mode: \'slot\',\n          editableColumns: [\n            {\n              columnProp: \'date\',\n              disableRowsIndex: [0]\n            },\n            \'name\',\n            \'address\'\n          ]\n        }\n      },\n      tableData: [{\n        date: \'2016-05-02\',\n        name: \'李时珍\',\n        address: \'四川省武当山普陀区金沙江路 1518 弄\'\n      }, {\n        date: \'2016-05-04\',\n        name: \'李时珍\',\n        address: \'四川省武当山普陀区金沙江路 1517 弄\'\n      }, {\n        date: \'2016-05-01\',\n        name: \'李时珍\',\n        address: \'四川省武当山普陀区金沙江路 1519 弄\'\n      }, {\n        date: \'2016-05-03\',\n        name: \'李时珍\',\n        address: \'四川省武当山普陀区金沙江路 1516 弄\'\n      }]\n    }\n  },\n  methods: {\n    saveEdit (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message(\'此单元格禁止编辑！\')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(2),t("p",[e._v("提供回调函数, 便捷的控制单元格或行的编辑禁用。")]),t("demo-block",[t("div",[t("p",[e._v("使用 rowDisableFunc 函数直接控制一整行的编辑禁用, 使用 disableRowsIndex 函数控制某些单元格的编辑禁用。")])]),t("template",{slot:"source"},[t("df-demo1")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <df-table\n    :data="tableData"\n    :columnOptions="columnOptions"\n    style="width: 100%"\n    ref="table"\n    @edit-disabled="cellEditDisabled"\n    @switch-to-editing-slot="switchToEditingSlot"\n    @restore-editing-slot="restoreEditingSlot">\n    <df-table-column prop="date" label="日期" width="180">\n      <div slot="editing" slot-scope="scope" style="display: flex">\n        <df-input v-model="scope.row.date" />\n        <df-button type="text" @click="saveEdit(scope.column.property, scope.$index)">保存</df-button>\n      </div>\n    </df-table-column>\n    <df-table-column prop="name" label="姓名" width="180">\n      <div slot="editing" slot-scope="scope">\n        <df-button type="primary" @click="saveEdit(scope.column.property, scope.$index)">关闭编辑插槽</df-button>\n      </div>\n    </df-table-column>\n    <df-table-column prop="address" label="地址">\n      <div slot="editing" slot-scope="scope">\n        <df-button @click="saveEdit(scope.column.property, scope.$index)">关闭编辑插槽</df-button>\n      </div>\n    </df-table-column>\n  </df-table>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: \'click\',\n          mode: \'slot\',\n          // rowDisableFunc 函数可以直接控制一整行的编辑禁用, 函数自动接收两个参数(行数据, 行下标)\n          rowDisableFunc: (row, rowIndex) => {\n            return row.disableRow\n          },\n          editableColumns: [\n            {\n              columnProp: \'date\',\n              disableRowsIndex: [2]\n            },\n            {\n              columnProp: \'name\',\n              // disableRowsIndex 可以写成函数, 来动态的判断某个单元格的编辑禁用, 函数自动接收两个参数(行数据, 行下标)\n              disableRowsIndex: (row, rowIndex) => {\n                return row.disableName\n              }\n            },\n            \'address\'\n          ]\n        }\n      },\n      tableData: [{\n        date: \'2016-05-02\',\n        name: \'李时珍\',\n        address: \'四川省武当山普陀区金沙江路 1518 弄\',\n        disableRow: true\n      }, {\n        date: \'2016-05-04\',\n        name: \'李时珍\',\n        address: \'四川省武当山普陀区金沙江路 1517 弄\',\n        disableRow: false,\n        disableName: true\n      }, {\n        date: \'2016-05-01\',\n        name: \'李时珍\',\n        address: \'四川省武当山普陀区金沙江路 1519 弄\',\n        disableRow: false\n      }, {\n        date: \'2016-05-03\',\n        name: \'李时珍\',\n        address: \'四川省武当山普陀区金沙江路 1516 弄\',\n        disableRow: false\n      }]\n    }\n  },\n  methods: {\n    saveEdit (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message(\'此单元格禁止编辑！\')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(3),t("p",[e._v("校验表格的数据是否符合规则，一般和表格编辑一起使用。")]),t("demo-block",[t("div",[t("p",[e._v("传入"),t("code",[e._v("columnOptions")]),e._v("，配置"),t("code",[e._v("validateConfig")]),e._v("以启用表格数据校验，在某些时机，主动调用校验方法，以验证某些数据是否正确，一般在进行了一次编辑之后，应该校验一下当前行的数据。配置"),t("code",[e._v("needErrTips")]),e._v("以实现当某一单元格被检查出问题后，为单元格添加红色背景及鼠标浮动提示。每一列的校验规则"),t("code",[e._v("rules")]),e._v("是一个数组，里面放所有的规则，这里和 "),t("a",{attrs:{href:"#/component/form"}},[e._v("表单校验")]),e._v(" 是一致的，都是用的 "),t("a",{attrs:{href:"https://github.com/yiminghe/async-validator"}},[e._v("async-validator")]),e._v(" 的规则，你也可以将 "),t("code",[e._v("rules")]),e._v(" 配置为函数以动态设置 "),t("code",[e._v("rules")]),e._v("，函数自动接收两个参数(行数据, 行下标)，针对不同行设置不同的规则，具体参见下面表格 "),t("code",[e._v("name")]),e._v(" 列的校验规则示例")])]),t("template",{slot:"source"},[t("df-demo2")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <div>\n    <df-table\n      :data="tableData"\n      :columnOptions="columnOptions"\n      ref="table"\n      style="width: 100%;margin-bottom: 20px"\n      @edit-disabled="cellEditDisabled"\n      @switch-to-editing-slot="switchToEditingSlot"\n      @restore-editing-slot="restoreEditingSlot">\n      <df-table-column prop="date" label="日期" width="180">\n        <div slot="editing" slot-scope="scope" style="display: flex">\n          <df-input v-model="scope.row.date" style="width: 100px" />\n          <df-button type="text" @click="saveEditThenCheckCurrentRow(scope.column.property, scope.$index)">保存</df-button>\n        </div>\n      </df-table-column>\n      <df-table-column prop="name" label="姓名" width="180">\n        <div slot="editing" slot-scope="scope">\n          <df-input v-model="scope.row.name" style="width: 100px" />\n          <df-button type="text" @click="saveEditThenCheckCurrentRow(scope.column.property, scope.$index)">保存</df-button>\n        </div>\n      </df-table-column>\n      <df-table-column prop="address" label="地址">\n        <div slot="editing" slot-scope="scope">\n          <df-input v-model="scope.row.address" style="width: 200px" />\n          <df-button type="text" @click="saveEditThenCheckCurrentRow(scope.column.property, scope.$index)">保存</df-button>\n        </div>\n      </df-table-column>\n    </df-table>\n    <df-button @click="validateCell(0, \'name\')">检查第一行name的数据</df-button>\n    <df-button @click="validateCell(2, \'name\')">检查第三行name的数据</df-button>\n    <df-button @click="validateRow(0)">检查第一行的数据</df-button>\n    <df-button @click="validateRows([2, 3])">检查后两行的数据</df-button>\n    <df-button @click="validateAll">检查表格的所有数据</df-button>\n    <div style="height: 10px"></div>\n    <df-button @click="clearCellValidate(0, \'name\')">清除第一行name的检查</df-button>\n    <df-button @click="clearCellValidate(2, \'name\')">清除第三行name的检查</df-button>\n    <df-button @click="clearRowValidate(0)">清除第一行的检查</df-button>\n    <df-button @click="clearRowsValidate([2, 3])">清除后两行的检查</df-button>\n    <df-button @click="clearAllValidate">清除表格的所有检查</df-button>\n    <div style="height: 10px"></div>\n    <df-button @click="saveAllEditThenCheck">保存所有编辑并检查结果</df-button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: \'click\',\n          mode: \'slot\',\n          editableColumns: [\n            {\n              columnProp: \'date\',\n              disableRowsIndex: [0]\n            },\n            {\n              columnProp: \'name\'\n            },\n            {\n              columnProp: \'address\'\n            }\n          ]\n        },\n        validateConfig: {\n          needErrTips: true,\n          columnRules: [\n            {\n              columnProp: \'date\',\n              rules: [\n                { required: true, message: \'请输入日期\' }\n              ],\n              ignoredRowsIndex: [0]\n            },\n            {\n              columnProp: \'name\',\n              // 将 rules 配置为函数以动态设置 rules，函数自动接收两个参数(行数据, 行下标)，对于本示例，如果是第一行，校验规则为必输，如果是其它行，则校验规则改为长度最少为 2\n              rules: (row, rowIndex) => {\n                if (rowIndex === 0) return [{ required: true, message: \'请输入姓名\' }]\n                else return [{ min: 2, message: \'姓名长度至少是两个字符\' }]\n              }\n            },\n            {\n              columnProp: \'address\',\n              rules: [\n                { required: true, message: \'请输入地址\' },\n                { max: 20, message: \'地址最多是二十个字符\' }\n              ]\n            }\n          ]\n        }\n      },\n      tableData: [{\n        date: \'\',\n        name: \'\',\n        address: \'四川省武当山普陀区金沙江路 1518 弄\'\n      }, {\n        date: \'2016-05-04\',\n        name: \'李\',\n        address: \'四川省武当山普陀区金沙江路 1517 弄 超出的字符\',\n      }, {\n        date: \'\',\n        name: \'李\',\n        address: \'四川省武当山普陀区金沙江路 1519 弄 超出的字符\'\n      }, {\n        date: \'2016-05-03\',\n        name: \'李时珍\',\n        address: \'四川省武当山普陀区金沙江路 1519 弄 超出的字符\'\n      }]\n    }\n  },\n  methods: {\n    saveEditThenCheckCurrentRow (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n      this.validateRow(rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message(\'此单元格禁止编辑！\')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    },\n    validateCell (rowIndex, columnProp) {\n      this.$refs.table.validateCell(columnProp, rowIndex).then(checkRes => {\n        console.log(`第 ${rowIndex + 1} 行 ${columnProp} 的检查结果:`, checkRes)\n      })\n    },\n    validateRow (rowIndex) {\n      this.$refs.table.validateRow(rowIndex).then(checkRes => {\n        console.log(`第 ${rowIndex} 行的检查结果:`, checkRes)\n      })\n    },\n    validateRows (rowIndexes) {\n      this.$refs.table.validateRows(rowIndexes).then(checkRes => {\n        console.log(`第 ${rowIndexes} 行的检查结果:`, checkRes)\n      })\n    },\n    validateAll () {\n      this.$refs.table.validateAll().then(checkRes => {\n        console.log(\'所有数据检查结果:\', checkRes)\n      })\n    },\n    clearCellValidate (rowIndex, columnProp) {\n      this.$refs.table.clearCellValidate(columnProp, rowIndex)\n    },\n    clearRowValidate (rowIndex) {\n      this.$refs.table.clearRowValidate(rowIndex)\n    },\n    clearRowsValidate (rowIndexes) {\n      this.$refs.table.clearRowsValidate(rowIndexes)\n    },\n    clearAllValidate () {\n      this.$refs.table.clearAllValidate()\n    },\n    saveAllEditThenCheck () {\n      this.$refs.table.restoreAllEditingSlot()\n      this.validateAll()\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(4),t("p",[e._v("提供回调函数, 便捷的控制单元格或行的校验忽略。")]),t("demo-block",[t("div",[t("p",[e._v("使用 rowIgnoredFunc 函数直接控制一整行的校验忽略, 使用 ignoredRowsIndex 函数控制某些单元格的校验忽略。")])]),t("template",{slot:"source"},[t("df-demo3")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <div>\n    <df-table\n      :data="tableData"\n      :columnOptions="columnOptions"\n      ref="table"\n      style="width: 100%;margin-bottom: 20px"\n      @edit-disabled="cellEditDisabled"\n      @switch-to-editing-slot="switchToEditingSlot"\n      @restore-editing-slot="restoreEditingSlot">\n      <df-table-column prop="date" label="日期" width="180">\n        <div slot="editing" slot-scope="scope" style="display: flex">\n          <df-input v-model="scope.row.date" style="width: 100px" />\n          <df-button type="text" @click="saveEditThenCheckCurrentRow(scope.column.property, scope.$index)">保存</df-button>\n        </div>\n      </df-table-column>\n      <df-table-column prop="name" label="姓名" width="180">\n        <div slot="editing" slot-scope="scope">\n          <df-input v-model="scope.row.name" style="width: 100px" />\n          <df-button type="text" @click="saveEditThenCheckCurrentRow(scope.column.property, scope.$index)">保存</df-button>\n        </div>\n      </df-table-column>\n      <df-table-column prop="address" label="地址">\n        <div slot="editing" slot-scope="scope">\n          <df-input v-model="scope.row.address" style="width: 200px" />\n          <df-button type="text" @click="saveEditThenCheckCurrentRow(scope.column.property, scope.$index)">保存</df-button>\n        </div>\n      </df-table-column>\n    </df-table>\n    <df-button @click="validateCell(0, \'name\')">检查第一行name的数据</df-button>\n    <df-button @click="validateCell(2, \'name\')">检查第三行name的数据</df-button>\n    <df-button @click="validateRow(0)">检查第一行的数据</df-button>\n    <df-button @click="validateRows([2, 3])">检查后两行的数据</df-button>\n    <df-button @click="validateAll">检查表格的所有数据</df-button>\n    <div style="height: 10px"></div>\n    <df-button @click="clearCellValidate(0, \'name\')">清除第一行name的检查</df-button>\n    <df-button @click="clearCellValidate(2, \'name\')">清除第三行name的检查</df-button>\n    <df-button @click="clearRowValidate(0)">清除第一行的检查</df-button>\n    <df-button @click="clearRowsValidate([2, 3])">清除后两行的检查</df-button>\n    <df-button @click="clearAllValidate">清除表格的所有检查</df-button>\n    <div style="height: 10px"></div>\n    <df-button @click="saveAllEditThenCheck">保存所有编辑并检查结果</df-button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: \'click\',\n          mode: \'slot\',\n          editableColumns: [\n            {\n              columnProp: \'date\',\n              disableRowsIndex: [0]\n            },\n            {\n              columnProp: \'name\'\n            },\n            {\n              columnProp: \'address\'\n            }\n          ]\n        },\n        validateConfig: {\n          needErrTips: true,\n          // rowIgnoredFunc 函数可以直接控制一整行的校验忽略, 函数自动接收两个参数(行数据, 行下标)\n          rowIgnoredFunc: (row, rowIndex) => {\n            return row.ignoreRow\n          },\n          columnRules: [\n            {\n              columnProp: \'date\',\n              rules: [\n                { required: true, message: \'请输入日期\' }\n              ],\n              ignoredRowsIndex: [0]\n            },\n            {\n              columnProp: \'name\',\n              // 将 rules 配置为函数以动态设置 rules，函数自动接收两个参数(行数据, 行下标)，对于本示例，如果是第一行，校验规则为必输，如果是其它行，则校验规则改为长度最少为 2\n              rules: (row, rowIndex) => {\n                if (rowIndex === 0) return [{ required: true, message: \'请输入姓名\' }]\n                else return [{ min: 2, message: \'姓名长度至少是两个字符\' }]\n              }\n            },\n            {\n              columnProp: \'address\',\n              rules: [\n                { required: true, message: \'请输入地址\' },\n                { max: 20, message: \'地址最多是二十个字符\' }\n              ],\n              // ignoredRowsIndex 可以写成函数, 来动态的判断某个单元格的校验忽略, 函数自动接收两个参数(行数据, 行下标)\n              ignoredRowsIndex: (row, rowIndex) => {\n                return row.ignoreAddressValidate\n              }\n            }\n          ]\n        }\n      },\n      tableData: [{\n        date: \'\',\n        name: \'\',\n        address: \'四川省武当山普陀区金沙江路 1518 弄\'\n      }, {\n        date: \'2016-05-04\',\n        name: \'李\',\n        address: \'四川省武当山普陀区金沙江路 1517 弄 超出的字符\'\n      }, {\n        date: \'\',\n        name: \'李\',\n        address: \'四川省武当山普陀区金沙江路 1519 弄 超出的字符\',\n        ignoreAddressValidate: true\n      }, {\n        date: \'2016-05-03\',\n        name: \'李时珍\',\n        address: \'四川省武当山普陀区金沙江路 1519 弄 超出的字符\',\n        ignoreRow: true\n      }]\n    }\n  },\n  methods: {\n    saveEditThenCheckCurrentRow (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n      this.validateRow(rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message(\'此单元格禁止编辑！\')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    },\n    validateCell (rowIndex, columnProp) {\n      this.$refs.table.validateCell(columnProp, rowIndex).then(checkRes => {\n        console.log(`第 ${rowIndex + 1} 行 ${columnProp} 的检查结果:`, checkRes)\n      })\n    },\n    validateRow (rowIndex) {\n      this.$refs.table.validateRow(rowIndex).then(checkRes => {\n        console.log(`第 ${rowIndex} 行的检查结果:`, checkRes)\n      })\n    },\n    validateRows (rowIndexes) {\n      this.$refs.table.validateRows(rowIndexes).then(checkRes => {\n        console.log(`第 ${rowIndexes} 行的检查结果:`, checkRes)\n      })\n    },\n    validateAll () {\n      this.$refs.table.validateAll().then(checkRes => {\n        console.log(\'所有数据检查结果:\', checkRes)\n      })\n    },\n    clearCellValidate (rowIndex, columnProp) {\n      this.$refs.table.clearCellValidate(columnProp, rowIndex)\n    },\n    clearRowValidate (rowIndex) {\n      this.$refs.table.clearRowValidate(rowIndex)\n    },\n    clearRowsValidate (rowIndexes) {\n      this.$refs.table.clearRowsValidate(rowIndexes)\n    },\n    clearAllValidate () {\n      this.$refs.table.clearAllValidate()\n    },\n    saveAllEditThenCheck () {\n      this.$refs.table.restoreAllEditingSlot()\n      this.validateAll()\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(5),t("p",[e._v("通过监听输入组件的键盘操作，以实现编辑插槽的切换，各类型输入组件应监听事件见下表。注意，一般来讲键盘操作是需要结合表格检验的，即按下 enter 即将切换到下一单元格时，需要先检验当前单元格的内容是否正确，再进行一下步操作，可参考本示例。")]),e._m(6),t("demo-block",[t("div",[t("p",[e._v("第一步，监听 slots.editing 里输入框的 enter 事件，第二步，检验当前单元格内容是否符合规则，若不符合规则，需要给予提示，若符合规则，则调用 table 的 getNextEditableSlot 方法找到下一个可编辑的插槽位置，然后开启它的编辑。")])]),t("template",{slot:"source"},[t("df-demo4")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <df-table\n    :data="tableData"\n    :columnOptions="columnOptions"\n    style="width: 100%"\n    ref="table"\n    row-key="id"\n    @edit-disabled="cellEditDisabled"\n    @switch-to-editing-slot="switchToEditingSlot"\n    @restore-editing-slot="restoreEditingSlot">\n    <df-table-column\n      type="index"\n    />\n    <df-table-column prop="date" label="日期" width="180">\n      <div slot="editing" slot-scope="scope">\n        <df-input :ref="`${scope.column.property}-${scope.$index}`" v-model="scope.row.date" @enterKeyDown="enterKeyDown(scope.column.property, scope.$index)" @blur="saveEdit(scope.column.property, scope.$index)" />\n      </div>\n    </df-table-column>\n    <df-table-column prop="name" label="姓名" width="180">\n      <div slot="editing" slot-scope="scope">\n        <df-input :ref="`${scope.column.property}-${scope.$index}`" v-model="scope.row.name" @enterKeyDown="enterKeyDown(scope.column.property, scope.$index)" @blur="saveEdit(scope.column.property, scope.$index)" />\n      </div>\n    </df-table-column>\n    <df-table-column prop="gender" label="性别" width="180">\n      <div slot="editing" slot-scope="scope">\n        <df-select :ref="`${scope.column.property}-${scope.$index}`" v-model="scope.row.gender" @enterKeyDown="enterKeyDown(scope.column.property, scope.$index)" @blur="saveEdit(scope.column.property, scope.$index)">\n          <df-option value="男"></df-option>\n          <df-option value="女"></df-option>\n        </df-select>\n      </div>\n    </df-table-column>\n    <df-table-column prop="address" label="地址">\n      <div slot="editing" slot-scope="scope">\n        <df-input :ref="`${scope.column.property}-${scope.$index}`" v-model="scope.row.address" @enterKeyDown="enterKeyDown(scope.column.property, scope.$index)" @blur="saveEdit(scope.column.property, scope.$index)" />\n      </div>\n    </df-table-column>\n  </df-table>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: \'click\',\n          mode: \'slot\',\n          editableColumns: [\n            {\n              columnProp: \'date\',\n              disableRowsIndex: [0]\n            },\n            \'name\',\n            \'gender\',\n            \'address\'\n          ]\n        },\n        validateConfig: {\n          needErrTips: true,\n          columnRules: [\n            {\n              columnProp: \'date\',\n              rules: [\n                { required: true, message: \'请输入日期\' }\n              ]\n            },\n            {\n              columnProp: \'name\',\n              rules: [\n                { required: true, message: \'请输入姓名\' },\n                { min: 2, message: \'姓名长度至少是两个字符\' }\n              ]\n            },\n            {\n              columnProp: \'gender\',\n              rules: [\n                { required: true, message: \'请选择性别\' }\n              ]\n            },\n            {\n              columnProp: \'address\',\n              rules: [\n                { required: true, message: \'请输入地址\' },\n                { max: 20, message: \'地址最多是二十个字符\' }\n              ]\n            }\n          ]\n        }\n      },\n      tableData: [{\n        id: \'4\',\n        date: \'2016-05-02\',\n        name: \'李时珍\',\n        gender: \'男\',\n        address: \'四川省武当山普陀区金沙江路 1518 弄\'\n      }, {\n        id: \'5\',\n        date: \'2016-05-04\',\n        name: \'李时珍\',\n        gender: \'女\',\n        address: \'四川省武当山普陀区金沙江路 1517 弄\'\n      }, {\n        id: \'6\',\n        date: \'2016-05-01\',\n        name: \'\',\n        gender: \'\',\n        address: \'四川省武当山普陀区金沙江路 1519 弄\'\n      }, {\n        id: \'7\',\n        date: \'2016-05-03\',\n        name: \'李时珍\',\n        gender: \'男\',\n        address: \'四川省武当山普陀区金沙江路 1516 弄\'\n      }]\n    }\n  },\n  methods: {\n    saveEdit (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message(\'此单元格禁止编辑！\')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n      this.$nextTick(() => {\n        this.$refs[`${columnProp}-${rowIndex}`].focus()\n      })\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    },\n    enterKeyDown (currentColumnProp, currentRowIndex) {\n      console.log(`当前按下 enter 键的单元格是第 ${currentRowIndex + 1} 行的 ${currentColumnProp} 列`)\n      this.$refs.table.validateCell(currentColumnProp, currentRowIndex)\n        .then(res => {\n          console.log(\'当前单元格校验结果\', res)\n          if (res.message) { // 校验不通过，应给与提示，不要自动切到下一单元格\n            this.$message({\n              message: res.message,\n              type: \'warning\'\n            })\n          } else { // 校验通过，自动切到下一单元格\n            const {columnProp, rowIndex, isFirstEditableSlot} = this.$refs.table.getNextEditableSlot(currentColumnProp, currentRowIndex)\n            console.log(`它下一个可编辑单元格是第 ${rowIndex + 1} 行的 ${columnProp} 列`)\n            if (isFirstEditableSlot) { // isFirstEditableSlot 为 true，表示下一个可编辑插槽位置是整张表的第一个可编辑 slot，换句话说，现在已经到了最后一个可编辑单元格了\n              this.$message({\n                message: \'已经到最后一个可编辑单元格了\',\n                type: \'warning\'\n              })\n            } else {\n              this.$refs.table.addEditingSlot(columnProp, rowIndex)\n            }\n          }\n        })\n    }\n  }\n}\n<\/script>\n\n')])])])],2),e._m(7),t("p",[e._v("插槽编辑 + 键盘操作 + 单元格校验 + 行编辑的示例。")]),t("demo-block",[t("template",{slot:"source"},[t("df-demo5")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <df-table\n    :data="tableData"\n    :columnOptions="columnOptions"\n    style="width: 100%"\n    ref="table"\n    @edit-disabled="cellEditDisabled"\n    @switch-to-editing-slot="switchToEditingSlot"\n    @restore-editing-slot="restoreEditingSlot"\n    @button-click="onButtonClick">\n    <df-table-column prop="name" label="姓名" width="180">\n      <div slot="editing" slot-scope="scope">\n        <df-input :ref="`${scope.column.property}-${scope.$index}`" v-model="scope.row.name" @enterKeyDown="enterKeyDown(scope.column.property, scope.$index)" />\n      </div>\n    </df-table-column>\n    <df-table-column prop="date" label="日期" width="180">\n      <div slot="editing" slot-scope="scope">\n        <df-date-picker\n          type="date"\n          placeholder="选择日期"\n          :ref="`${scope.column.property}-${scope.$index}`"\n          v-model="scope.row.date"\n          @enterKeyDown="enterKeyDown(scope.column.property, scope.$index)"\n        />\n      </div>\n    </df-table-column>\n    <df-table-column prop="gender" label="性别" width="180">\n      <div slot="editing" slot-scope="scope">\n        <df-select :ref="`${scope.column.property}-${scope.$index}`" v-model="scope.row.gender" @enterKeyDown="enterKeyDown(scope.column.property, scope.$index)">\n          <df-option value="男"></df-option>\n          <df-option value="女"></df-option>\n        </df-select>\n      </div>\n    </df-table-column>\n    <df-table-column prop="address" label="地址">\n      <div slot="editing" slot-scope="scope">\n        <df-input :ref="`${scope.column.property}-${scope.$index}`" v-model="scope.row.address" @enterKeyDown="enterKeyDown(scope.column.property, scope.$index)" />\n      </div>\n    </df-table-column>\n    <df-table-column\n      width="150"\n      type="buttons"\n      button-type="text"\n      :buttons="[\'新增\', \'编辑\']"\n    />\n  </df-table>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: \'click\',\n          mode: \'slot\',\n          editableColumns: [\n            \'name\',\n            \'date\',\n            \'gender\',\n            \'address\'\n          ]\n        },\n        validateConfig: {\n          needErrTips: true,\n          columnRules: [\n            {\n              columnProp: \'name\',\n              rules: [\n                { required: true, message: \'请输入姓名\' },\n                { min: 2, message: \'姓名长度至少是两个字符\' }\n              ]\n            },\n            {\n              columnProp: \'date\',\n              rules: [\n                { required: true, message: \'请输入日期\' }\n              ]\n            },\n            {\n              columnProp: \'gender\',\n              rules: [\n                { required: true, message: \'请选择性别\' }\n              ]\n            },\n            {\n              columnProp: \'address\',\n              rules: [\n                { required: true, message: \'请输入地址\' },\n                { max: 20, message: \'地址最多是二十个字符\' }\n              ]\n            }\n          ]\n        }\n      },\n      tableData: [{\n        name: \'李\',\n        date: \'2016-05-02\',\n        gender: \'\',\n        address: \'四川省武当山普陀区金沙江路 1518 弄\'\n      }]\n    }\n  },\n  methods: {\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message(\'此单元格禁止编辑！\')\n    },\n    switchToEditingSlot (columnProp, rowIndex, row, triggerType) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n      this.$refs.table.addRowEditingSlot(rowIndex) // 当某一单元格被切换到编辑状态时，开启器所在行的所有编辑\n      this.$refs.table.restoreAllEditingSlot({excludeMode: \'row\', excludeRowIndex: rowIndex}) // 然后关闭其他行的编辑\n      triggerType === \'click\' && this.$nextTick(() => {\n        this.$refs[`${columnProp}-${rowIndex}`].focus() // 自动聚焦当前单元格(只有这个单元格是通过点击触发编辑时, 才应该聚焦)\n      })\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    },\n    enterKeyDown (currentColumnProp, currentRowIndex) {\n      console.log(`当前按下 enter 键的单元格是第 ${currentRowIndex + 1} 行的 ${currentColumnProp} 列`)\n      this.$refs.table.validateCell(currentColumnProp, currentRowIndex)\n        .then(res => {\n          console.log(\'当前单元格校验结果\', res)\n          if (res.message) { // 校验不通过，应给与提示，不要自动切到下一单元格\n            this.$message({\n              message: res.message,\n              type: \'warning\'\n            })\n          } else { // 校验通过，自动切到下一单元格\n            const {columnProp, rowIndex, isFirstEditableSlot} = this.$refs.table.getNextEditableSlot(currentColumnProp, currentRowIndex)\n            console.log(`它下一个可编辑单元格是第 ${rowIndex + 1} 行的 ${columnProp} 列`)\n            if (isFirstEditableSlot) { // isFirstEditableSlot 为 true，表示下一个可编辑插槽位置是整张表的第一个可编辑 slot，换句话说，现在已经到了最后一个可编辑单元格了\n              this.$message({ message: \'当前是最后一个可编辑插槽了，所以自动新增一行\' })\n              this.add()\n            } else {\n              this.$refs.table.addEditingSlot(columnProp, rowIndex) // 这里调用一下添加编辑方法，主要是处理：当一行的最后一个 input 按下 enter 时，要保证能够开启到下一行\n              this.$nextTick(() => {\n                this.$refs[`${currentColumnProp}-${currentRowIndex}`] && this.$refs[`${currentColumnProp}-${currentRowIndex}`].blur() // focus 下一个 input 之前，先 blur 当前单元格input\n                this.$refs[`${columnProp}-${rowIndex}`].focus()\n              })\n            }\n          }\n        })\n    },\n    onButtonClick (button, buttonIndex, row, rowIndex) {\n      if (button === \'新增\') this.add()\n      if (button === \'编辑\') this.$refs.table.addRowEditingSlot(rowIndex)\n    },\n    add () {\n      this.tableData.push({\n        date: \'2016-05-02\',\n        name: \'李时珍\',\n        gender: \'男\',\n        address: \'四川省武当山普陀区金沙江路 1518 弄\'\n      })\n      // 添加一行数据之后，找到添加的数据的行下标，也就是最后一行，开启这一行的编辑\n      const addedRowIndex = this.tableData.length - 1\n      this.$refs.table.addRowEditingSlot(addedRowIndex)\n      this.$nextTick(() => {\n        this.$refs[`name-${addedRowIndex}`].focus() // 开启新一行的编辑之后自动聚焦到新一行的第一个单元格\n      })\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(8),t("demo-block",[t("div",[t("p",[e._v("支持树类型的数据的显示。当 row 中包含 "),t("code",[e._v("children")]),e._v(" 字段时，被视为树形数据。渲染树形数据时，必须要指定 "),t("code",[e._v("row-key")]),e._v("。支持子节点数据异步加载。设置 Table 的 "),t("code",[e._v("lazy")]),e._v(" 属性为 true 与加载函数 "),t("code",[e._v("load")]),e._v(" 。通过指定 row 中的 "),t("code",[e._v("hasChildren")]),e._v(" 字段来指定哪些行是包含子节点。"),t("code",[e._v("children")]),e._v(" 与 "),t("code",[e._v("hasChildren")]),e._v(" 都可以通过 "),t("code",[e._v("tree-props")]),e._v(" 配置。")])]),t("template",{slot:"source"},[t("df-demo6")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <div>\n    <df-button @click=\"handleClick\">获取树各层级rowKey</df-button>\n    <df-table\n      ref=\"table\"\n      :data=\"tableData\"\n      style=\"width: 100%;margin-bottom: 20px;\"\n      row-key=\"id\"\n      border\n      useTree\n      default-expand-all\n      :tree-props=\"{children: 'children', hasChildren: 'hasChildren'}\"\n      :columnOptions=\"columnOptions\"\n    >\n      <df-table-column\n        type=\"index\"\n        :index=\"indexMethod\"\n      />\n      <df-table-column\n        prop=\"date\"\n        label=\"日期\"\n        sortable\n        width=\"180\">\n      </df-table-column>\n      <df-table-column\n        prop=\"name\"\n        label=\"姓名\"\n        sortable\n        width=\"180\">\n        <template slot=\"editing\"  slot-scope=\"scope\">\n          <df-input v-model=\"scope.row.name\" style=\"width: 100px\" />\n        </template>\n      </df-table-column>\n      <df-table-column\n        prop=\"address\"\n        label=\"地址\">\n      </df-table-column>\n    </df-table>\n  </div>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        columnOptions: {\n          editConfig: {\n            trigger: 'click',\n            mode: 'slot',\n            editableColumns: [\n              {\n                columnProp: 'name',\n                disableRowsIndex: []\n              }\n            ]\n          }\n        },\n        tableData: [{\n          id: 1,\n          date: '2016-05-02',\n          name: '李时珍',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        }, {\n          id: 22,\n          date: '2016-05-04',\n          name: '李时珍',\n          address: '四川省武当山普陀区金沙江路 1517 弄'\n        }, {\n          id: 33,\n          date: '2016-05-01',\n          name: '李时珍',\n          address: '四川省武当山普陀区金沙江路 1519 弄',\n          children: [{\n              id: 31,\n              date: '2016-05-01',\n              name: '李时珍',\n              address: '四川省武当山普陀区金沙江路 1519 弄'\n            }, {\n              id: 32,\n              date: '2016-05-01',\n              name: '李时珍',\n              address: '四川省武当山普陀区金沙江路 1519 弄'\n          }]\n        }, {\n          id: 44,\n          date: '2016-05-03',\n          name: '李时珍',\n          address: '四川省武当山普陀区金沙江路 1516 弄'\n        }]\n      }\n    },\n    methods: {\n      handleClick () {\n        const level1 = this.$refs.table.getTreeRowKeysByLevel(1)\n        const level2 = this.$refs.table.getTreeRowKeysByLevel(2)\n        console.log('获取第一层id', level1)\n        console.log('获取第二层id', level2)\n        this.$set(this.columnOptions.editConfig.editableColumns[0], 'disableRowsIndex', level1)\n        this.$nextTick(() => this.$refs.table.addAllEditingSlot(true))\n      },\n      indexMethod(index) {\n        return index\n      }\n    }\n  }\n<\/script>\n")])])])],2),e._m(9),t("p",[e._v("使用插槽来自己定义表头编辑的内容。")]),t("demo-block",[t("div",[t("p",[e._v("表头编辑一般被用来跳转到此列的某一位置，编辑主要是由插槽来决定的，你需要定义好具名插槽"),t("code",[e._v("slots.headerEditing")]),e._v("里的内容，事件及方法参见下方文档。")])]),t("template",{slot:"source"},[t("df-demo7")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v('<template>\n  <div>\n    <df-table\n      :data="tableData"\n      :column-options="columnOptions"\n      style="width: 100%"\n      height="300"\n      ref="table">\n      <df-table-column type="expand">\n        <template slot-scope="props">\n          <df-form label-position="left" inline class="demo-table-expand">\n            <df-form-item label="编号">\n              <span>{{ props.row.id }}</span>\n            </df-form-item>\n            <df-form-item label="姓名">\n              <span>{{ props.row.name }}</span>\n            </df-form-item>\n            <df-form-item label="性别">\n              <span>{{ props.row.gender }}</span>\n            </df-form-item>\n            <df-form-item label="地址">\n              <span>{{ props.row.address }}</span>\n            </df-form-item>\n          </df-form>\n        </template>\n      </df-table-column>\n      <df-table-column prop="id" label="编号" width="180">\n        <df-select slot="headerEditing" slot-scope="scope" v-model="valueId" placeholder="请选择" @change="onIdChange" @blur="restoreHeaderEditingSlot(\'id\')">\n          <df-option\n            v-for="item in optionsId"\n            :key="item.value"\n            :label="item.label"\n            :value="item.value">\n          </df-option>\n        </df-select>\n      </df-table-column>\n      <df-table-column prop="name" label="姓名" width="180">\n        <df-input slot="headerEditing" slot-scope="scope" v-model="valueName" placeholder="输入行数并按下enter" @enterKeyDown="onNameEnterKeyDown" @blur="restoreHeaderEditingSlot(\'name\')"></df-input>\n      </df-table-column>\n      <df-table-column prop="gender" label="性别" width="180" />\n      <df-table-column prop="address" label="地址">\n        <df-button slot="headerEditing" slot-scope="scope" @click="scrollToRowWithRowIndex(23)">跳转到第24行</df-button>\n      </df-table-column>\n    </df-table>\n    <df-button @click="addHeaderEditingSlot(\'address\')" style="margin: 8px">开启地址列的表头编辑</df-button>\n    <df-button @click="restoreHeaderEditingSlot(\'address\')" style="margin: 8px">关闭地址列的表头编辑</df-button>\n    <df-button @click="addAllHeaderEditingSlot" style="margin: 8px">开启所有的表头编辑</df-button>\n    <df-button @click="restoreAllHeaderEditingSlot" style="margin: 8px">关闭所有的表头编辑</df-button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        headerEditConfig: {\n          editableHeaders: [\'id\', \'name\', \'address\']\n        }\n      },\n      tableData: new Array(40).fill().map((item, index) => ({\n        id: `第 ${index + 1} 号`,\n        name: `李时珍 ${index + 1} 号`,\n        gender: \'男\',\n        address: `四川省武当山普陀区金沙江路 ${index + 1} 弄`\n      })),\n      optionsId: [],\n      valueId: 4,\n      valueName: \'\'\n    }\n  },\n  created () {\n    this.optionsId = this.tableData.map((row, rowIndex) => {\n      return {\n        value: rowIndex,\n        label: `跳转到${row.id}`\n      }\n    })\n  },\n  methods: {\n    onIdChange (rowIndex) {\n      this.scrollToRowWithRowIndex(rowIndex)\n    },\n    onNameEnterKeyDown () {\n      let rowIndex = Number(this.valueName)\n      if (this.valueName < 0)rowIndex = 0\n      if (this.valueName > this.tableData.length) rowIndex = this.tableData.length\n      this.scrollToRowWithRowIndex(rowIndex - 1)\n    },\n    scrollToRowWithRowIndex (rowIndex) {\n      // 如果表格中含有展开行, 则使用 scrollToRowIndex 跳转之前, 需要先收起所有的展开行\n      this.$refs.table.closeAllTree()\n      this.$refs.table.scrollToRowIndex(rowIndex)\n    },\n    addHeaderEditingSlot (columnProp) {\n      this.$refs.table.addHeaderEditingSlot(columnProp)\n    },\n    restoreHeaderEditingSlot (columnProp) {\n      this.$refs.table.restoreHeaderEditingSlot(columnProp)\n    },\n    addAllHeaderEditingSlot () {\n      this.$refs.table.addAllHeaderEditingSlot()\n    },\n    restoreAllHeaderEditingSlot () {\n      this.$refs.table.restoreAllHeaderEditingSlot()\n    }\n  }\n}\n<\/script>\n')])])])],2),e._m(10),e._m(11),e._m(12),e._m(13),e._m(14),e._m(15),e._m(16),e._m(17),e._m(18),e._m(19),e._m(20),e._m(21),e._m(22),e._m(23)],1)},d=[function(){var e=this,t=e._self._c;return t("h2",{attrs:{id:"table-biao-ge-bian-ji"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-biao-ge-bian-ji"}},[e._v("¶")]),e._v(" Table 表格编辑")])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"cha-cao-bian-ji"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cha-cao-bian-ji"}},[e._v("¶")]),e._v(" 插槽编辑")])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"cha-cao-bian-ji-hu-lue-mou-xie-dan-yuan-ge-huo-xing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cha-cao-bian-ji-hu-lue-mou-xie-dan-yuan-ge-huo-xing"}},[e._v("¶")]),e._v(" 插槽编辑(忽略某些单元格或行)")])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"biao-ge-xiao-yan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#biao-ge-xiao-yan"}},[e._v("¶")]),e._v(" 表格校验")])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"biao-ge-xiao-yan-hu-lue-mou-xie-dan-yuan-ge-huo-xing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#biao-ge-xiao-yan-hu-lue-mou-xie-dan-yuan-ge-huo-xing"}},[e._v("¶")]),e._v(" 表格校验(忽略某些单元格或行)")])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"cha-cao-bian-ji-jian-pan-cao-zuo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cha-cao-bian-ji-jian-pan-cao-zuo"}},[e._v("¶")]),e._v(" 插槽编辑键盘操作")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("组件")]),t("th",[e._v("应监听的 enter 事件名称")]),t("th",[e._v("触发时机")]),t("th",[e._v("举例")])])]),t("tbody",[t("tr",[t("td",[e._v("df-input")]),t("td",[t("code",[e._v("enterKeyDown")])]),t("td",[e._v("输入框聚焦时，按下 enter 键触发")]),t("td")]),t("tr",[t("td",[e._v("df-input-number")]),t("td",[t("code",[e._v("enterKeyDown")])]),t("td",[e._v("输入框聚焦时，按下 enter 键触发")]),t("td")]),t("tr",[t("td",[e._v("df-select")]),t("td",[t("code",[e._v("enterKeyDown")])]),t("td",[e._v("输入框聚焦时，按下 enter 键触发")]),t("td")]),t("tr",[t("td",[e._v("df-page-select")]),t("td",[t("code",[e._v("enterKeyDown")])]),t("td",[e._v("输入框聚焦时，按下 enter 键触发")]),t("td")]),t("tr",[t("td",[e._v("df-page-dynamic")]),t("td",[t("code",[e._v("enterKeyDown")])]),t("td",[e._v("输入框聚焦时，按下 enter 键，如果当前有 hoverIndex 或有选中的值，则直接触发，否则会先帮助选择第一个 option，然后再触发")]),t("td")]),t("tr",[t("td",[e._v("df-time-picker")]),t("td",[t("code",[e._v("enterKeyDown")])]),t("td",[e._v("输入框聚焦时，按下 enter 键触发")]),t("td")]),t("tr",[t("td",[e._v("df-date-picker")]),t("td",[t("code",[e._v("enterKeyDown")])]),t("td",[e._v("输入框聚焦时，按下 enter 键触发")]),t("td")])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"cha-cao-bian-ji-jian-pan-cao-zuo-dan-yuan-ge-xiao-yan-xing-bian-ji"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cha-cao-bian-ji-jian-pan-cao-zuo-dan-yuan-ge-xiao-yan-xing-bian-ji"}},[e._v("¶")]),e._v(" 插槽编辑 + 键盘操作 + 单元格校验 + 行编辑")])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"shu-xing-bian-ji-biao-ge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shu-xing-bian-ji-biao-ge"}},[e._v("¶")]),e._v(" 树形编辑表格")])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"biao-tou-cha-cao-bian-ji"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#biao-tou-cha-cao-bian-ji"}},[e._v("¶")]),e._v(" 表头插槽编辑")])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"table-attributes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-attributes"}},[e._v("¶")]),e._v(" Table Attributes")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("参数")]),t("th",[e._v("说明")]),t("th",[e._v("类型")]),t("th",[e._v("可选值")]),t("th",[e._v("默认值")])])]),t("tbody",[t("tr",[t("td",[e._v("column-options")]),t("td",[e._v("列配置")]),t("td",[e._v("array")]),t("td",[e._v("—")]),t("td",[e._v("—")])])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"table-events"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-events"}},[e._v("¶")]),e._v(" Table Events")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("事件名")]),t("th",[e._v("说明")]),t("th",[e._v("参数")])])]),t("tbody",[t("tr",[t("td",[e._v("edit-disabled")]),t("td",[e._v("开启表格编辑时，想要编辑被禁用的单元格后触发（参数：禁用处的列信息、禁用处的行下标、禁用处的行信息）")]),t("td",[e._v("newVal, rowIndex, row, column")])]),t("tr",[t("td",[e._v("switch-to-editing-slot")]),t("td",[e._v("插槽情况下，某一单元格切换到了编辑插槽时触发（参数：切换处的列prop、切换处的行下标、切换处的行信息、触发方式(如果是点击触发的就是 click, 否则是 undefined)）")]),t("td",[e._v("columnProp, rowIndex, row, triggerType")])]),t("tr",[t("td",[e._v("restore-editing-slot")]),t("td",[e._v("插槽情况下，某一单元格从编辑插槽切回了原始渲染结构时触发（参数：切换处的列prop、切换处的行下标和切换处的行信息）")]),t("td",[e._v("columnProp, rowIndex, row")])]),t("tr",[t("td",[e._v("switch-to-editing-header")]),t("td",[e._v("/"),t("em",[e._v("新增")]),e._v("/ 配置了表头筛选之后，某一表头切换到了筛选状态时触发（参数：切换处的列的prop）")]),t("td",[e._v("columnProp")])]),t("tr",[t("td",[e._v("restore-editing-header")]),t("td",[e._v("/"),t("em",[e._v("新增")]),e._v("/ 配置了表头筛选之后，某一表头从筛选状态切回正常状态时触发（参数：切换处的列的prop）")]),t("td",[e._v("columnProp")])])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"table-methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-methods"}},[e._v("¶")]),e._v(" Table Methods")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("方法名")]),t("th",[e._v("说明")]),t("th",[e._v("传入参数")]),t("th",[e._v("返回值")])])]),t("tbody",[t("tr",[t("td",[e._v("addEditingSlot")]),t("td",[e._v("用于开启某单元格的编辑插槽")]),t("td",[e._v("columnProp, rowIndex")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("restoreEditingSlot")]),t("td",[e._v("用于关闭某单元格的编辑插槽")]),t("td",[e._v("columnProp, rowIndex")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("addRowEditingSlot")]),t("td",[e._v("用于开启某行的编辑插槽")]),t("td",[e._v("rowIndex")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("restoreRowEditingSlot")]),t("td",[e._v("用于关闭某行的编辑插槽")]),t("td",[e._v("rowIndex")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("addAllEditingSlot")]),t("td",[e._v("开启所有的编辑插槽")]),t("td",[e._v("{excludeMode: 排除方式(row/column/cell/rowAndColumn), excludeColumnProp: 排除列prop, excludeRowIndex: 排除行下标}")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("restoreAllEditingSlot")]),t("td",[e._v("关闭所有的编辑插槽")]),t("td",[e._v("{excludeMode: 排除方式(row/column/cell/rowAndColumn), excludeColumnProp: 排除列prop, excludeRowIndex: 排除行下标}")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("validateCell")]),t("td",[e._v("检查某一单元格")]),t("td",[e._v("columnProp, rowIndex")]),t("td",[e._v("promise.reslove 返回检查的结果，没有 reject")])]),t("tr",[t("td",[e._v("validateRow")]),t("td",[e._v("检查某一行")]),t("td",[e._v("rowIndex")]),t("td",[e._v("promise.reslove 返回检查的结果，没有 reject")])]),t("tr",[t("td",[e._v("validateRows")]),t("td",[e._v("检查某些行")]),t("td",[e._v("rowIndexes")]),t("td",[e._v("promise.reslove 返回检查的结果，没有 reject")])]),t("tr",[t("td",[e._v("validateAll")]),t("td",[e._v("检查表格的所有数据")]),t("td",[e._v("—")]),t("td",[e._v("promise.reslove 返回检查的结果，没有 reject")])]),t("tr",[t("td",[e._v("clearCellValidate")]),t("td",[e._v("清除某一单元格")]),t("td",[e._v("columnProp, rowIndex")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("clearRowValidate")]),t("td",[e._v("清除某一行的检查")]),t("td",[e._v("rowIndex")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("clearRowsValidate")]),t("td",[e._v("清除某些行的检查")]),t("td",[e._v("rowIndexes")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("clearAllValidate")]),t("td",[e._v("清除表格的所有检查")]),t("td",[e._v("—")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("getNextEditableSlot")]),t("td",[e._v("寻找下一个可编辑单元格的位置（如果传入当前位置，则找当前位置的下一个，如果不传入当前位置，则找当前最后一个正在开启的编辑插槽的下一个，以上条件都不满足，则找所有可编辑插槽的第一个，如果仍然找不到，则返回空对象）")]),t("td",[e._v("columnProp, rowIndex")]),t("td",[e._v("{columnProp, rowIndex, isFirstEditableSlot(是否是第一个可编辑 slot)}")])]),t("tr",[t("td",[e._v("addHeaderEditingSlot")]),t("td",[e._v("用于开启某列的表头编辑插槽")]),t("td",[e._v("columnProp")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("restoreHeaderEditingSlot")]),t("td",[e._v("用于关闭某列的表头编辑插槽")]),t("td",[e._v("columnProp")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("addAllHeaderEditingSlot")]),t("td",[e._v("开启所有的表头编辑插槽，传入某一列的 prop，可以在开启时忽略此列")]),t("td",[e._v("columnProp")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("restoreAllHeaderEditingSlot")]),t("td",[e._v("关闭所有的表头编辑插槽，传入某一列的 prop，可以在关闭时忽略此列")]),t("td",[e._v("columnProp")]),t("td",[e._v("-")])])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"table-column-slot"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-column-slot"}},[e._v("¶")]),e._v(" Table-column Slot")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("name")]),t("th",[e._v("说明")])])]),t("tbody",[t("tr",[t("td",[e._v("editing")]),t("td",[e._v("单元格的编辑插槽。")])])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"columnoptions.editconfig-biao-ge-bian-ji-can-shu-gui-ze"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#columnoptions.editconfig-biao-ge-bian-ji-can-shu-gui-ze"}},[e._v("¶")]),e._v(" columnOptions.editConfig 表格编辑 参数规则")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("参数")]),t("th",[e._v("说明")]),t("th",[e._v("类型")]),t("th",[e._v("可选值")]),t("th",[e._v("默认值")])])]),t("tbody",[t("tr",[t("td",[e._v("trigger")]),t("td",[e._v("编辑触发方式")]),t("td",[e._v("string")]),t("td",[e._v("hover(mode 为 slot 时不可用)/click/dblclick")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("mode")]),t("td",[e._v("编辑形式")]),t("td",[e._v("string")]),t("td",[e._v("cell")]),t("td",[e._v("cell/slot")])]),t("tr",[t("td",[e._v("unEditableColumns")]),t("td",[e._v("不可编辑列选项，这是一个快速反向配置编辑列的属性，放入不可编辑列的 prop，则表示除了这些列之外的其它列都需要编辑，如果不放任何元素，则表示所有列都可编辑。当此属性存在时，editableColumns 属性将会被忽略")]),t("td",[e._v("array")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("editableColumns")]),t("td",[e._v("编辑列选项")]),t("td",[e._v("array")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("item")]),t("td",[e._v("/"),t("em",[e._v("代号")]),e._v("/ 这里用 item 表示 editableColumns 的每一项，可以直接放入 column 的 prop，也可以放入一个对象进行更详细的配置，参见下方的对象配置说明")]),t("td",[e._v("object/string")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("item > columnProp")]),t("td",[e._v("可编辑列的 prop")]),t("td",[e._v("string")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("item > type (mode 为 slot 时不可用)")]),t("td",[e._v("可编辑列的输入类型")]),t("td",[e._v("string")]),t("td",[e._v("input/inputNumber/select")]),t("td",[e._v("input")])]),t("tr",[t("td",[e._v("item > disableRowsIndex")]),t("td",[e._v("可编辑列中禁止编辑的行的下标，如果你想禁用此列的某一行处的编辑功能，把行下标放进去即可")]),t("td",[e._v("array")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("item > attrs (mode 为 slot 时不可用)")]),t("td",[e._v("编辑时使用的输入组件的 attributes，可以自由配置除 size 之外的所有组件属性值")]),t("td",[e._v("object")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("item > options (mode 为 slot 时不可用)")]),t("td",[e._v("当输入类型是 select 时，通过此值配置 select 的 options")]),t("td",[e._v("array")]),t("td",[e._v("—")]),t("td",[e._v("—")])])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"columnoptions.validateconfig-biao-ge-xiao-yan-can-shu-gui-ze"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#columnoptions.validateconfig-biao-ge-xiao-yan-can-shu-gui-ze"}},[e._v("¶")]),e._v(" columnOptions.validateConfig 表格校验 参数规则")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("参数")]),t("th",[e._v("说明")]),t("th",[e._v("类型")]),t("th",[e._v("可选值")]),t("th",[e._v("默认值")])])]),t("tbody",[t("tr",[t("td",[e._v("needErrTips")]),t("td",[e._v("是否需要错误提示")]),t("td",[e._v("boolean")]),t("td",[e._v("—")]),t("td",[e._v("false")])]),t("tr",[t("td",[e._v("columnRules")]),t("td",[e._v("检查列规则")]),t("td",[e._v("array")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("item")]),t("td",[e._v("/"),t("em",[e._v("代号")]),e._v("/ 这里用 item 表示 columnRules 的每一项")]),t("td",[e._v("object")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("item > columnProp")]),t("td",[e._v("检查列的 prop")]),t("td",[e._v("string")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("item > rules")]),t("td",[e._v("检查列的检查规则")]),t("td",[e._v("array/function(row, rowIndex)")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("item > ignoredRowsIndex")]),t("td",[e._v("检查列中忽略检查的行的下标，如果你想忽略此列的某一行处的检查功能，把行下标放进去即可")]),t("td",[e._v("array")]),t("td",[e._v("—")]),t("td",[e._v("—")])])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"columnoptions.headereditconfig-biao-tou-shai-xuan-can-shu-gui-ze"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#columnoptions.headereditconfig-biao-tou-shai-xuan-can-shu-gui-ze"}},[e._v("¶")]),e._v(" columnOptions.headerEditConfig 表头筛选 参数规则")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("参数")]),t("th",[e._v("说明")]),t("th",[e._v("类型")]),t("th",[e._v("可选值")]),t("th",[e._v("默认值")])])]),t("tbody",[t("tr",[t("td",[e._v("editableHeaders")]),t("td",[e._v("表示可筛选的列，将列的 prop 放进去即可，例如 ['date', 'name']")]),t("td",[e._v("array[string]")]),t("td",[e._v("—")]),t("td",[e._v("—")])])])])}],l=n("5530"),a=(n("99af"),n("b0c0"),n("14d9"),n("d81d"),n("cb29"),n("a9e3"),{name:"component-doc",components:{"df-demo0":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("df-table",{ref:"table",staticStyle:{width:"100%"},attrs:{data:e.tableData,columnOptions:e.columnOptions},on:{"edit-disabled":e.cellEditDisabled,"switch-to-editing-slot":e.switchToEditingSlot,"restore-editing-slot":e.restoreEditingSlot}},[n("df-table-column",{attrs:{prop:"date",label:"日期",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{staticStyle:{display:"flex"}},[n("df-input",{model:{value:t.row.date,callback:function(n){e.$set(t.row,"date",n)},expression:"scope.row.date"}}),e._v(" "),n("df-button",{attrs:{type:"text"},on:{click:function(n){return e.saveEdit(t.column.property,t.$index)}}},[e._v("保存")])],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"name",label:"姓名",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-button",{attrs:{type:"primary"},on:{click:function(n){return e.saveEdit(t.column.property,t.$index)}}},[e._v("关闭编辑插槽")])],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"address",label:"地址"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-button",{on:{click:function(n){return e.saveEdit(t.column.property,t.$index)}}},[e._v("关闭编辑插槽")])],1)}}])})],1)]],2)},t=[],n={data:function(){return{columnOptions:{editConfig:{trigger:"click",mode:"slot",editableColumns:[{columnProp:"date",disableRowsIndex:[0]},"name","address"]}},tableData:[{date:"2016-05-02",name:"李时珍",address:"四川省武当山普陀区金沙江路 1518 弄"},{date:"2016-05-04",name:"李时珍",address:"四川省武当山普陀区金沙江路 1517 弄"},{date:"2016-05-01",name:"李时珍",address:"四川省武当山普陀区金沙江路 1519 弄"},{date:"2016-05-03",name:"李时珍",address:"四川省武当山普陀区金沙江路 1516 弄"}]}},methods:{saveEdit:function(e,t){this.$refs.table.restoreEditingSlot(e,t)},cellEditDisabled:function(e,t,n){this.$message("此单元格禁止编辑！")},switchToEditingSlot:function(e,t){console.log("第 ".concat(t+1," 行的 ").concat(e," 列切换到了编辑插槽"))},restoreEditingSlot:function(e,t){console.log("第 ".concat(t+1," 行的 ").concat(e," 列从编辑插槽切回了原始渲染结构"))}}};return Object(l["a"])({render:e,staticRenderFns:t},n)}(),"df-demo1":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("df-table",{ref:"table",staticStyle:{width:"100%"},attrs:{data:e.tableData,columnOptions:e.columnOptions},on:{"edit-disabled":e.cellEditDisabled,"switch-to-editing-slot":e.switchToEditingSlot,"restore-editing-slot":e.restoreEditingSlot}},[n("df-table-column",{attrs:{prop:"date",label:"日期",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{staticStyle:{display:"flex"}},[n("df-input",{model:{value:t.row.date,callback:function(n){e.$set(t.row,"date",n)},expression:"scope.row.date"}}),e._v(" "),n("df-button",{attrs:{type:"text"},on:{click:function(n){return e.saveEdit(t.column.property,t.$index)}}},[e._v("保存")])],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"name",label:"姓名",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-button",{attrs:{type:"primary"},on:{click:function(n){return e.saveEdit(t.column.property,t.$index)}}},[e._v("关闭编辑插槽")])],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"address",label:"地址"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-button",{on:{click:function(n){return e.saveEdit(t.column.property,t.$index)}}},[e._v("关闭编辑插槽")])],1)}}])})],1)]],2)},t=[],n={data:function(){return{columnOptions:{editConfig:{trigger:"click",mode:"slot",rowDisableFunc:function(e,t){return e.disableRow},editableColumns:[{columnProp:"date",disableRowsIndex:[2]},{columnProp:"name",disableRowsIndex:function(e,t){return e.disableName}},"address"]}},tableData:[{date:"2016-05-02",name:"李时珍",address:"四川省武当山普陀区金沙江路 1518 弄",disableRow:!0},{date:"2016-05-04",name:"李时珍",address:"四川省武当山普陀区金沙江路 1517 弄",disableRow:!1,disableName:!0},{date:"2016-05-01",name:"李时珍",address:"四川省武当山普陀区金沙江路 1519 弄",disableRow:!1},{date:"2016-05-03",name:"李时珍",address:"四川省武当山普陀区金沙江路 1516 弄",disableRow:!1}]}},methods:{saveEdit:function(e,t){this.$refs.table.restoreEditingSlot(e,t)},cellEditDisabled:function(e,t,n){this.$message("此单元格禁止编辑！")},switchToEditingSlot:function(e,t){console.log("第 ".concat(t+1," 行的 ").concat(e," 列切换到了编辑插槽"))},restoreEditingSlot:function(e,t){console.log("第 ".concat(t+1," 行的 ").concat(e," 列从编辑插槽切回了原始渲染结构"))}}};return Object(l["a"])({render:e,staticRenderFns:t},n)}(),"df-demo2":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("div",[n("df-table",{ref:"table",staticStyle:{width:"100%","margin-bottom":"20px"},attrs:{data:e.tableData,columnOptions:e.columnOptions},on:{"edit-disabled":e.cellEditDisabled,"switch-to-editing-slot":e.switchToEditingSlot,"restore-editing-slot":e.restoreEditingSlot}},[n("df-table-column",{attrs:{prop:"date",label:"日期",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{staticStyle:{display:"flex"}},[n("df-input",{staticStyle:{width:"100px"},model:{value:t.row.date,callback:function(n){e.$set(t.row,"date",n)},expression:"scope.row.date"}}),e._v(" "),n("df-button",{attrs:{type:"text"},on:{click:function(n){return e.saveEditThenCheckCurrentRow(t.column.property,t.$index)}}},[e._v("保存")])],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"name",label:"姓名",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-input",{staticStyle:{width:"100px"},model:{value:t.row.name,callback:function(n){e.$set(t.row,"name",n)},expression:"scope.row.name"}}),e._v(" "),n("df-button",{attrs:{type:"text"},on:{click:function(n){return e.saveEditThenCheckCurrentRow(t.column.property,t.$index)}}},[e._v("保存")])],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"address",label:"地址"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-input",{staticStyle:{width:"200px"},model:{value:t.row.address,callback:function(n){e.$set(t.row,"address",n)},expression:"scope.row.address"}}),e._v(" "),n("df-button",{attrs:{type:"text"},on:{click:function(n){return e.saveEditThenCheckCurrentRow(t.column.property,t.$index)}}},[e._v("保存")])],1)}}])})],1),e._v(" "),n("df-button",{on:{click:function(t){return e.validateCell(0,"name")}}},[e._v("检查第一行name的数据")]),e._v(" "),n("df-button",{on:{click:function(t){return e.validateCell(2,"name")}}},[e._v("检查第三行name的数据")]),e._v(" "),n("df-button",{on:{click:function(t){return e.validateRow(0)}}},[e._v("检查第一行的数据")]),e._v(" "),n("df-button",{on:{click:function(t){return e.validateRows([2,3])}}},[e._v("检查后两行的数据")]),e._v(" "),n("df-button",{on:{click:e.validateAll}},[e._v("检查表格的所有数据")]),e._v(" "),n("div",{staticStyle:{height:"10px"}}),e._v(" "),n("df-button",{on:{click:function(t){return e.clearCellValidate(0,"name")}}},[e._v("清除第一行name的检查")]),e._v(" "),n("df-button",{on:{click:function(t){return e.clearCellValidate(2,"name")}}},[e._v("清除第三行name的检查")]),e._v(" "),n("df-button",{on:{click:function(t){return e.clearRowValidate(0)}}},[e._v("清除第一行的检查")]),e._v(" "),n("df-button",{on:{click:function(t){return e.clearRowsValidate([2,3])}}},[e._v("清除后两行的检查")]),e._v(" "),n("df-button",{on:{click:e.clearAllValidate}},[e._v("清除表格的所有检查")]),e._v(" "),n("div",{staticStyle:{height:"10px"}}),e._v(" "),n("df-button",{on:{click:e.saveAllEditThenCheck}},[e._v("保存所有编辑并检查结果")])],1)]],2)},t=[],n={data:function(){return{columnOptions:{editConfig:{trigger:"click",mode:"slot",editableColumns:[{columnProp:"date",disableRowsIndex:[0]},{columnProp:"name"},{columnProp:"address"}]},validateConfig:{needErrTips:!0,columnRules:[{columnProp:"date",rules:[{required:!0,message:"请输入日期"}],ignoredRowsIndex:[0]},{columnProp:"name",rules:function(e,t){return 0===t?[{required:!0,message:"请输入姓名"}]:[{min:2,message:"姓名长度至少是两个字符"}]}},{columnProp:"address",rules:[{required:!0,message:"请输入地址"},{max:20,message:"地址最多是二十个字符"}]}]}},tableData:[{date:"",name:"",address:"四川省武当山普陀区金沙江路 1518 弄"},{date:"2016-05-04",name:"李",address:"四川省武当山普陀区金沙江路 1517 弄 超出的字符"},{date:"",name:"李",address:"四川省武当山普陀区金沙江路 1519 弄 超出的字符"},{date:"2016-05-03",name:"李时珍",address:"四川省武当山普陀区金沙江路 1519 弄 超出的字符"}]}},methods:{saveEditThenCheckCurrentRow:function(e,t){this.$refs.table.restoreEditingSlot(e,t),this.validateRow(t)},cellEditDisabled:function(e,t,n){this.$message("此单元格禁止编辑！")},switchToEditingSlot:function(e,t){console.log("第 ".concat(t+1," 行的 ").concat(e," 列切换到了编辑插槽"))},restoreEditingSlot:function(e,t){console.log("第 ".concat(t+1," 行的 ").concat(e," 列从编辑插槽切回了原始渲染结构"))},validateCell:function(e,t){this.$refs.table.validateCell(t,e).then((function(n){console.log("第 ".concat(e+1," 行 ").concat(t," 的检查结果:"),n)}))},validateRow:function(e){this.$refs.table.validateRow(e).then((function(t){console.log("第 ".concat(e," 行的检查结果:"),t)}))},validateRows:function(e){this.$refs.table.validateRows(e).then((function(t){console.log("第 ".concat(e," 行的检查结果:"),t)}))},validateAll:function(){this.$refs.table.validateAll().then((function(e){console.log("所有数据检查结果:",e)}))},clearCellValidate:function(e,t){this.$refs.table.clearCellValidate(t,e)},clearRowValidate:function(e){this.$refs.table.clearRowValidate(e)},clearRowsValidate:function(e){this.$refs.table.clearRowsValidate(e)},clearAllValidate:function(){this.$refs.table.clearAllValidate()},saveAllEditThenCheck:function(){this.$refs.table.restoreAllEditingSlot(),this.validateAll()}}};return Object(l["a"])({render:e,staticRenderFns:t},n)}(),"df-demo3":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("div",[n("df-table",{ref:"table",staticStyle:{width:"100%","margin-bottom":"20px"},attrs:{data:e.tableData,columnOptions:e.columnOptions},on:{"edit-disabled":e.cellEditDisabled,"switch-to-editing-slot":e.switchToEditingSlot,"restore-editing-slot":e.restoreEditingSlot}},[n("df-table-column",{attrs:{prop:"date",label:"日期",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{staticStyle:{display:"flex"}},[n("df-input",{staticStyle:{width:"100px"},model:{value:t.row.date,callback:function(n){e.$set(t.row,"date",n)},expression:"scope.row.date"}}),e._v(" "),n("df-button",{attrs:{type:"text"},on:{click:function(n){return e.saveEditThenCheckCurrentRow(t.column.property,t.$index)}}},[e._v("保存")])],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"name",label:"姓名",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-input",{staticStyle:{width:"100px"},model:{value:t.row.name,callback:function(n){e.$set(t.row,"name",n)},expression:"scope.row.name"}}),e._v(" "),n("df-button",{attrs:{type:"text"},on:{click:function(n){return e.saveEditThenCheckCurrentRow(t.column.property,t.$index)}}},[e._v("保存")])],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"address",label:"地址"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-input",{staticStyle:{width:"200px"},model:{value:t.row.address,callback:function(n){e.$set(t.row,"address",n)},expression:"scope.row.address"}}),e._v(" "),n("df-button",{attrs:{type:"text"},on:{click:function(n){return e.saveEditThenCheckCurrentRow(t.column.property,t.$index)}}},[e._v("保存")])],1)}}])})],1),e._v(" "),n("df-button",{on:{click:function(t){return e.validateCell(0,"name")}}},[e._v("检查第一行name的数据")]),e._v(" "),n("df-button",{on:{click:function(t){return e.validateCell(2,"name")}}},[e._v("检查第三行name的数据")]),e._v(" "),n("df-button",{on:{click:function(t){return e.validateRow(0)}}},[e._v("检查第一行的数据")]),e._v(" "),n("df-button",{on:{click:function(t){return e.validateRows([2,3])}}},[e._v("检查后两行的数据")]),e._v(" "),n("df-button",{on:{click:e.validateAll}},[e._v("检查表格的所有数据")]),e._v(" "),n("div",{staticStyle:{height:"10px"}}),e._v(" "),n("df-button",{on:{click:function(t){return e.clearCellValidate(0,"name")}}},[e._v("清除第一行name的检查")]),e._v(" "),n("df-button",{on:{click:function(t){return e.clearCellValidate(2,"name")}}},[e._v("清除第三行name的检查")]),e._v(" "),n("df-button",{on:{click:function(t){return e.clearRowValidate(0)}}},[e._v("清除第一行的检查")]),e._v(" "),n("df-button",{on:{click:function(t){return e.clearRowsValidate([2,3])}}},[e._v("清除后两行的检查")]),e._v(" "),n("df-button",{on:{click:e.clearAllValidate}},[e._v("清除表格的所有检查")]),e._v(" "),n("div",{staticStyle:{height:"10px"}}),e._v(" "),n("df-button",{on:{click:e.saveAllEditThenCheck}},[e._v("保存所有编辑并检查结果")])],1)]],2)},t=[],n={data:function(){return{columnOptions:{editConfig:{trigger:"click",mode:"slot",editableColumns:[{columnProp:"date",disableRowsIndex:[0]},{columnProp:"name"},{columnProp:"address"}]},validateConfig:{needErrTips:!0,rowIgnoredFunc:function(e,t){return e.ignoreRow},columnRules:[{columnProp:"date",rules:[{required:!0,message:"请输入日期"}],ignoredRowsIndex:[0]},{columnProp:"name",rules:function(e,t){return 0===t?[{required:!0,message:"请输入姓名"}]:[{min:2,message:"姓名长度至少是两个字符"}]}},{columnProp:"address",rules:[{required:!0,message:"请输入地址"},{max:20,message:"地址最多是二十个字符"}],ignoredRowsIndex:function(e,t){return e.ignoreAddressValidate}}]}},tableData:[{date:"",name:"",address:"四川省武当山普陀区金沙江路 1518 弄"},{date:"2016-05-04",name:"李",address:"四川省武当山普陀区金沙江路 1517 弄 超出的字符"},{date:"",name:"李",address:"四川省武当山普陀区金沙江路 1519 弄 超出的字符",ignoreAddressValidate:!0},{date:"2016-05-03",name:"李时珍",address:"四川省武当山普陀区金沙江路 1519 弄 超出的字符",ignoreRow:!0}]}},methods:{saveEditThenCheckCurrentRow:function(e,t){this.$refs.table.restoreEditingSlot(e,t),this.validateRow(t)},cellEditDisabled:function(e,t,n){this.$message("此单元格禁止编辑！")},switchToEditingSlot:function(e,t){console.log("第 ".concat(t+1," 行的 ").concat(e," 列切换到了编辑插槽"))},restoreEditingSlot:function(e,t){console.log("第 ".concat(t+1," 行的 ").concat(e," 列从编辑插槽切回了原始渲染结构"))},validateCell:function(e,t){this.$refs.table.validateCell(t,e).then((function(n){console.log("第 ".concat(e+1," 行 ").concat(t," 的检查结果:"),n)}))},validateRow:function(e){this.$refs.table.validateRow(e).then((function(t){console.log("第 ".concat(e," 行的检查结果:"),t)}))},validateRows:function(e){this.$refs.table.validateRows(e).then((function(t){console.log("第 ".concat(e," 行的检查结果:"),t)}))},validateAll:function(){this.$refs.table.validateAll().then((function(e){console.log("所有数据检查结果:",e)}))},clearCellValidate:function(e,t){this.$refs.table.clearCellValidate(t,e)},clearRowValidate:function(e){this.$refs.table.clearRowValidate(e)},clearRowsValidate:function(e){this.$refs.table.clearRowsValidate(e)},clearAllValidate:function(){this.$refs.table.clearAllValidate()},saveAllEditThenCheck:function(){this.$refs.table.restoreAllEditingSlot(),this.validateAll()}}};return Object(l["a"])({render:e,staticRenderFns:t},n)}(),"df-demo4":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("df-table",{ref:"table",staticStyle:{width:"100%"},attrs:{data:e.tableData,columnOptions:e.columnOptions,"row-key":"id"},on:{"edit-disabled":e.cellEditDisabled,"switch-to-editing-slot":e.switchToEditingSlot,"restore-editing-slot":e.restoreEditingSlot}},[n("df-table-column",{attrs:{type:"index"}}),e._v(" "),n("df-table-column",{attrs:{prop:"date",label:"日期",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-input",{ref:t.column.property+"-"+t.$index,on:{enterKeyDown:function(n){return e.enterKeyDown(t.column.property,t.$index)},blur:function(n){return e.saveEdit(t.column.property,t.$index)}},model:{value:t.row.date,callback:function(n){e.$set(t.row,"date",n)},expression:"scope.row.date"}})],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"name",label:"姓名",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-input",{ref:t.column.property+"-"+t.$index,on:{enterKeyDown:function(n){return e.enterKeyDown(t.column.property,t.$index)},blur:function(n){return e.saveEdit(t.column.property,t.$index)}},model:{value:t.row.name,callback:function(n){e.$set(t.row,"name",n)},expression:"scope.row.name"}})],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"gender",label:"性别",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-select",{ref:t.column.property+"-"+t.$index,on:{enterKeyDown:function(n){return e.enterKeyDown(t.column.property,t.$index)},blur:function(n){return e.saveEdit(t.column.property,t.$index)}},model:{value:t.row.gender,callback:function(n){e.$set(t.row,"gender",n)},expression:"scope.row.gender"}},[n("df-option",{attrs:{value:"男"}}),e._v(" "),n("df-option",{attrs:{value:"女"}})],1)],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"address",label:"地址"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-input",{ref:t.column.property+"-"+t.$index,on:{enterKeyDown:function(n){return e.enterKeyDown(t.column.property,t.$index)},blur:function(n){return e.saveEdit(t.column.property,t.$index)}},model:{value:t.row.address,callback:function(n){e.$set(t.row,"address",n)},expression:"scope.row.address"}})],1)}}])})],1)]],2)},t=[],n={data:function(){return{columnOptions:{editConfig:{trigger:"click",mode:"slot",editableColumns:[{columnProp:"date",disableRowsIndex:[0]},"name","gender","address"]},validateConfig:{needErrTips:!0,columnRules:[{columnProp:"date",rules:[{required:!0,message:"请输入日期"}]},{columnProp:"name",rules:[{required:!0,message:"请输入姓名"},{min:2,message:"姓名长度至少是两个字符"}]},{columnProp:"gender",rules:[{required:!0,message:"请选择性别"}]},{columnProp:"address",rules:[{required:!0,message:"请输入地址"},{max:20,message:"地址最多是二十个字符"}]}]}},tableData:[{id:"4",date:"2016-05-02",name:"李时珍",gender:"男",address:"四川省武当山普陀区金沙江路 1518 弄"},{id:"5",date:"2016-05-04",name:"李时珍",gender:"女",address:"四川省武当山普陀区金沙江路 1517 弄"},{id:"6",date:"2016-05-01",name:"",gender:"",address:"四川省武当山普陀区金沙江路 1519 弄"},{id:"7",date:"2016-05-03",name:"李时珍",gender:"男",address:"四川省武当山普陀区金沙江路 1516 弄"}]}},methods:{saveEdit:function(e,t){this.$refs.table.restoreEditingSlot(e,t)},cellEditDisabled:function(e,t,n){this.$message("此单元格禁止编辑！")},switchToEditingSlot:function(e,t){var n=this;console.log("第 ".concat(t+1," 行的 ").concat(e," 列切换到了编辑插槽")),this.$nextTick((function(){n.$refs["".concat(e,"-").concat(t)].focus()}))},restoreEditingSlot:function(e,t){console.log("第 ".concat(t+1," 行的 ").concat(e," 列从编辑插槽切回了原始渲染结构"))},enterKeyDown:function(e,t){var n=this;console.log("当前按下 enter 键的单元格是第 ".concat(t+1," 行的 ").concat(e," 列")),this.$refs.table.validateCell(e,t).then((function(o){if(console.log("当前单元格校验结果",o),o.message)n.$message({message:o.message,type:"warning"});else{var d=n.$refs.table.getNextEditableSlot(e,t),l=d.columnProp,a=d.rowIndex,r=d.isFirstEditableSlot;console.log("它下一个可编辑单元格是第 ".concat(a+1," 行的 ").concat(l," 列")),r?n.$message({message:"已经到最后一个可编辑单元格了",type:"warning"}):n.$refs.table.addEditingSlot(l,a)}}))}}};return Object(l["a"])({render:e,staticRenderFns:t},n)}(),"df-demo5":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("df-table",{ref:"table",staticStyle:{width:"100%"},attrs:{data:e.tableData,columnOptions:e.columnOptions},on:{"edit-disabled":e.cellEditDisabled,"switch-to-editing-slot":e.switchToEditingSlot,"restore-editing-slot":e.restoreEditingSlot,"button-click":e.onButtonClick}},[n("df-table-column",{attrs:{prop:"name",label:"姓名",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-input",{ref:t.column.property+"-"+t.$index,on:{enterKeyDown:function(n){return e.enterKeyDown(t.column.property,t.$index)}},model:{value:t.row.name,callback:function(n){e.$set(t.row,"name",n)},expression:"scope.row.name"}})],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"date",label:"日期",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-date-picker",{ref:t.column.property+"-"+t.$index,attrs:{type:"date",placeholder:"选择日期"},on:{enterKeyDown:function(n){return e.enterKeyDown(t.column.property,t.$index)}},model:{value:t.row.date,callback:function(n){e.$set(t.row,"date",n)},expression:"scope.row.date"}})],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"gender",label:"性别",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-select",{ref:t.column.property+"-"+t.$index,on:{enterKeyDown:function(n){return e.enterKeyDown(t.column.property,t.$index)}},model:{value:t.row.gender,callback:function(n){e.$set(t.row,"gender",n)},expression:"scope.row.gender"}},[n("df-option",{attrs:{value:"男"}}),e._v(" "),n("df-option",{attrs:{value:"女"}})],1)],1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"address",label:"地址"},scopedSlots:e._u([{key:"editing",fn:function(t){return n("div",{},[n("df-input",{ref:t.column.property+"-"+t.$index,on:{enterKeyDown:function(n){return e.enterKeyDown(t.column.property,t.$index)}},model:{value:t.row.address,callback:function(n){e.$set(t.row,"address",n)},expression:"scope.row.address"}})],1)}}])}),e._v(" "),n("df-table-column",{attrs:{width:"150",type:"buttons","button-type":"text",buttons:["新增","编辑"]}})],1)]],2)},t=[],n={data:function(){return{columnOptions:{editConfig:{trigger:"click",mode:"slot",editableColumns:["name","date","gender","address"]},validateConfig:{needErrTips:!0,columnRules:[{columnProp:"name",rules:[{required:!0,message:"请输入姓名"},{min:2,message:"姓名长度至少是两个字符"}]},{columnProp:"date",rules:[{required:!0,message:"请输入日期"}]},{columnProp:"gender",rules:[{required:!0,message:"请选择性别"}]},{columnProp:"address",rules:[{required:!0,message:"请输入地址"},{max:20,message:"地址最多是二十个字符"}]}]}},tableData:[{name:"李",date:"2016-05-02",gender:"",address:"四川省武当山普陀区金沙江路 1518 弄"}]}},methods:{cellEditDisabled:function(e,t,n){this.$message("此单元格禁止编辑！")},switchToEditingSlot:function(e,t,n,o){var d=this;console.log("第 ".concat(t+1," 行的 ").concat(e," 列切换到了编辑插槽")),this.$refs.table.addRowEditingSlot(t),this.$refs.table.restoreAllEditingSlot({excludeMode:"row",excludeRowIndex:t}),"click"===o&&this.$nextTick((function(){d.$refs["".concat(e,"-").concat(t)].focus()}))},restoreEditingSlot:function(e,t){console.log("第 ".concat(t+1," 行的 ").concat(e," 列从编辑插槽切回了原始渲染结构"))},enterKeyDown:function(e,t){var n=this;console.log("当前按下 enter 键的单元格是第 ".concat(t+1," 行的 ").concat(e," 列")),this.$refs.table.validateCell(e,t).then((function(o){if(console.log("当前单元格校验结果",o),o.message)n.$message({message:o.message,type:"warning"});else{var d=n.$refs.table.getNextEditableSlot(e,t),l=d.columnProp,a=d.rowIndex,r=d.isFirstEditableSlot;console.log("它下一个可编辑单元格是第 ".concat(a+1," 行的 ").concat(l," 列")),r?(n.$message({message:"当前是最后一个可编辑插槽了，所以自动新增一行"}),n.add()):(n.$refs.table.addEditingSlot(l,a),n.$nextTick((function(){n.$refs["".concat(e,"-").concat(t)]&&n.$refs["".concat(e,"-").concat(t)].blur(),n.$refs["".concat(l,"-").concat(a)].focus()})))}}))},onButtonClick:function(e,t,n,o){"新增"===e&&this.add(),"编辑"===e&&this.$refs.table.addRowEditingSlot(o)},add:function(){var e=this;this.tableData.push({date:"2016-05-02",name:"李时珍",gender:"男",address:"四川省武当山普陀区金沙江路 1518 弄"});var t=this.tableData.length-1;this.$refs.table.addRowEditingSlot(t),this.$nextTick((function(){e.$refs["name-".concat(t)].focus()}))}}};return Object(l["a"])({render:e,staticRenderFns:t},n)}(),"df-demo6":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("div",[n("df-button",{on:{click:e.handleClick}},[e._v("获取树各层级rowKey")]),e._v(" "),n("df-table",{ref:"table",staticStyle:{width:"100%","margin-bottom":"20px"},attrs:{data:e.tableData,"row-key":"id",border:"",useTree:"","default-expand-all":"","tree-props":{children:"children",hasChildren:"hasChildren"},columnOptions:e.columnOptions}},[n("df-table-column",{attrs:{type:"index",index:e.indexMethod}}),e._v(" "),n("df-table-column",{attrs:{prop:"date",label:"日期",sortable:"",width:"180"}}),e._v(" "),n("df-table-column",{attrs:{prop:"name",label:"姓名",sortable:"",width:"180"},scopedSlots:e._u([{key:"editing",fn:function(t){return[n("df-input",{staticStyle:{width:"100px"},model:{value:t.row.name,callback:function(n){e.$set(t.row,"name",n)},expression:"scope.row.name"}})]}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"address",label:"地址"}})],1)],1)]],2)},t=[],n={data:function(){return{columnOptions:{editConfig:{trigger:"click",mode:"slot",editableColumns:[{columnProp:"name",disableRowsIndex:[]}]}},tableData:[{id:1,date:"2016-05-02",name:"李时珍",address:"四川省武当山普陀区金沙江路 1518 弄"},{id:22,date:"2016-05-04",name:"李时珍",address:"四川省武当山普陀区金沙江路 1517 弄"},{id:33,date:"2016-05-01",name:"李时珍",address:"四川省武当山普陀区金沙江路 1519 弄",children:[{id:31,date:"2016-05-01",name:"李时珍",address:"四川省武当山普陀区金沙江路 1519 弄"},{id:32,date:"2016-05-01",name:"李时珍",address:"四川省武当山普陀区金沙江路 1519 弄"}]},{id:44,date:"2016-05-03",name:"李时珍",address:"四川省武当山普陀区金沙江路 1516 弄"}]}},methods:{handleClick:function(){var e=this,t=this.$refs.table.getTreeRowKeysByLevel(1),n=this.$refs.table.getTreeRowKeysByLevel(2);console.log("获取第一层id",t),console.log("获取第二层id",n),this.$set(this.columnOptions.editConfig.editableColumns[0],"disableRowsIndex",t),this.$nextTick((function(){return e.$refs.table.addAllEditingSlot(!0)}))},indexMethod:function(e){return e}}};return Object(l["a"])({render:e,staticRenderFns:t},n)}(),"df-demo7":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("div",[n("df-table",{ref:"table",staticStyle:{width:"100%"},attrs:{data:e.tableData,"column-options":e.columnOptions,height:"300"}},[n("df-table-column",{attrs:{type:"expand"},scopedSlots:e._u([{key:"default",fn:function(t){return[n("df-form",{staticClass:"demo-table-expand",attrs:{"label-position":"left",inline:""}},[n("df-form-item",{attrs:{label:"编号"}},[n("span",[e._v(e._s(t.row.id))])]),e._v(" "),n("df-form-item",{attrs:{label:"姓名"}},[n("span",[e._v(e._s(t.row.name))])]),e._v(" "),n("df-form-item",{attrs:{label:"性别"}},[n("span",[e._v(e._s(t.row.gender))])]),e._v(" "),n("df-form-item",{attrs:{label:"地址"}},[n("span",[e._v(e._s(t.row.address))])])],1)]}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"id",label:"编号",width:"180"},scopedSlots:e._u([{key:"headerEditing",fn:function(t){return n("df-select",{attrs:{placeholder:"请选择"},on:{change:e.onIdChange,blur:function(t){return e.restoreHeaderEditingSlot("id")}},model:{value:e.valueId,callback:function(t){e.valueId=t},expression:"valueId"}},e._l(e.optionsId,(function(e){return n("df-option",{key:e.value,attrs:{label:e.label,value:e.value}})})),1)}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"name",label:"姓名",width:"180"},scopedSlots:e._u([{key:"headerEditing",fn:function(t){return n("df-input",{attrs:{placeholder:"输入行数并按下enter"},on:{enterKeyDown:e.onNameEnterKeyDown,blur:function(t){return e.restoreHeaderEditingSlot("name")}},model:{value:e.valueName,callback:function(t){e.valueName=t},expression:"valueName"}})}}])}),e._v(" "),n("df-table-column",{attrs:{prop:"gender",label:"性别",width:"180"}}),e._v(" "),n("df-table-column",{attrs:{prop:"address",label:"地址"},scopedSlots:e._u([{key:"headerEditing",fn:function(t){return n("df-button",{on:{click:function(t){return e.scrollToRowWithRowIndex(23)}}},[e._v("跳转到第24行")])}}])})],1),e._v(" "),n("df-button",{staticStyle:{margin:"8px"},on:{click:function(t){return e.addHeaderEditingSlot("address")}}},[e._v("开启地址列的表头编辑")]),e._v(" "),n("df-button",{staticStyle:{margin:"8px"},on:{click:function(t){return e.restoreHeaderEditingSlot("address")}}},[e._v("关闭地址列的表头编辑")]),e._v(" "),n("df-button",{staticStyle:{margin:"8px"},on:{click:e.addAllHeaderEditingSlot}},[e._v("开启所有的表头编辑")]),e._v(" "),n("df-button",{staticStyle:{margin:"8px"},on:{click:e.restoreAllHeaderEditingSlot}},[e._v("关闭所有的表头编辑")])],1)]],2)},t=[],n={data:function(){return{columnOptions:{headerEditConfig:{editableHeaders:["id","name","address"]}},tableData:new Array(40).fill().map((function(e,t){return{id:"第 ".concat(t+1," 号"),name:"李时珍 ".concat(t+1," 号"),gender:"男",address:"四川省武当山普陀区金沙江路 ".concat(t+1," 弄")}})),optionsId:[],valueId:4,valueName:""}},created:function(){this.optionsId=this.tableData.map((function(e,t){return{value:t,label:"跳转到".concat(e.id)}}))},methods:{onIdChange:function(e){this.scrollToRowWithRowIndex(e)},onNameEnterKeyDown:function(){var e=Number(this.valueName);this.valueName<0&&(e=0),this.valueName>this.tableData.length&&(e=this.tableData.length),this.scrollToRowWithRowIndex(e-1)},scrollToRowWithRowIndex:function(e){this.$refs.table.closeAllTree(),this.$refs.table.scrollToRowIndex(e)},addHeaderEditingSlot:function(e){this.$refs.table.addHeaderEditingSlot(e)},restoreHeaderEditingSlot:function(e){this.$refs.table.restoreHeaderEditingSlot(e)},addAllHeaderEditingSlot:function(){this.$refs.table.addAllHeaderEditingSlot()},restoreAllHeaderEditingSlot:function(){this.$refs.table.restoreAllHeaderEditingSlot()}}};return Object(l["a"])({render:e,staticRenderFns:t},n)}()}}),r=a,i=n("2877"),s=Object(i["a"])(r,o,d,!1,null,null,null);t["default"]=s.exports}}]);
//# sourceMappingURL=chunk-2d210278.dbd1ea80.js.map