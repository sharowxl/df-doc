{"version":3,"sources":["webpack:///./src/docs-ui/data/tableEdit.md","webpack:///src/docs-ui/data/tableEdit.md","webpack:///./src/docs-ui/data/tableEdit.md?ff1d","webpack:///./src/docs-ui/data/tableEdit.md?46ab"],"names":["render","_vm","this","_c","_self","staticClass","_m","_v","slot","pre","attrs","staticRenderFns","name","components","_h","$createElement","ref","staticStyle","tableData","columnOptions","on","cellEditDisabled","switchToEditingSlot","restoreEditingSlot","scopedSlots","_u","key","fn","scope","model","value","row","date","callback","$$v","$set","expression","$event","saveEdit","column","property","$index","democomponentExport","data","editConfig","trigger","mode","editableColumns","columnProp","disableRowsIndex","address","methods","rowIndex","$refs","table","$message","console","log","concat","_objectSpread","rowDisableFunc","disableRow","disableName","saveEditThenCheckCurrentRow","validateCell","validateRow","validateRows","validateAll","clearCellValidate","clearRowValidate","clearRowsValidate","clearAllValidate","saveAllEditThenCheck","validateConfig","needErrTips","columnRules","rules","required","message","ignoredRowsIndex","min","max","then","checkRes","rowIndexes","restoreAllEditingSlot","rowIgnoredFunc","ignoreRow","ignoreAddressValidate","enterKeyDown","gender","id","_this","$nextTick","focus","currentColumnProp","currentRowIndex","_this2","res","type","_this2$$refs$table$ge","getNextEditableSlot","isFirstEditableSlot","addEditingSlot","onButtonClick","triggerType","_this3","addRowEditingSlot","excludeMode","excludeRowIndex","_this4","_this4$$refs$table$ge","add","blur","button","buttonIndex","_this5","push","addedRowIndex","length","handleClick","children","hasChildren","indexMethod","_this6","level1","getTreeRowKeysByLevel","level2","addAllEditingSlot","index","props","_s","onIdChange","restoreHeaderEditingSlot","valueId","_l","optionsId","item","label","onNameEnterKeyDown","valueName","scrollToRowWithRowIndex","addHeaderEditingSlot","addAllHeaderEditingSlot","restoreAllHeaderEditingSlot","headerEditConfig","editableHeaders","Array","fill","map","created","Number","closeAllTree","scrollToRowIndex","component"],"mappings":"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","file":"js/chunk-2d210278.dbd1ea80.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('section',{staticClass:\"content df-doc\"},[_vm._m(0),_c('p',[_vm._v(\"将 table 组件关于编辑的部分集中到这里统一介绍。\")]),_vm._m(1),_c('p',[_vm._v(\"使用插槽来自己定义编辑的内容。\")]),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"配置\"),_c('code',[_vm._v(\"mode\")]),_vm._v(\"为\"),_c('code',[_vm._v(\"slot\")]),_vm._v(\"即可，注意在这样的情况下，编辑主要是由插槽来决定的，你需要定义好具名插槽\"),_c('code',[_vm._v(\"slots.editing\")]),_vm._v(\"里的内容，事件及方法参见下方文档。\")])]),_c('template',{slot:\"source\"},[_c('df-demo0')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-table\\n    :data=\\\"tableData\\\"\\n    :columnOptions=\\\"columnOptions\\\"\\n    style=\\\"width: 100%\\\"\\n    ref=\\\"table\\\"\\n    @edit-disabled=\\\"cellEditDisabled\\\"\\n    @switch-to-editing-slot=\\\"switchToEditingSlot\\\"\\n    @restore-editing-slot=\\\"restoreEditingSlot\\\">\\n    <df-table-column prop=\\\"date\\\" label=\\\"日期\\\" width=\\\"180\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\" style=\\\"display: flex\\\">\\n        <df-input v-model=\\\"scope.row.date\\\" />\\n        <df-button type=\\\"text\\\" @click=\\\"saveEdit(scope.column.property, scope.$index)\\\">保存</df-button>\\n      </div>\\n    </df-table-column>\\n    <df-table-column prop=\\\"name\\\" label=\\\"姓名\\\" width=\\\"180\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n        <df-button type=\\\"primary\\\" @click=\\\"saveEdit(scope.column.property, scope.$index)\\\">关闭编辑插槽</df-button>\\n      </div>\\n    </df-table-column>\\n    <df-table-column prop=\\\"address\\\" label=\\\"地址\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n        <df-button @click=\\\"saveEdit(scope.column.property, scope.$index)\\\">关闭编辑插槽</df-button>\\n      </div>\\n    </df-table-column>\\n  </df-table>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      columnOptions: {\\n        editConfig: {\\n          trigger: 'click',\\n          mode: 'slot',\\n          editableColumns: [\\n            {\\n              columnProp: 'date',\\n              disableRowsIndex: [0]\\n            },\\n            'name',\\n            'address'\\n          ]\\n        }\\n      },\\n      tableData: [{\\n        date: '2016-05-02',\\n        name: '李时珍',\\n        address: '四川省武当山普陀区金沙江路 1518 弄'\\n      }, {\\n        date: '2016-05-04',\\n        name: '李时珍',\\n        address: '四川省武当山普陀区金沙江路 1517 弄'\\n      }, {\\n        date: '2016-05-01',\\n        name: '李时珍',\\n        address: '四川省武当山普陀区金沙江路 1519 弄'\\n      }, {\\n        date: '2016-05-03',\\n        name: '李时珍',\\n        address: '四川省武当山普陀区金沙江路 1516 弄'\\n      }]\\n    }\\n  },\\n  methods: {\\n    saveEdit (columnProp, rowIndex) {\\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\\n    },\\n    cellEditDisabled (column, rowIndex, row) {\\n      this.$message('此单元格禁止编辑！')\\n    },\\n    switchToEditingSlot (columnProp, rowIndex) {\\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\\n    },\\n    restoreEditingSlot (columnProp, rowIndex) {\\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(2),_c('p',[_vm._v(\"提供回调函数, 便捷的控制单元格或行的编辑禁用。\")]),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"使用 rowDisableFunc 函数直接控制一整行的编辑禁用, 使用 disableRowsIndex 函数控制某些单元格的编辑禁用。\")])]),_c('template',{slot:\"source\"},[_c('df-demo1')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-table\\n    :data=\\\"tableData\\\"\\n    :columnOptions=\\\"columnOptions\\\"\\n    style=\\\"width: 100%\\\"\\n    ref=\\\"table\\\"\\n    @edit-disabled=\\\"cellEditDisabled\\\"\\n    @switch-to-editing-slot=\\\"switchToEditingSlot\\\"\\n    @restore-editing-slot=\\\"restoreEditingSlot\\\">\\n    <df-table-column prop=\\\"date\\\" label=\\\"日期\\\" width=\\\"180\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\" style=\\\"display: flex\\\">\\n        <df-input v-model=\\\"scope.row.date\\\" />\\n        <df-button type=\\\"text\\\" @click=\\\"saveEdit(scope.column.property, scope.$index)\\\">保存</df-button>\\n      </div>\\n    </df-table-column>\\n    <df-table-column prop=\\\"name\\\" label=\\\"姓名\\\" width=\\\"180\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n        <df-button type=\\\"primary\\\" @click=\\\"saveEdit(scope.column.property, scope.$index)\\\">关闭编辑插槽</df-button>\\n      </div>\\n    </df-table-column>\\n    <df-table-column prop=\\\"address\\\" label=\\\"地址\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n        <df-button @click=\\\"saveEdit(scope.column.property, scope.$index)\\\">关闭编辑插槽</df-button>\\n      </div>\\n    </df-table-column>\\n  </df-table>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      columnOptions: {\\n        editConfig: {\\n          trigger: 'click',\\n          mode: 'slot',\\n          // rowDisableFunc 函数可以直接控制一整行的编辑禁用, 函数自动接收两个参数(行数据, 行下标)\\n          rowDisableFunc: (row, rowIndex) => {\\n            return row.disableRow\\n          },\\n          editableColumns: [\\n            {\\n              columnProp: 'date',\\n              disableRowsIndex: [2]\\n            },\\n            {\\n              columnProp: 'name',\\n              // disableRowsIndex 可以写成函数, 来动态的判断某个单元格的编辑禁用, 函数自动接收两个参数(行数据, 行下标)\\n              disableRowsIndex: (row, rowIndex) => {\\n                return row.disableName\\n              }\\n            },\\n            'address'\\n          ]\\n        }\\n      },\\n      tableData: [{\\n        date: '2016-05-02',\\n        name: '李时珍',\\n        address: '四川省武当山普陀区金沙江路 1518 弄',\\n        disableRow: true\\n      }, {\\n        date: '2016-05-04',\\n        name: '李时珍',\\n        address: '四川省武当山普陀区金沙江路 1517 弄',\\n        disableRow: false,\\n        disableName: true\\n      }, {\\n        date: '2016-05-01',\\n        name: '李时珍',\\n        address: '四川省武当山普陀区金沙江路 1519 弄',\\n        disableRow: false\\n      }, {\\n        date: '2016-05-03',\\n        name: '李时珍',\\n        address: '四川省武当山普陀区金沙江路 1516 弄',\\n        disableRow: false\\n      }]\\n    }\\n  },\\n  methods: {\\n    saveEdit (columnProp, rowIndex) {\\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\\n    },\\n    cellEditDisabled (column, rowIndex, row) {\\n      this.$message('此单元格禁止编辑！')\\n    },\\n    switchToEditingSlot (columnProp, rowIndex) {\\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\\n    },\\n    restoreEditingSlot (columnProp, rowIndex) {\\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(3),_c('p',[_vm._v(\"校验表格的数据是否符合规则，一般和表格编辑一起使用。\")]),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"传入\"),_c('code',[_vm._v(\"columnOptions\")]),_vm._v(\"，配置\"),_c('code',[_vm._v(\"validateConfig\")]),_vm._v(\"以启用表格数据校验，在某些时机，主动调用校验方法，以验证某些数据是否正确，一般在进行了一次编辑之后，应该校验一下当前行的数据。配置\"),_c('code',[_vm._v(\"needErrTips\")]),_vm._v(\"以实现当某一单元格被检查出问题后，为单元格添加红色背景及鼠标浮动提示。每一列的校验规则\"),_c('code',[_vm._v(\"rules\")]),_vm._v(\"是一个数组，里面放所有的规则，这里和 \"),_c('a',{attrs:{\"href\":\"#/component/form\"}},[_vm._v(\"表单校验\")]),_vm._v(\" 是一致的，都是用的 \"),_c('a',{attrs:{\"href\":\"https://github.com/yiminghe/async-validator\"}},[_vm._v(\"async-validator\")]),_vm._v(\" 的规则，你也可以将 \"),_c('code',[_vm._v(\"rules\")]),_vm._v(\" 配置为函数以动态设置 \"),_c('code',[_vm._v(\"rules\")]),_vm._v(\"，函数自动接收两个参数(行数据, 行下标)，针对不同行设置不同的规则，具体参见下面表格 \"),_c('code',[_vm._v(\"name\")]),_vm._v(\" 列的校验规则示例\")])]),_c('template',{slot:\"source\"},[_c('df-demo2')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <div>\\n    <df-table\\n      :data=\\\"tableData\\\"\\n      :columnOptions=\\\"columnOptions\\\"\\n      ref=\\\"table\\\"\\n      style=\\\"width: 100%;margin-bottom: 20px\\\"\\n      @edit-disabled=\\\"cellEditDisabled\\\"\\n      @switch-to-editing-slot=\\\"switchToEditingSlot\\\"\\n      @restore-editing-slot=\\\"restoreEditingSlot\\\">\\n      <df-table-column prop=\\\"date\\\" label=\\\"日期\\\" width=\\\"180\\\">\\n        <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\" style=\\\"display: flex\\\">\\n          <df-input v-model=\\\"scope.row.date\\\" style=\\\"width: 100px\\\" />\\n          <df-button type=\\\"text\\\" @click=\\\"saveEditThenCheckCurrentRow(scope.column.property, scope.$index)\\\">保存</df-button>\\n        </div>\\n      </df-table-column>\\n      <df-table-column prop=\\\"name\\\" label=\\\"姓名\\\" width=\\\"180\\\">\\n        <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n          <df-input v-model=\\\"scope.row.name\\\" style=\\\"width: 100px\\\" />\\n          <df-button type=\\\"text\\\" @click=\\\"saveEditThenCheckCurrentRow(scope.column.property, scope.$index)\\\">保存</df-button>\\n        </div>\\n      </df-table-column>\\n      <df-table-column prop=\\\"address\\\" label=\\\"地址\\\">\\n        <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n          <df-input v-model=\\\"scope.row.address\\\" style=\\\"width: 200px\\\" />\\n          <df-button type=\\\"text\\\" @click=\\\"saveEditThenCheckCurrentRow(scope.column.property, scope.$index)\\\">保存</df-button>\\n        </div>\\n      </df-table-column>\\n    </df-table>\\n    <df-button @click=\\\"validateCell(0, 'name')\\\">检查第一行name的数据</df-button>\\n    <df-button @click=\\\"validateCell(2, 'name')\\\">检查第三行name的数据</df-button>\\n    <df-button @click=\\\"validateRow(0)\\\">检查第一行的数据</df-button>\\n    <df-button @click=\\\"validateRows([2, 3])\\\">检查后两行的数据</df-button>\\n    <df-button @click=\\\"validateAll\\\">检查表格的所有数据</df-button>\\n    <div style=\\\"height: 10px\\\"></div>\\n    <df-button @click=\\\"clearCellValidate(0, 'name')\\\">清除第一行name的检查</df-button>\\n    <df-button @click=\\\"clearCellValidate(2, 'name')\\\">清除第三行name的检查</df-button>\\n    <df-button @click=\\\"clearRowValidate(0)\\\">清除第一行的检查</df-button>\\n    <df-button @click=\\\"clearRowsValidate([2, 3])\\\">清除后两行的检查</df-button>\\n    <df-button @click=\\\"clearAllValidate\\\">清除表格的所有检查</df-button>\\n    <div style=\\\"height: 10px\\\"></div>\\n    <df-button @click=\\\"saveAllEditThenCheck\\\">保存所有编辑并检查结果</df-button>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      columnOptions: {\\n        editConfig: {\\n          trigger: 'click',\\n          mode: 'slot',\\n          editableColumns: [\\n            {\\n              columnProp: 'date',\\n              disableRowsIndex: [0]\\n            },\\n            {\\n              columnProp: 'name'\\n            },\\n            {\\n              columnProp: 'address'\\n            }\\n          ]\\n        },\\n        validateConfig: {\\n          needErrTips: true,\\n          columnRules: [\\n            {\\n              columnProp: 'date',\\n              rules: [\\n                { required: true, message: '请输入日期' }\\n              ],\\n              ignoredRowsIndex: [0]\\n            },\\n            {\\n              columnProp: 'name',\\n              // 将 rules 配置为函数以动态设置 rules，函数自动接收两个参数(行数据, 行下标)，对于本示例，如果是第一行，校验规则为必输，如果是其它行，则校验规则改为长度最少为 2\\n              rules: (row, rowIndex) => {\\n                if (rowIndex === 0) return [{ required: true, message: '请输入姓名' }]\\n                else return [{ min: 2, message: '姓名长度至少是两个字符' }]\\n              }\\n            },\\n            {\\n              columnProp: 'address',\\n              rules: [\\n                { required: true, message: '请输入地址' },\\n                { max: 20, message: '地址最多是二十个字符' }\\n              ]\\n            }\\n          ]\\n        }\\n      },\\n      tableData: [{\\n        date: '',\\n        name: '',\\n        address: '四川省武当山普陀区金沙江路 1518 弄'\\n      }, {\\n        date: '2016-05-04',\\n        name: '李',\\n        address: '四川省武当山普陀区金沙江路 1517 弄 超出的字符',\\n      }, {\\n        date: '',\\n        name: '李',\\n        address: '四川省武当山普陀区金沙江路 1519 弄 超出的字符'\\n      }, {\\n        date: '2016-05-03',\\n        name: '李时珍',\\n        address: '四川省武当山普陀区金沙江路 1519 弄 超出的字符'\\n      }]\\n    }\\n  },\\n  methods: {\\n    saveEditThenCheckCurrentRow (columnProp, rowIndex) {\\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\\n      this.validateRow(rowIndex)\\n    },\\n    cellEditDisabled (column, rowIndex, row) {\\n      this.$message('此单元格禁止编辑！')\\n    },\\n    switchToEditingSlot (columnProp, rowIndex) {\\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\\n    },\\n    restoreEditingSlot (columnProp, rowIndex) {\\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\\n    },\\n    validateCell (rowIndex, columnProp) {\\n      this.$refs.table.validateCell(columnProp, rowIndex).then(checkRes => {\\n        console.log(`第 ${rowIndex + 1} 行 ${columnProp} 的检查结果:`, checkRes)\\n      })\\n    },\\n    validateRow (rowIndex) {\\n      this.$refs.table.validateRow(rowIndex).then(checkRes => {\\n        console.log(`第 ${rowIndex} 行的检查结果:`, checkRes)\\n      })\\n    },\\n    validateRows (rowIndexes) {\\n      this.$refs.table.validateRows(rowIndexes).then(checkRes => {\\n        console.log(`第 ${rowIndexes} 行的检查结果:`, checkRes)\\n      })\\n    },\\n    validateAll () {\\n      this.$refs.table.validateAll().then(checkRes => {\\n        console.log('所有数据检查结果:', checkRes)\\n      })\\n    },\\n    clearCellValidate (rowIndex, columnProp) {\\n      this.$refs.table.clearCellValidate(columnProp, rowIndex)\\n    },\\n    clearRowValidate (rowIndex) {\\n      this.$refs.table.clearRowValidate(rowIndex)\\n    },\\n    clearRowsValidate (rowIndexes) {\\n      this.$refs.table.clearRowsValidate(rowIndexes)\\n    },\\n    clearAllValidate () {\\n      this.$refs.table.clearAllValidate()\\n    },\\n    saveAllEditThenCheck () {\\n      this.$refs.table.restoreAllEditingSlot()\\n      this.validateAll()\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(4),_c('p',[_vm._v(\"提供回调函数, 便捷的控制单元格或行的校验忽略。\")]),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"使用 rowIgnoredFunc 函数直接控制一整行的校验忽略, 使用 ignoredRowsIndex 函数控制某些单元格的校验忽略。\")])]),_c('template',{slot:\"source\"},[_c('df-demo3')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <div>\\n    <df-table\\n      :data=\\\"tableData\\\"\\n      :columnOptions=\\\"columnOptions\\\"\\n      ref=\\\"table\\\"\\n      style=\\\"width: 100%;margin-bottom: 20px\\\"\\n      @edit-disabled=\\\"cellEditDisabled\\\"\\n      @switch-to-editing-slot=\\\"switchToEditingSlot\\\"\\n      @restore-editing-slot=\\\"restoreEditingSlot\\\">\\n      <df-table-column prop=\\\"date\\\" label=\\\"日期\\\" width=\\\"180\\\">\\n        <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\" style=\\\"display: flex\\\">\\n          <df-input v-model=\\\"scope.row.date\\\" style=\\\"width: 100px\\\" />\\n          <df-button type=\\\"text\\\" @click=\\\"saveEditThenCheckCurrentRow(scope.column.property, scope.$index)\\\">保存</df-button>\\n        </div>\\n      </df-table-column>\\n      <df-table-column prop=\\\"name\\\" label=\\\"姓名\\\" width=\\\"180\\\">\\n        <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n          <df-input v-model=\\\"scope.row.name\\\" style=\\\"width: 100px\\\" />\\n          <df-button type=\\\"text\\\" @click=\\\"saveEditThenCheckCurrentRow(scope.column.property, scope.$index)\\\">保存</df-button>\\n        </div>\\n      </df-table-column>\\n      <df-table-column prop=\\\"address\\\" label=\\\"地址\\\">\\n        <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n          <df-input v-model=\\\"scope.row.address\\\" style=\\\"width: 200px\\\" />\\n          <df-button type=\\\"text\\\" @click=\\\"saveEditThenCheckCurrentRow(scope.column.property, scope.$index)\\\">保存</df-button>\\n        </div>\\n      </df-table-column>\\n    </df-table>\\n    <df-button @click=\\\"validateCell(0, 'name')\\\">检查第一行name的数据</df-button>\\n    <df-button @click=\\\"validateCell(2, 'name')\\\">检查第三行name的数据</df-button>\\n    <df-button @click=\\\"validateRow(0)\\\">检查第一行的数据</df-button>\\n    <df-button @click=\\\"validateRows([2, 3])\\\">检查后两行的数据</df-button>\\n    <df-button @click=\\\"validateAll\\\">检查表格的所有数据</df-button>\\n    <div style=\\\"height: 10px\\\"></div>\\n    <df-button @click=\\\"clearCellValidate(0, 'name')\\\">清除第一行name的检查</df-button>\\n    <df-button @click=\\\"clearCellValidate(2, 'name')\\\">清除第三行name的检查</df-button>\\n    <df-button @click=\\\"clearRowValidate(0)\\\">清除第一行的检查</df-button>\\n    <df-button @click=\\\"clearRowsValidate([2, 3])\\\">清除后两行的检查</df-button>\\n    <df-button @click=\\\"clearAllValidate\\\">清除表格的所有检查</df-button>\\n    <div style=\\\"height: 10px\\\"></div>\\n    <df-button @click=\\\"saveAllEditThenCheck\\\">保存所有编辑并检查结果</df-button>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      columnOptions: {\\n        editConfig: {\\n          trigger: 'click',\\n          mode: 'slot',\\n          editableColumns: [\\n            {\\n              columnProp: 'date',\\n              disableRowsIndex: [0]\\n            },\\n            {\\n              columnProp: 'name'\\n            },\\n            {\\n              columnProp: 'address'\\n            }\\n          ]\\n        },\\n        validateConfig: {\\n          needErrTips: true,\\n          // rowIgnoredFunc 函数可以直接控制一整行的校验忽略, 函数自动接收两个参数(行数据, 行下标)\\n          rowIgnoredFunc: (row, rowIndex) => {\\n            return row.ignoreRow\\n          },\\n          columnRules: [\\n            {\\n              columnProp: 'date',\\n              rules: [\\n                { required: true, message: '请输入日期' }\\n              ],\\n              ignoredRowsIndex: [0]\\n            },\\n            {\\n              columnProp: 'name',\\n              // 将 rules 配置为函数以动态设置 rules，函数自动接收两个参数(行数据, 行下标)，对于本示例，如果是第一行，校验规则为必输，如果是其它行，则校验规则改为长度最少为 2\\n              rules: (row, rowIndex) => {\\n                if (rowIndex === 0) return [{ required: true, message: '请输入姓名' }]\\n                else return [{ min: 2, message: '姓名长度至少是两个字符' }]\\n              }\\n            },\\n            {\\n              columnProp: 'address',\\n              rules: [\\n                { required: true, message: '请输入地址' },\\n                { max: 20, message: '地址最多是二十个字符' }\\n              ],\\n              // ignoredRowsIndex 可以写成函数, 来动态的判断某个单元格的校验忽略, 函数自动接收两个参数(行数据, 行下标)\\n              ignoredRowsIndex: (row, rowIndex) => {\\n                return row.ignoreAddressValidate\\n              }\\n            }\\n          ]\\n        }\\n      },\\n      tableData: [{\\n        date: '',\\n        name: '',\\n        address: '四川省武当山普陀区金沙江路 1518 弄'\\n      }, {\\n        date: '2016-05-04',\\n        name: '李',\\n        address: '四川省武当山普陀区金沙江路 1517 弄 超出的字符'\\n      }, {\\n        date: '',\\n        name: '李',\\n        address: '四川省武当山普陀区金沙江路 1519 弄 超出的字符',\\n        ignoreAddressValidate: true\\n      }, {\\n        date: '2016-05-03',\\n        name: '李时珍',\\n        address: '四川省武当山普陀区金沙江路 1519 弄 超出的字符',\\n        ignoreRow: true\\n      }]\\n    }\\n  },\\n  methods: {\\n    saveEditThenCheckCurrentRow (columnProp, rowIndex) {\\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\\n      this.validateRow(rowIndex)\\n    },\\n    cellEditDisabled (column, rowIndex, row) {\\n      this.$message('此单元格禁止编辑！')\\n    },\\n    switchToEditingSlot (columnProp, rowIndex) {\\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\\n    },\\n    restoreEditingSlot (columnProp, rowIndex) {\\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\\n    },\\n    validateCell (rowIndex, columnProp) {\\n      this.$refs.table.validateCell(columnProp, rowIndex).then(checkRes => {\\n        console.log(`第 ${rowIndex + 1} 行 ${columnProp} 的检查结果:`, checkRes)\\n      })\\n    },\\n    validateRow (rowIndex) {\\n      this.$refs.table.validateRow(rowIndex).then(checkRes => {\\n        console.log(`第 ${rowIndex} 行的检查结果:`, checkRes)\\n      })\\n    },\\n    validateRows (rowIndexes) {\\n      this.$refs.table.validateRows(rowIndexes).then(checkRes => {\\n        console.log(`第 ${rowIndexes} 行的检查结果:`, checkRes)\\n      })\\n    },\\n    validateAll () {\\n      this.$refs.table.validateAll().then(checkRes => {\\n        console.log('所有数据检查结果:', checkRes)\\n      })\\n    },\\n    clearCellValidate (rowIndex, columnProp) {\\n      this.$refs.table.clearCellValidate(columnProp, rowIndex)\\n    },\\n    clearRowValidate (rowIndex) {\\n      this.$refs.table.clearRowValidate(rowIndex)\\n    },\\n    clearRowsValidate (rowIndexes) {\\n      this.$refs.table.clearRowsValidate(rowIndexes)\\n    },\\n    clearAllValidate () {\\n      this.$refs.table.clearAllValidate()\\n    },\\n    saveAllEditThenCheck () {\\n      this.$refs.table.restoreAllEditingSlot()\\n      this.validateAll()\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(5),_c('p',[_vm._v(\"通过监听输入组件的键盘操作，以实现编辑插槽的切换，各类型输入组件应监听事件见下表。注意，一般来讲键盘操作是需要结合表格检验的，即按下 enter 即将切换到下一单元格时，需要先检验当前单元格的内容是否正确，再进行一下步操作，可参考本示例。\")]),_vm._m(6),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"第一步，监听 slots.editing 里输入框的 enter 事件，第二步，检验当前单元格内容是否符合规则，若不符合规则，需要给予提示，若符合规则，则调用 table 的 getNextEditableSlot 方法找到下一个可编辑的插槽位置，然后开启它的编辑。\")])]),_c('template',{slot:\"source\"},[_c('df-demo4')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-table\\n    :data=\\\"tableData\\\"\\n    :columnOptions=\\\"columnOptions\\\"\\n    style=\\\"width: 100%\\\"\\n    ref=\\\"table\\\"\\n    row-key=\\\"id\\\"\\n    @edit-disabled=\\\"cellEditDisabled\\\"\\n    @switch-to-editing-slot=\\\"switchToEditingSlot\\\"\\n    @restore-editing-slot=\\\"restoreEditingSlot\\\">\\n    <df-table-column\\n      type=\\\"index\\\"\\n    />\\n    <df-table-column prop=\\\"date\\\" label=\\\"日期\\\" width=\\\"180\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n        <df-input :ref=\\\"`${scope.column.property}-${scope.$index}`\\\" v-model=\\\"scope.row.date\\\" @enterKeyDown=\\\"enterKeyDown(scope.column.property, scope.$index)\\\" @blur=\\\"saveEdit(scope.column.property, scope.$index)\\\" />\\n      </div>\\n    </df-table-column>\\n    <df-table-column prop=\\\"name\\\" label=\\\"姓名\\\" width=\\\"180\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n        <df-input :ref=\\\"`${scope.column.property}-${scope.$index}`\\\" v-model=\\\"scope.row.name\\\" @enterKeyDown=\\\"enterKeyDown(scope.column.property, scope.$index)\\\" @blur=\\\"saveEdit(scope.column.property, scope.$index)\\\" />\\n      </div>\\n    </df-table-column>\\n    <df-table-column prop=\\\"gender\\\" label=\\\"性别\\\" width=\\\"180\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n        <df-select :ref=\\\"`${scope.column.property}-${scope.$index}`\\\" v-model=\\\"scope.row.gender\\\" @enterKeyDown=\\\"enterKeyDown(scope.column.property, scope.$index)\\\" @blur=\\\"saveEdit(scope.column.property, scope.$index)\\\">\\n          <df-option value=\\\"男\\\"></df-option>\\n          <df-option value=\\\"女\\\"></df-option>\\n        </df-select>\\n      </div>\\n    </df-table-column>\\n    <df-table-column prop=\\\"address\\\" label=\\\"地址\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n        <df-input :ref=\\\"`${scope.column.property}-${scope.$index}`\\\" v-model=\\\"scope.row.address\\\" @enterKeyDown=\\\"enterKeyDown(scope.column.property, scope.$index)\\\" @blur=\\\"saveEdit(scope.column.property, scope.$index)\\\" />\\n      </div>\\n    </df-table-column>\\n  </df-table>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      columnOptions: {\\n        editConfig: {\\n          trigger: 'click',\\n          mode: 'slot',\\n          editableColumns: [\\n            {\\n              columnProp: 'date',\\n              disableRowsIndex: [0]\\n            },\\n            'name',\\n            'gender',\\n            'address'\\n          ]\\n        },\\n        validateConfig: {\\n          needErrTips: true,\\n          columnRules: [\\n            {\\n              columnProp: 'date',\\n              rules: [\\n                { required: true, message: '请输入日期' }\\n              ]\\n            },\\n            {\\n              columnProp: 'name',\\n              rules: [\\n                { required: true, message: '请输入姓名' },\\n                { min: 2, message: '姓名长度至少是两个字符' }\\n              ]\\n            },\\n            {\\n              columnProp: 'gender',\\n              rules: [\\n                { required: true, message: '请选择性别' }\\n              ]\\n            },\\n            {\\n              columnProp: 'address',\\n              rules: [\\n                { required: true, message: '请输入地址' },\\n                { max: 20, message: '地址最多是二十个字符' }\\n              ]\\n            }\\n          ]\\n        }\\n      },\\n      tableData: [{\\n        id: '4',\\n        date: '2016-05-02',\\n        name: '李时珍',\\n        gender: '男',\\n        address: '四川省武当山普陀区金沙江路 1518 弄'\\n      }, {\\n        id: '5',\\n        date: '2016-05-04',\\n        name: '李时珍',\\n        gender: '女',\\n        address: '四川省武当山普陀区金沙江路 1517 弄'\\n      }, {\\n        id: '6',\\n        date: '2016-05-01',\\n        name: '',\\n        gender: '',\\n        address: '四川省武当山普陀区金沙江路 1519 弄'\\n      }, {\\n        id: '7',\\n        date: '2016-05-03',\\n        name: '李时珍',\\n        gender: '男',\\n        address: '四川省武当山普陀区金沙江路 1516 弄'\\n      }]\\n    }\\n  },\\n  methods: {\\n    saveEdit (columnProp, rowIndex) {\\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\\n    },\\n    cellEditDisabled (column, rowIndex, row) {\\n      this.$message('此单元格禁止编辑！')\\n    },\\n    switchToEditingSlot (columnProp, rowIndex) {\\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\\n      this.$nextTick(() => {\\n        this.$refs[`${columnProp}-${rowIndex}`].focus()\\n      })\\n    },\\n    restoreEditingSlot (columnProp, rowIndex) {\\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\\n    },\\n    enterKeyDown (currentColumnProp, currentRowIndex) {\\n      console.log(`当前按下 enter 键的单元格是第 ${currentRowIndex + 1} 行的 ${currentColumnProp} 列`)\\n      this.$refs.table.validateCell(currentColumnProp, currentRowIndex)\\n        .then(res => {\\n          console.log('当前单元格校验结果', res)\\n          if (res.message) { // 校验不通过，应给与提示，不要自动切到下一单元格\\n            this.$message({\\n              message: res.message,\\n              type: 'warning'\\n            })\\n          } else { // 校验通过，自动切到下一单元格\\n            const {columnProp, rowIndex, isFirstEditableSlot} = this.$refs.table.getNextEditableSlot(currentColumnProp, currentRowIndex)\\n            console.log(`它下一个可编辑单元格是第 ${rowIndex + 1} 行的 ${columnProp} 列`)\\n            if (isFirstEditableSlot) { // isFirstEditableSlot 为 true，表示下一个可编辑插槽位置是整张表的第一个可编辑 slot，换句话说，现在已经到了最后一个可编辑单元格了\\n              this.$message({\\n                message: '已经到最后一个可编辑单元格了',\\n                type: 'warning'\\n              })\\n            } else {\\n              this.$refs.table.addEditingSlot(columnProp, rowIndex)\\n            }\\n          }\\n        })\\n    }\\n  }\\n}\\n</script>\\n\\n\")])])])],2),_vm._m(7),_c('p',[_vm._v(\"插槽编辑 + 键盘操作 + 单元格校验 + 行编辑的示例。\")]),_c('demo-block',[_c('template',{slot:\"source\"},[_c('df-demo5')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <df-table\\n    :data=\\\"tableData\\\"\\n    :columnOptions=\\\"columnOptions\\\"\\n    style=\\\"width: 100%\\\"\\n    ref=\\\"table\\\"\\n    @edit-disabled=\\\"cellEditDisabled\\\"\\n    @switch-to-editing-slot=\\\"switchToEditingSlot\\\"\\n    @restore-editing-slot=\\\"restoreEditingSlot\\\"\\n    @button-click=\\\"onButtonClick\\\">\\n    <df-table-column prop=\\\"name\\\" label=\\\"姓名\\\" width=\\\"180\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n        <df-input :ref=\\\"`${scope.column.property}-${scope.$index}`\\\" v-model=\\\"scope.row.name\\\" @enterKeyDown=\\\"enterKeyDown(scope.column.property, scope.$index)\\\" />\\n      </div>\\n    </df-table-column>\\n    <df-table-column prop=\\\"date\\\" label=\\\"日期\\\" width=\\\"180\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n        <df-date-picker\\n          type=\\\"date\\\"\\n          placeholder=\\\"选择日期\\\"\\n          :ref=\\\"`${scope.column.property}-${scope.$index}`\\\"\\n          v-model=\\\"scope.row.date\\\"\\n          @enterKeyDown=\\\"enterKeyDown(scope.column.property, scope.$index)\\\"\\n        />\\n      </div>\\n    </df-table-column>\\n    <df-table-column prop=\\\"gender\\\" label=\\\"性别\\\" width=\\\"180\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n        <df-select :ref=\\\"`${scope.column.property}-${scope.$index}`\\\" v-model=\\\"scope.row.gender\\\" @enterKeyDown=\\\"enterKeyDown(scope.column.property, scope.$index)\\\">\\n          <df-option value=\\\"男\\\"></df-option>\\n          <df-option value=\\\"女\\\"></df-option>\\n        </df-select>\\n      </div>\\n    </df-table-column>\\n    <df-table-column prop=\\\"address\\\" label=\\\"地址\\\">\\n      <div slot=\\\"editing\\\" slot-scope=\\\"scope\\\">\\n        <df-input :ref=\\\"`${scope.column.property}-${scope.$index}`\\\" v-model=\\\"scope.row.address\\\" @enterKeyDown=\\\"enterKeyDown(scope.column.property, scope.$index)\\\" />\\n      </div>\\n    </df-table-column>\\n    <df-table-column\\n      width=\\\"150\\\"\\n      type=\\\"buttons\\\"\\n      button-type=\\\"text\\\"\\n      :buttons=\\\"['新增', '编辑']\\\"\\n    />\\n  </df-table>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      columnOptions: {\\n        editConfig: {\\n          trigger: 'click',\\n          mode: 'slot',\\n          editableColumns: [\\n            'name',\\n            'date',\\n            'gender',\\n            'address'\\n          ]\\n        },\\n        validateConfig: {\\n          needErrTips: true,\\n          columnRules: [\\n            {\\n              columnProp: 'name',\\n              rules: [\\n                { required: true, message: '请输入姓名' },\\n                { min: 2, message: '姓名长度至少是两个字符' }\\n              ]\\n            },\\n            {\\n              columnProp: 'date',\\n              rules: [\\n                { required: true, message: '请输入日期' }\\n              ]\\n            },\\n            {\\n              columnProp: 'gender',\\n              rules: [\\n                { required: true, message: '请选择性别' }\\n              ]\\n            },\\n            {\\n              columnProp: 'address',\\n              rules: [\\n                { required: true, message: '请输入地址' },\\n                { max: 20, message: '地址最多是二十个字符' }\\n              ]\\n            }\\n          ]\\n        }\\n      },\\n      tableData: [{\\n        name: '李',\\n        date: '2016-05-02',\\n        gender: '',\\n        address: '四川省武当山普陀区金沙江路 1518 弄'\\n      }]\\n    }\\n  },\\n  methods: {\\n    cellEditDisabled (column, rowIndex, row) {\\n      this.$message('此单元格禁止编辑！')\\n    },\\n    switchToEditingSlot (columnProp, rowIndex, row, triggerType) {\\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\\n      this.$refs.table.addRowEditingSlot(rowIndex) // 当某一单元格被切换到编辑状态时，开启器所在行的所有编辑\\n      this.$refs.table.restoreAllEditingSlot({excludeMode: 'row', excludeRowIndex: rowIndex}) // 然后关闭其他行的编辑\\n      triggerType === 'click' && this.$nextTick(() => {\\n        this.$refs[`${columnProp}-${rowIndex}`].focus() // 自动聚焦当前单元格(只有这个单元格是通过点击触发编辑时, 才应该聚焦)\\n      })\\n    },\\n    restoreEditingSlot (columnProp, rowIndex) {\\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\\n    },\\n    enterKeyDown (currentColumnProp, currentRowIndex) {\\n      console.log(`当前按下 enter 键的单元格是第 ${currentRowIndex + 1} 行的 ${currentColumnProp} 列`)\\n      this.$refs.table.validateCell(currentColumnProp, currentRowIndex)\\n        .then(res => {\\n          console.log('当前单元格校验结果', res)\\n          if (res.message) { // 校验不通过，应给与提示，不要自动切到下一单元格\\n            this.$message({\\n              message: res.message,\\n              type: 'warning'\\n            })\\n          } else { // 校验通过，自动切到下一单元格\\n            const {columnProp, rowIndex, isFirstEditableSlot} = this.$refs.table.getNextEditableSlot(currentColumnProp, currentRowIndex)\\n            console.log(`它下一个可编辑单元格是第 ${rowIndex + 1} 行的 ${columnProp} 列`)\\n            if (isFirstEditableSlot) { // isFirstEditableSlot 为 true，表示下一个可编辑插槽位置是整张表的第一个可编辑 slot，换句话说，现在已经到了最后一个可编辑单元格了\\n              this.$message({ message: '当前是最后一个可编辑插槽了，所以自动新增一行' })\\n              this.add()\\n            } else {\\n              this.$refs.table.addEditingSlot(columnProp, rowIndex) // 这里调用一下添加编辑方法，主要是处理：当一行的最后一个 input 按下 enter 时，要保证能够开启到下一行\\n              this.$nextTick(() => {\\n                this.$refs[`${currentColumnProp}-${currentRowIndex}`] && this.$refs[`${currentColumnProp}-${currentRowIndex}`].blur() // focus 下一个 input 之前，先 blur 当前单元格input\\n                this.$refs[`${columnProp}-${rowIndex}`].focus()\\n              })\\n            }\\n          }\\n        })\\n    },\\n    onButtonClick (button, buttonIndex, row, rowIndex) {\\n      if (button === '新增') this.add()\\n      if (button === '编辑') this.$refs.table.addRowEditingSlot(rowIndex)\\n    },\\n    add () {\\n      this.tableData.push({\\n        date: '2016-05-02',\\n        name: '李时珍',\\n        gender: '男',\\n        address: '四川省武当山普陀区金沙江路 1518 弄'\\n      })\\n      // 添加一行数据之后，找到添加的数据的行下标，也就是最后一行，开启这一行的编辑\\n      const addedRowIndex = this.tableData.length - 1\\n      this.$refs.table.addRowEditingSlot(addedRowIndex)\\n      this.$nextTick(() => {\\n        this.$refs[`name-${addedRowIndex}`].focus() // 开启新一行的编辑之后自动聚焦到新一行的第一个单元格\\n      })\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(8),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"支持树类型的数据的显示。当 row 中包含 \"),_c('code',[_vm._v(\"children\")]),_vm._v(\" 字段时，被视为树形数据。渲染树形数据时，必须要指定 \"),_c('code',[_vm._v(\"row-key\")]),_vm._v(\"。支持子节点数据异步加载。设置 Table 的 \"),_c('code',[_vm._v(\"lazy\")]),_vm._v(\" 属性为 true 与加载函数 \"),_c('code',[_vm._v(\"load\")]),_vm._v(\" 。通过指定 row 中的 \"),_c('code',[_vm._v(\"hasChildren\")]),_vm._v(\" 字段来指定哪些行是包含子节点。\"),_c('code',[_vm._v(\"children\")]),_vm._v(\" 与 \"),_c('code',[_vm._v(\"hasChildren\")]),_vm._v(\" 都可以通过 \"),_c('code',[_vm._v(\"tree-props\")]),_vm._v(\" 配置。\")])]),_c('template',{slot:\"source\"},[_c('df-demo6')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <div>\\n    <df-button @click=\\\"handleClick\\\">获取树各层级rowKey</df-button>\\n    <df-table\\n      ref=\\\"table\\\"\\n      :data=\\\"tableData\\\"\\n      style=\\\"width: 100%;margin-bottom: 20px;\\\"\\n      row-key=\\\"id\\\"\\n      border\\n      useTree\\n      default-expand-all\\n      :tree-props=\\\"{children: 'children', hasChildren: 'hasChildren'}\\\"\\n      :columnOptions=\\\"columnOptions\\\"\\n    >\\n      <df-table-column\\n        type=\\\"index\\\"\\n        :index=\\\"indexMethod\\\"\\n      />\\n      <df-table-column\\n        prop=\\\"date\\\"\\n        label=\\\"日期\\\"\\n        sortable\\n        width=\\\"180\\\">\\n      </df-table-column>\\n      <df-table-column\\n        prop=\\\"name\\\"\\n        label=\\\"姓名\\\"\\n        sortable\\n        width=\\\"180\\\">\\n        <template slot=\\\"editing\\\"  slot-scope=\\\"scope\\\">\\n          <df-input v-model=\\\"scope.row.name\\\" style=\\\"width: 100px\\\" />\\n        </template>\\n      </df-table-column>\\n      <df-table-column\\n        prop=\\\"address\\\"\\n        label=\\\"地址\\\">\\n      </df-table-column>\\n    </df-table>\\n  </div>\\n</template>\\n<script>\\n  export default {\\n    data() {\\n      return {\\n        columnOptions: {\\n          editConfig: {\\n            trigger: 'click',\\n            mode: 'slot',\\n            editableColumns: [\\n              {\\n                columnProp: 'name',\\n                disableRowsIndex: []\\n              }\\n            ]\\n          }\\n        },\\n        tableData: [{\\n          id: 1,\\n          date: '2016-05-02',\\n          name: '李时珍',\\n          address: '四川省武当山普陀区金沙江路 1518 弄'\\n        }, {\\n          id: 22,\\n          date: '2016-05-04',\\n          name: '李时珍',\\n          address: '四川省武当山普陀区金沙江路 1517 弄'\\n        }, {\\n          id: 33,\\n          date: '2016-05-01',\\n          name: '李时珍',\\n          address: '四川省武当山普陀区金沙江路 1519 弄',\\n          children: [{\\n              id: 31,\\n              date: '2016-05-01',\\n              name: '李时珍',\\n              address: '四川省武当山普陀区金沙江路 1519 弄'\\n            }, {\\n              id: 32,\\n              date: '2016-05-01',\\n              name: '李时珍',\\n              address: '四川省武当山普陀区金沙江路 1519 弄'\\n          }]\\n        }, {\\n          id: 44,\\n          date: '2016-05-03',\\n          name: '李时珍',\\n          address: '四川省武当山普陀区金沙江路 1516 弄'\\n        }]\\n      }\\n    },\\n    methods: {\\n      handleClick () {\\n        const level1 = this.$refs.table.getTreeRowKeysByLevel(1)\\n        const level2 = this.$refs.table.getTreeRowKeysByLevel(2)\\n        console.log('获取第一层id', level1)\\n        console.log('获取第二层id', level2)\\n        this.$set(this.columnOptions.editConfig.editableColumns[0], 'disableRowsIndex', level1)\\n        this.$nextTick(() => this.$refs.table.addAllEditingSlot(true))\\n      },\\n      indexMethod(index) {\\n        return index\\n      }\\n    }\\n  }\\n</script>\\n\")])])])],2),_vm._m(9),_c('p',[_vm._v(\"使用插槽来自己定义表头编辑的内容。\")]),_c('demo-block',[_c('div',[_c('p',[_vm._v(\"表头编辑一般被用来跳转到此列的某一位置，编辑主要是由插槽来决定的，你需要定义好具名插槽\"),_c('code',[_vm._v(\"slots.headerEditing\")]),_vm._v(\"里的内容，事件及方法参见下方文档。\")])]),_c('template',{slot:\"source\"},[_c('df-demo7')],1),_c('template',{slot:\"highlight\"},[_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"class\":\"html\"}},[_vm._v(\"<template>\\n  <div>\\n    <df-table\\n      :data=\\\"tableData\\\"\\n      :column-options=\\\"columnOptions\\\"\\n      style=\\\"width: 100%\\\"\\n      height=\\\"300\\\"\\n      ref=\\\"table\\\">\\n      <df-table-column type=\\\"expand\\\">\\n        <template slot-scope=\\\"props\\\">\\n          <df-form label-position=\\\"left\\\" inline class=\\\"demo-table-expand\\\">\\n            <df-form-item label=\\\"编号\\\">\\n              <span>{{ props.row.id }}</span>\\n            </df-form-item>\\n            <df-form-item label=\\\"姓名\\\">\\n              <span>{{ props.row.name }}</span>\\n            </df-form-item>\\n            <df-form-item label=\\\"性别\\\">\\n              <span>{{ props.row.gender }}</span>\\n            </df-form-item>\\n            <df-form-item label=\\\"地址\\\">\\n              <span>{{ props.row.address }}</span>\\n            </df-form-item>\\n          </df-form>\\n        </template>\\n      </df-table-column>\\n      <df-table-column prop=\\\"id\\\" label=\\\"编号\\\" width=\\\"180\\\">\\n        <df-select slot=\\\"headerEditing\\\" slot-scope=\\\"scope\\\" v-model=\\\"valueId\\\" placeholder=\\\"请选择\\\" @change=\\\"onIdChange\\\" @blur=\\\"restoreHeaderEditingSlot('id')\\\">\\n          <df-option\\n            v-for=\\\"item in optionsId\\\"\\n            :key=\\\"item.value\\\"\\n            :label=\\\"item.label\\\"\\n            :value=\\\"item.value\\\">\\n          </df-option>\\n        </df-select>\\n      </df-table-column>\\n      <df-table-column prop=\\\"name\\\" label=\\\"姓名\\\" width=\\\"180\\\">\\n        <df-input slot=\\\"headerEditing\\\" slot-scope=\\\"scope\\\" v-model=\\\"valueName\\\" placeholder=\\\"输入行数并按下enter\\\" @enterKeyDown=\\\"onNameEnterKeyDown\\\" @blur=\\\"restoreHeaderEditingSlot('name')\\\"></df-input>\\n      </df-table-column>\\n      <df-table-column prop=\\\"gender\\\" label=\\\"性别\\\" width=\\\"180\\\" />\\n      <df-table-column prop=\\\"address\\\" label=\\\"地址\\\">\\n        <df-button slot=\\\"headerEditing\\\" slot-scope=\\\"scope\\\" @click=\\\"scrollToRowWithRowIndex(23)\\\">跳转到第24行</df-button>\\n      </df-table-column>\\n    </df-table>\\n    <df-button @click=\\\"addHeaderEditingSlot('address')\\\" style=\\\"margin: 8px\\\">开启地址列的表头编辑</df-button>\\n    <df-button @click=\\\"restoreHeaderEditingSlot('address')\\\" style=\\\"margin: 8px\\\">关闭地址列的表头编辑</df-button>\\n    <df-button @click=\\\"addAllHeaderEditingSlot\\\" style=\\\"margin: 8px\\\">开启所有的表头编辑</df-button>\\n    <df-button @click=\\\"restoreAllHeaderEditingSlot\\\" style=\\\"margin: 8px\\\">关闭所有的表头编辑</df-button>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      columnOptions: {\\n        headerEditConfig: {\\n          editableHeaders: ['id', 'name', 'address']\\n        }\\n      },\\n      tableData: new Array(40).fill().map((item, index) => ({\\n        id: `第 ${index + 1} 号`,\\n        name: `李时珍 ${index + 1} 号`,\\n        gender: '男',\\n        address: `四川省武当山普陀区金沙江路 ${index + 1} 弄`\\n      })),\\n      optionsId: [],\\n      valueId: 4,\\n      valueName: ''\\n    }\\n  },\\n  created () {\\n    this.optionsId = this.tableData.map((row, rowIndex) => {\\n      return {\\n        value: rowIndex,\\n        label: `跳转到${row.id}`\\n      }\\n    })\\n  },\\n  methods: {\\n    onIdChange (rowIndex) {\\n      this.scrollToRowWithRowIndex(rowIndex)\\n    },\\n    onNameEnterKeyDown () {\\n      let rowIndex = Number(this.valueName)\\n      if (this.valueName < 0)rowIndex = 0\\n      if (this.valueName > this.tableData.length) rowIndex = this.tableData.length\\n      this.scrollToRowWithRowIndex(rowIndex - 1)\\n    },\\n    scrollToRowWithRowIndex (rowIndex) {\\n      // 如果表格中含有展开行, 则使用 scrollToRowIndex 跳转之前, 需要先收起所有的展开行\\n      this.$refs.table.closeAllTree()\\n      this.$refs.table.scrollToRowIndex(rowIndex)\\n    },\\n    addHeaderEditingSlot (columnProp) {\\n      this.$refs.table.addHeaderEditingSlot(columnProp)\\n    },\\n    restoreHeaderEditingSlot (columnProp) {\\n      this.$refs.table.restoreHeaderEditingSlot(columnProp)\\n    },\\n    addAllHeaderEditingSlot () {\\n      this.$refs.table.addAllHeaderEditingSlot()\\n    },\\n    restoreAllHeaderEditingSlot () {\\n      this.$refs.table.restoreAllHeaderEditingSlot()\\n    }\\n  }\\n}\\n</script>\\n\")])])])],2),_vm._m(10),_vm._m(11),_vm._m(12),_vm._m(13),_vm._m(14),_vm._m(15),_vm._m(16),_vm._m(17),_vm._m(18),_vm._m(19),_vm._m(20),_vm._m(21),_vm._m(22),_vm._m(23)],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('h2',{attrs:{\"id\":\"table-biao-ge-bian-ji\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#table-biao-ge-bian-ji\"}},[_vm._v(\"¶\")]),_vm._v(\" Table 表格编辑\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"cha-cao-bian-ji\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#cha-cao-bian-ji\"}},[_vm._v(\"¶\")]),_vm._v(\" 插槽编辑\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"cha-cao-bian-ji-hu-lue-mou-xie-dan-yuan-ge-huo-xing\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#cha-cao-bian-ji-hu-lue-mou-xie-dan-yuan-ge-huo-xing\"}},[_vm._v(\"¶\")]),_vm._v(\" 插槽编辑(忽略某些单元格或行)\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"biao-ge-xiao-yan\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#biao-ge-xiao-yan\"}},[_vm._v(\"¶\")]),_vm._v(\" 表格校验\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"biao-ge-xiao-yan-hu-lue-mou-xie-dan-yuan-ge-huo-xing\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#biao-ge-xiao-yan-hu-lue-mou-xie-dan-yuan-ge-huo-xing\"}},[_vm._v(\"¶\")]),_vm._v(\" 表格校验(忽略某些单元格或行)\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"cha-cao-bian-ji-jian-pan-cao-zuo\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#cha-cao-bian-ji-jian-pan-cao-zuo\"}},[_vm._v(\"¶\")]),_vm._v(\" 插槽编辑键盘操作\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"组件\")]),_c('th',[_vm._v(\"应监听的 enter 事件名称\")]),_c('th',[_vm._v(\"触发时机\")]),_c('th',[_vm._v(\"举例\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"df-input\")]),_c('td',[_c('code',[_vm._v(\"enterKeyDown\")])]),_c('td',[_vm._v(\"输入框聚焦时，按下 enter 键触发\")]),_c('td')]),_c('tr',[_c('td',[_vm._v(\"df-input-number\")]),_c('td',[_c('code',[_vm._v(\"enterKeyDown\")])]),_c('td',[_vm._v(\"输入框聚焦时，按下 enter 键触发\")]),_c('td')]),_c('tr',[_c('td',[_vm._v(\"df-select\")]),_c('td',[_c('code',[_vm._v(\"enterKeyDown\")])]),_c('td',[_vm._v(\"输入框聚焦时，按下 enter 键触发\")]),_c('td')]),_c('tr',[_c('td',[_vm._v(\"df-page-select\")]),_c('td',[_c('code',[_vm._v(\"enterKeyDown\")])]),_c('td',[_vm._v(\"输入框聚焦时，按下 enter 键触发\")]),_c('td')]),_c('tr',[_c('td',[_vm._v(\"df-page-dynamic\")]),_c('td',[_c('code',[_vm._v(\"enterKeyDown\")])]),_c('td',[_vm._v(\"输入框聚焦时，按下 enter 键，如果当前有 hoverIndex 或有选中的值，则直接触发，否则会先帮助选择第一个 option，然后再触发\")]),_c('td')]),_c('tr',[_c('td',[_vm._v(\"df-time-picker\")]),_c('td',[_c('code',[_vm._v(\"enterKeyDown\")])]),_c('td',[_vm._v(\"输入框聚焦时，按下 enter 键触发\")]),_c('td')]),_c('tr',[_c('td',[_vm._v(\"df-date-picker\")]),_c('td',[_c('code',[_vm._v(\"enterKeyDown\")])]),_c('td',[_vm._v(\"输入框聚焦时，按下 enter 键触发\")]),_c('td')])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"cha-cao-bian-ji-jian-pan-cao-zuo-dan-yuan-ge-xiao-yan-xing-bian-ji\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#cha-cao-bian-ji-jian-pan-cao-zuo-dan-yuan-ge-xiao-yan-xing-bian-ji\"}},[_vm._v(\"¶\")]),_vm._v(\" 插槽编辑 + 键盘操作 + 单元格校验 + 行编辑\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"shu-xing-bian-ji-biao-ge\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#shu-xing-bian-ji-biao-ge\"}},[_vm._v(\"¶\")]),_vm._v(\" 树形编辑表格\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"biao-tou-cha-cao-bian-ji\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#biao-tou-cha-cao-bian-ji\"}},[_vm._v(\"¶\")]),_vm._v(\" 表头插槽编辑\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"table-attributes\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#table-attributes\"}},[_vm._v(\"¶\")]),_vm._v(\" Table Attributes\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"参数\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"类型\")]),_c('th',[_vm._v(\"可选值\")]),_c('th',[_vm._v(\"默认值\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"column-options\")]),_c('td',[_vm._v(\"列配置\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"table-events\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#table-events\"}},[_vm._v(\"¶\")]),_vm._v(\" Table Events\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"事件名\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"参数\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"edit-disabled\")]),_c('td',[_vm._v(\"开启表格编辑时，想要编辑被禁用的单元格后触发（参数：禁用处的列信息、禁用处的行下标、禁用处的行信息）\")]),_c('td',[_vm._v(\"newVal, rowIndex, row, column\")])]),_c('tr',[_c('td',[_vm._v(\"switch-to-editing-slot\")]),_c('td',[_vm._v(\"插槽情况下，某一单元格切换到了编辑插槽时触发（参数：切换处的列prop、切换处的行下标、切换处的行信息、触发方式(如果是点击触发的就是 click, 否则是 undefined)）\")]),_c('td',[_vm._v(\"columnProp, rowIndex, row, triggerType\")])]),_c('tr',[_c('td',[_vm._v(\"restore-editing-slot\")]),_c('td',[_vm._v(\"插槽情况下，某一单元格从编辑插槽切回了原始渲染结构时触发（参数：切换处的列prop、切换处的行下标和切换处的行信息）\")]),_c('td',[_vm._v(\"columnProp, rowIndex, row\")])]),_c('tr',[_c('td',[_vm._v(\"switch-to-editing-header\")]),_c('td',[_vm._v(\"/\"),_c('em',[_vm._v(\"新增\")]),_vm._v(\"/ 配置了表头筛选之后，某一表头切换到了筛选状态时触发（参数：切换处的列的prop）\")]),_c('td',[_vm._v(\"columnProp\")])]),_c('tr',[_c('td',[_vm._v(\"restore-editing-header\")]),_c('td',[_vm._v(\"/\"),_c('em',[_vm._v(\"新增\")]),_vm._v(\"/ 配置了表头筛选之后，某一表头从筛选状态切回正常状态时触发（参数：切换处的列的prop）\")]),_c('td',[_vm._v(\"columnProp\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"table-methods\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#table-methods\"}},[_vm._v(\"¶\")]),_vm._v(\" Table Methods\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"方法名\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"传入参数\")]),_c('th',[_vm._v(\"返回值\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"addEditingSlot\")]),_c('td',[_vm._v(\"用于开启某单元格的编辑插槽\")]),_c('td',[_vm._v(\"columnProp, rowIndex\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"restoreEditingSlot\")]),_c('td',[_vm._v(\"用于关闭某单元格的编辑插槽\")]),_c('td',[_vm._v(\"columnProp, rowIndex\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"addRowEditingSlot\")]),_c('td',[_vm._v(\"用于开启某行的编辑插槽\")]),_c('td',[_vm._v(\"rowIndex\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"restoreRowEditingSlot\")]),_c('td',[_vm._v(\"用于关闭某行的编辑插槽\")]),_c('td',[_vm._v(\"rowIndex\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"addAllEditingSlot\")]),_c('td',[_vm._v(\"开启所有的编辑插槽\")]),_c('td',[_vm._v(\"{excludeMode: 排除方式(row/column/cell/rowAndColumn), excludeColumnProp: 排除列prop, excludeRowIndex: 排除行下标}\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"restoreAllEditingSlot\")]),_c('td',[_vm._v(\"关闭所有的编辑插槽\")]),_c('td',[_vm._v(\"{excludeMode: 排除方式(row/column/cell/rowAndColumn), excludeColumnProp: 排除列prop, excludeRowIndex: 排除行下标}\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"validateCell\")]),_c('td',[_vm._v(\"检查某一单元格\")]),_c('td',[_vm._v(\"columnProp, rowIndex\")]),_c('td',[_vm._v(\"promise.reslove 返回检查的结果，没有 reject\")])]),_c('tr',[_c('td',[_vm._v(\"validateRow\")]),_c('td',[_vm._v(\"检查某一行\")]),_c('td',[_vm._v(\"rowIndex\")]),_c('td',[_vm._v(\"promise.reslove 返回检查的结果，没有 reject\")])]),_c('tr',[_c('td',[_vm._v(\"validateRows\")]),_c('td',[_vm._v(\"检查某些行\")]),_c('td',[_vm._v(\"rowIndexes\")]),_c('td',[_vm._v(\"promise.reslove 返回检查的结果，没有 reject\")])]),_c('tr',[_c('td',[_vm._v(\"validateAll\")]),_c('td',[_vm._v(\"检查表格的所有数据\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"promise.reslove 返回检查的结果，没有 reject\")])]),_c('tr',[_c('td',[_vm._v(\"clearCellValidate\")]),_c('td',[_vm._v(\"清除某一单元格\")]),_c('td',[_vm._v(\"columnProp, rowIndex\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"clearRowValidate\")]),_c('td',[_vm._v(\"清除某一行的检查\")]),_c('td',[_vm._v(\"rowIndex\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"clearRowsValidate\")]),_c('td',[_vm._v(\"清除某些行的检查\")]),_c('td',[_vm._v(\"rowIndexes\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"clearAllValidate\")]),_c('td',[_vm._v(\"清除表格的所有检查\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"getNextEditableSlot\")]),_c('td',[_vm._v(\"寻找下一个可编辑单元格的位置（如果传入当前位置，则找当前位置的下一个，如果不传入当前位置，则找当前最后一个正在开启的编辑插槽的下一个，以上条件都不满足，则找所有可编辑插槽的第一个，如果仍然找不到，则返回空对象）\")]),_c('td',[_vm._v(\"columnProp, rowIndex\")]),_c('td',[_vm._v(\"{columnProp, rowIndex, isFirstEditableSlot(是否是第一个可编辑 slot)}\")])]),_c('tr',[_c('td',[_vm._v(\"addHeaderEditingSlot\")]),_c('td',[_vm._v(\"用于开启某列的表头编辑插槽\")]),_c('td',[_vm._v(\"columnProp\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"restoreHeaderEditingSlot\")]),_c('td',[_vm._v(\"用于关闭某列的表头编辑插槽\")]),_c('td',[_vm._v(\"columnProp\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"addAllHeaderEditingSlot\")]),_c('td',[_vm._v(\"开启所有的表头编辑插槽，传入某一列的 prop，可以在开启时忽略此列\")]),_c('td',[_vm._v(\"columnProp\")]),_c('td',[_vm._v(\"-\")])]),_c('tr',[_c('td',[_vm._v(\"restoreAllHeaderEditingSlot\")]),_c('td',[_vm._v(\"关闭所有的表头编辑插槽，传入某一列的 prop，可以在关闭时忽略此列\")]),_c('td',[_vm._v(\"columnProp\")]),_c('td',[_vm._v(\"-\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"table-column-slot\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#table-column-slot\"}},[_vm._v(\"¶\")]),_vm._v(\" Table-column Slot\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"name\")]),_c('th',[_vm._v(\"说明\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"editing\")]),_c('td',[_vm._v(\"单元格的编辑插槽。\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"columnoptions.editconfig-biao-ge-bian-ji-can-shu-gui-ze\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#columnoptions.editconfig-biao-ge-bian-ji-can-shu-gui-ze\"}},[_vm._v(\"¶\")]),_vm._v(\" columnOptions.editConfig 表格编辑 参数规则\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"参数\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"类型\")]),_c('th',[_vm._v(\"可选值\")]),_c('th',[_vm._v(\"默认值\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"trigger\")]),_c('td',[_vm._v(\"编辑触发方式\")]),_c('td',[_vm._v(\"string\")]),_c('td',[_vm._v(\"hover(mode 为 slot 时不可用)/click/dblclick\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"mode\")]),_c('td',[_vm._v(\"编辑形式\")]),_c('td',[_vm._v(\"string\")]),_c('td',[_vm._v(\"cell\")]),_c('td',[_vm._v(\"cell/slot\")])]),_c('tr',[_c('td',[_vm._v(\"unEditableColumns\")]),_c('td',[_vm._v(\"不可编辑列选项，这是一个快速反向配置编辑列的属性，放入不可编辑列的 prop，则表示除了这些列之外的其它列都需要编辑，如果不放任何元素，则表示所有列都可编辑。当此属性存在时，editableColumns 属性将会被忽略\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"editableColumns\")]),_c('td',[_vm._v(\"编辑列选项\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"item\")]),_c('td',[_vm._v(\"/\"),_c('em',[_vm._v(\"代号\")]),_vm._v(\"/ 这里用 item 表示 editableColumns 的每一项，可以直接放入 column 的 prop，也可以放入一个对象进行更详细的配置，参见下方的对象配置说明\")]),_c('td',[_vm._v(\"object/string\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"item > columnProp\")]),_c('td',[_vm._v(\"可编辑列的 prop\")]),_c('td',[_vm._v(\"string\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"item > type (mode 为 slot 时不可用)\")]),_c('td',[_vm._v(\"可编辑列的输入类型\")]),_c('td',[_vm._v(\"string\")]),_c('td',[_vm._v(\"input/inputNumber/select\")]),_c('td',[_vm._v(\"input\")])]),_c('tr',[_c('td',[_vm._v(\"item > disableRowsIndex\")]),_c('td',[_vm._v(\"可编辑列中禁止编辑的行的下标，如果你想禁用此列的某一行处的编辑功能，把行下标放进去即可\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"item > attrs (mode 为 slot 时不可用)\")]),_c('td',[_vm._v(\"编辑时使用的输入组件的 attributes，可以自由配置除 size 之外的所有组件属性值\")]),_c('td',[_vm._v(\"object\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"item > options (mode 为 slot 时不可用)\")]),_c('td',[_vm._v(\"当输入类型是 select 时，通过此值配置 select 的 options\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"columnoptions.validateconfig-biao-ge-xiao-yan-can-shu-gui-ze\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#columnoptions.validateconfig-biao-ge-xiao-yan-can-shu-gui-ze\"}},[_vm._v(\"¶\")]),_vm._v(\" columnOptions.validateConfig 表格校验 参数规则\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"参数\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"类型\")]),_c('th',[_vm._v(\"可选值\")]),_c('th',[_vm._v(\"默认值\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"needErrTips\")]),_c('td',[_vm._v(\"是否需要错误提示\")]),_c('td',[_vm._v(\"boolean\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"false\")])]),_c('tr',[_c('td',[_vm._v(\"columnRules\")]),_c('td',[_vm._v(\"检查列规则\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"item\")]),_c('td',[_vm._v(\"/\"),_c('em',[_vm._v(\"代号\")]),_vm._v(\"/ 这里用 item 表示 columnRules 的每一项\")]),_c('td',[_vm._v(\"object\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"item > columnProp\")]),_c('td',[_vm._v(\"检查列的 prop\")]),_c('td',[_vm._v(\"string\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"item > rules\")]),_c('td',[_vm._v(\"检查列的检查规则\")]),_c('td',[_vm._v(\"array/function(row, rowIndex)\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])]),_c('tr',[_c('td',[_vm._v(\"item > ignoredRowsIndex\")]),_c('td',[_vm._v(\"检查列中忽略检查的行的下标，如果你想忽略此列的某一行处的检查功能，把行下标放进去即可\")]),_c('td',[_vm._v(\"array\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('h3',{attrs:{\"id\":\"columnoptions.headereditconfig-biao-tou-shai-xuan-can-shu-gui-ze\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#columnoptions.headereditconfig-biao-tou-shai-xuan-can-shu-gui-ze\"}},[_vm._v(\"¶\")]),_vm._v(\" columnOptions.headerEditConfig 表头筛选 参数规则\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('table',[_c('thead',[_c('tr',[_c('th',[_vm._v(\"参数\")]),_c('th',[_vm._v(\"说明\")]),_c('th',[_vm._v(\"类型\")]),_c('th',[_vm._v(\"可选值\")]),_c('th',[_vm._v(\"默认值\")])])]),_c('tbody',[_c('tr',[_c('td',[_vm._v(\"editableHeaders\")]),_c('td',[_vm._v(\"表示可筛选的列，将列的 prop 放进去即可，例如 ['date', 'name']\")]),_c('td',[_vm._v(\"array[string]\")]),_c('td',[_vm._v(\"—\")]),_c('td',[_vm._v(\"—\")])])])])\n}]\n\nexport { render, staticRenderFns }","\n    <template>\n      <section class=\"content df-doc\">\n        <h2 id=\"table-biao-ge-bian-ji\"><a class=\"header-anchor\" href=\"#table-biao-ge-bian-ji\">¶</a> Table 表格编辑</h2>\n<p>将 table 组件关于编辑的部分集中到这里统一介绍。</p>\n<h3 id=\"cha-cao-bian-ji\"><a class=\"header-anchor\" href=\"#cha-cao-bian-ji\">¶</a> 插槽编辑</h3>\n<p>使用插槽来自己定义编辑的内容。</p>\n<demo-block>\n        <div><p>配置<code>mode</code>为<code>slot</code>即可，注意在这样的情况下，编辑主要是由插槽来决定的，你需要定义好具名插槽<code>slots.editing</code>里的内容，事件及方法参见下方文档。</p>\n</div>\n        <template slot=\"source\"><df-demo0 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-table\n    :data=&quot;tableData&quot;\n    :columnOptions=&quot;columnOptions&quot;\n    style=&quot;width: 100%&quot;\n    ref=&quot;table&quot;\n    @edit-disabled=&quot;cellEditDisabled&quot;\n    @switch-to-editing-slot=&quot;switchToEditingSlot&quot;\n    @restore-editing-slot=&quot;restoreEditingSlot&quot;&gt;\n    &lt;df-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;180&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot; style=&quot;display: flex&quot;&gt;\n        &lt;df-input v-model=&quot;scope.row.date&quot; /&gt;\n        &lt;df-button type=&quot;text&quot; @click=&quot;saveEdit(scope.column.property, scope.$index)&quot;&gt;保存&lt;/df-button&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n    &lt;df-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n        &lt;df-button type=&quot;primary&quot; @click=&quot;saveEdit(scope.column.property, scope.$index)&quot;&gt;关闭编辑插槽&lt;/df-button&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n    &lt;df-table-column prop=&quot;address&quot; label=&quot;地址&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n        &lt;df-button @click=&quot;saveEdit(scope.column.property, scope.$index)&quot;&gt;关闭编辑插槽&lt;/df-button&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n  &lt;/df-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: [\n            {\n              columnProp: 'date',\n              disableRowsIndex: [0]\n            },\n            'name',\n            'address'\n          ]\n        }\n      },\n      tableData: [{\n        date: '2016-05-02',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1518 弄'\n      }, {\n        date: '2016-05-04',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1517 弄'\n      }, {\n        date: '2016-05-01',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1519 弄'\n      }, {\n        date: '2016-05-03',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1516 弄'\n      }]\n    }\n  },\n  methods: {\n    saveEdit (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message('此单元格禁止编辑！')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"cha-cao-bian-ji-hu-lue-mou-xie-dan-yuan-ge-huo-xing\"><a class=\"header-anchor\" href=\"#cha-cao-bian-ji-hu-lue-mou-xie-dan-yuan-ge-huo-xing\">¶</a> 插槽编辑(忽略某些单元格或行)</h3>\n<p>提供回调函数, 便捷的控制单元格或行的编辑禁用。</p>\n<demo-block>\n        <div><p>使用 rowDisableFunc 函数直接控制一整行的编辑禁用, 使用 disableRowsIndex 函数控制某些单元格的编辑禁用。</p>\n</div>\n        <template slot=\"source\"><df-demo1 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-table\n    :data=&quot;tableData&quot;\n    :columnOptions=&quot;columnOptions&quot;\n    style=&quot;width: 100%&quot;\n    ref=&quot;table&quot;\n    @edit-disabled=&quot;cellEditDisabled&quot;\n    @switch-to-editing-slot=&quot;switchToEditingSlot&quot;\n    @restore-editing-slot=&quot;restoreEditingSlot&quot;&gt;\n    &lt;df-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;180&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot; style=&quot;display: flex&quot;&gt;\n        &lt;df-input v-model=&quot;scope.row.date&quot; /&gt;\n        &lt;df-button type=&quot;text&quot; @click=&quot;saveEdit(scope.column.property, scope.$index)&quot;&gt;保存&lt;/df-button&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n    &lt;df-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n        &lt;df-button type=&quot;primary&quot; @click=&quot;saveEdit(scope.column.property, scope.$index)&quot;&gt;关闭编辑插槽&lt;/df-button&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n    &lt;df-table-column prop=&quot;address&quot; label=&quot;地址&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n        &lt;df-button @click=&quot;saveEdit(scope.column.property, scope.$index)&quot;&gt;关闭编辑插槽&lt;/df-button&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n  &lt;/df-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          // rowDisableFunc 函数可以直接控制一整行的编辑禁用, 函数自动接收两个参数(行数据, 行下标)\n          rowDisableFunc: (row, rowIndex) =&gt; {\n            return row.disableRow\n          },\n          editableColumns: [\n            {\n              columnProp: 'date',\n              disableRowsIndex: [2]\n            },\n            {\n              columnProp: 'name',\n              // disableRowsIndex 可以写成函数, 来动态的判断某个单元格的编辑禁用, 函数自动接收两个参数(行数据, 行下标)\n              disableRowsIndex: (row, rowIndex) =&gt; {\n                return row.disableName\n              }\n            },\n            'address'\n          ]\n        }\n      },\n      tableData: [{\n        date: '2016-05-02',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1518 弄',\n        disableRow: true\n      }, {\n        date: '2016-05-04',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1517 弄',\n        disableRow: false,\n        disableName: true\n      }, {\n        date: '2016-05-01',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1519 弄',\n        disableRow: false\n      }, {\n        date: '2016-05-03',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1516 弄',\n        disableRow: false\n      }]\n    }\n  },\n  methods: {\n    saveEdit (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message('此单元格禁止编辑！')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"biao-ge-xiao-yan\"><a class=\"header-anchor\" href=\"#biao-ge-xiao-yan\">¶</a> 表格校验</h3>\n<p>校验表格的数据是否符合规则，一般和表格编辑一起使用。</p>\n<demo-block>\n        <div><p>传入<code>columnOptions</code>，配置<code>validateConfig</code>以启用表格数据校验，在某些时机，主动调用校验方法，以验证某些数据是否正确，一般在进行了一次编辑之后，应该校验一下当前行的数据。配置<code>needErrTips</code>以实现当某一单元格被检查出问题后，为单元格添加红色背景及鼠标浮动提示。每一列的校验规则<code>rules</code>是一个数组，里面放所有的规则，这里和 <a href=\"#/component/form\">表单校验</a> 是一致的，都是用的 <a href=\"https://github.com/yiminghe/async-validator\">async-validator</a> 的规则，你也可以将 <code>rules</code> 配置为函数以动态设置 <code>rules</code>，函数自动接收两个参数(行数据, 行下标)，针对不同行设置不同的规则，具体参见下面表格 <code>name</code> 列的校验规则示例</p>\n</div>\n        <template slot=\"source\"><df-demo2 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;df-table\n      :data=&quot;tableData&quot;\n      :columnOptions=&quot;columnOptions&quot;\n      ref=&quot;table&quot;\n      style=&quot;width: 100%;margin-bottom: 20px&quot;\n      @edit-disabled=&quot;cellEditDisabled&quot;\n      @switch-to-editing-slot=&quot;switchToEditingSlot&quot;\n      @restore-editing-slot=&quot;restoreEditingSlot&quot;&gt;\n      &lt;df-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;180&quot;&gt;\n        &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot; style=&quot;display: flex&quot;&gt;\n          &lt;df-input v-model=&quot;scope.row.date&quot; style=&quot;width: 100px&quot; /&gt;\n          &lt;df-button type=&quot;text&quot; @click=&quot;saveEditThenCheckCurrentRow(scope.column.property, scope.$index)&quot;&gt;保存&lt;/df-button&gt;\n        &lt;/div&gt;\n      &lt;/df-table-column&gt;\n      &lt;df-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt;\n        &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n          &lt;df-input v-model=&quot;scope.row.name&quot; style=&quot;width: 100px&quot; /&gt;\n          &lt;df-button type=&quot;text&quot; @click=&quot;saveEditThenCheckCurrentRow(scope.column.property, scope.$index)&quot;&gt;保存&lt;/df-button&gt;\n        &lt;/div&gt;\n      &lt;/df-table-column&gt;\n      &lt;df-table-column prop=&quot;address&quot; label=&quot;地址&quot;&gt;\n        &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n          &lt;df-input v-model=&quot;scope.row.address&quot; style=&quot;width: 200px&quot; /&gt;\n          &lt;df-button type=&quot;text&quot; @click=&quot;saveEditThenCheckCurrentRow(scope.column.property, scope.$index)&quot;&gt;保存&lt;/df-button&gt;\n        &lt;/div&gt;\n      &lt;/df-table-column&gt;\n    &lt;/df-table&gt;\n    &lt;df-button @click=&quot;validateCell(0, 'name')&quot;&gt;检查第一行name的数据&lt;/df-button&gt;\n    &lt;df-button @click=&quot;validateCell(2, 'name')&quot;&gt;检查第三行name的数据&lt;/df-button&gt;\n    &lt;df-button @click=&quot;validateRow(0)&quot;&gt;检查第一行的数据&lt;/df-button&gt;\n    &lt;df-button @click=&quot;validateRows([2, 3])&quot;&gt;检查后两行的数据&lt;/df-button&gt;\n    &lt;df-button @click=&quot;validateAll&quot;&gt;检查表格的所有数据&lt;/df-button&gt;\n    &lt;div style=&quot;height: 10px&quot;&gt;&lt;/div&gt;\n    &lt;df-button @click=&quot;clearCellValidate(0, 'name')&quot;&gt;清除第一行name的检查&lt;/df-button&gt;\n    &lt;df-button @click=&quot;clearCellValidate(2, 'name')&quot;&gt;清除第三行name的检查&lt;/df-button&gt;\n    &lt;df-button @click=&quot;clearRowValidate(0)&quot;&gt;清除第一行的检查&lt;/df-button&gt;\n    &lt;df-button @click=&quot;clearRowsValidate([2, 3])&quot;&gt;清除后两行的检查&lt;/df-button&gt;\n    &lt;df-button @click=&quot;clearAllValidate&quot;&gt;清除表格的所有检查&lt;/df-button&gt;\n    &lt;div style=&quot;height: 10px&quot;&gt;&lt;/div&gt;\n    &lt;df-button @click=&quot;saveAllEditThenCheck&quot;&gt;保存所有编辑并检查结果&lt;/df-button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: [\n            {\n              columnProp: 'date',\n              disableRowsIndex: [0]\n            },\n            {\n              columnProp: 'name'\n            },\n            {\n              columnProp: 'address'\n            }\n          ]\n        },\n        validateConfig: {\n          needErrTips: true,\n          columnRules: [\n            {\n              columnProp: 'date',\n              rules: [\n                { required: true, message: '请输入日期' }\n              ],\n              ignoredRowsIndex: [0]\n            },\n            {\n              columnProp: 'name',\n              // 将 rules 配置为函数以动态设置 rules，函数自动接收两个参数(行数据, 行下标)，对于本示例，如果是第一行，校验规则为必输，如果是其它行，则校验规则改为长度最少为 2\n              rules: (row, rowIndex) =&gt; {\n                if (rowIndex === 0) return [{ required: true, message: '请输入姓名' }]\n                else return [{ min: 2, message: '姓名长度至少是两个字符' }]\n              }\n            },\n            {\n              columnProp: 'address',\n              rules: [\n                { required: true, message: '请输入地址' },\n                { max: 20, message: '地址最多是二十个字符' }\n              ]\n            }\n          ]\n        }\n      },\n      tableData: [{\n        date: '',\n        name: '',\n        address: '四川省武当山普陀区金沙江路 1518 弄'\n      }, {\n        date: '2016-05-04',\n        name: '李',\n        address: '四川省武当山普陀区金沙江路 1517 弄 超出的字符',\n      }, {\n        date: '',\n        name: '李',\n        address: '四川省武当山普陀区金沙江路 1519 弄 超出的字符'\n      }, {\n        date: '2016-05-03',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1519 弄 超出的字符'\n      }]\n    }\n  },\n  methods: {\n    saveEditThenCheckCurrentRow (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n      this.validateRow(rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message('此单元格禁止编辑！')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    },\n    validateCell (rowIndex, columnProp) {\n      this.$refs.table.validateCell(columnProp, rowIndex).then(checkRes =&gt; {\n        console.log(`第 ${rowIndex + 1} 行 ${columnProp} 的检查结果:`, checkRes)\n      })\n    },\n    validateRow (rowIndex) {\n      this.$refs.table.validateRow(rowIndex).then(checkRes =&gt; {\n        console.log(`第 ${rowIndex} 行的检查结果:`, checkRes)\n      })\n    },\n    validateRows (rowIndexes) {\n      this.$refs.table.validateRows(rowIndexes).then(checkRes =&gt; {\n        console.log(`第 ${rowIndexes} 行的检查结果:`, checkRes)\n      })\n    },\n    validateAll () {\n      this.$refs.table.validateAll().then(checkRes =&gt; {\n        console.log('所有数据检查结果:', checkRes)\n      })\n    },\n    clearCellValidate (rowIndex, columnProp) {\n      this.$refs.table.clearCellValidate(columnProp, rowIndex)\n    },\n    clearRowValidate (rowIndex) {\n      this.$refs.table.clearRowValidate(rowIndex)\n    },\n    clearRowsValidate (rowIndexes) {\n      this.$refs.table.clearRowsValidate(rowIndexes)\n    },\n    clearAllValidate () {\n      this.$refs.table.clearAllValidate()\n    },\n    saveAllEditThenCheck () {\n      this.$refs.table.restoreAllEditingSlot()\n      this.validateAll()\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"biao-ge-xiao-yan-hu-lue-mou-xie-dan-yuan-ge-huo-xing\"><a class=\"header-anchor\" href=\"#biao-ge-xiao-yan-hu-lue-mou-xie-dan-yuan-ge-huo-xing\">¶</a> 表格校验(忽略某些单元格或行)</h3>\n<p>提供回调函数, 便捷的控制单元格或行的校验忽略。</p>\n<demo-block>\n        <div><p>使用 rowIgnoredFunc 函数直接控制一整行的校验忽略, 使用 ignoredRowsIndex 函数控制某些单元格的校验忽略。</p>\n</div>\n        <template slot=\"source\"><df-demo3 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;df-table\n      :data=&quot;tableData&quot;\n      :columnOptions=&quot;columnOptions&quot;\n      ref=&quot;table&quot;\n      style=&quot;width: 100%;margin-bottom: 20px&quot;\n      @edit-disabled=&quot;cellEditDisabled&quot;\n      @switch-to-editing-slot=&quot;switchToEditingSlot&quot;\n      @restore-editing-slot=&quot;restoreEditingSlot&quot;&gt;\n      &lt;df-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;180&quot;&gt;\n        &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot; style=&quot;display: flex&quot;&gt;\n          &lt;df-input v-model=&quot;scope.row.date&quot; style=&quot;width: 100px&quot; /&gt;\n          &lt;df-button type=&quot;text&quot; @click=&quot;saveEditThenCheckCurrentRow(scope.column.property, scope.$index)&quot;&gt;保存&lt;/df-button&gt;\n        &lt;/div&gt;\n      &lt;/df-table-column&gt;\n      &lt;df-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt;\n        &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n          &lt;df-input v-model=&quot;scope.row.name&quot; style=&quot;width: 100px&quot; /&gt;\n          &lt;df-button type=&quot;text&quot; @click=&quot;saveEditThenCheckCurrentRow(scope.column.property, scope.$index)&quot;&gt;保存&lt;/df-button&gt;\n        &lt;/div&gt;\n      &lt;/df-table-column&gt;\n      &lt;df-table-column prop=&quot;address&quot; label=&quot;地址&quot;&gt;\n        &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n          &lt;df-input v-model=&quot;scope.row.address&quot; style=&quot;width: 200px&quot; /&gt;\n          &lt;df-button type=&quot;text&quot; @click=&quot;saveEditThenCheckCurrentRow(scope.column.property, scope.$index)&quot;&gt;保存&lt;/df-button&gt;\n        &lt;/div&gt;\n      &lt;/df-table-column&gt;\n    &lt;/df-table&gt;\n    &lt;df-button @click=&quot;validateCell(0, 'name')&quot;&gt;检查第一行name的数据&lt;/df-button&gt;\n    &lt;df-button @click=&quot;validateCell(2, 'name')&quot;&gt;检查第三行name的数据&lt;/df-button&gt;\n    &lt;df-button @click=&quot;validateRow(0)&quot;&gt;检查第一行的数据&lt;/df-button&gt;\n    &lt;df-button @click=&quot;validateRows([2, 3])&quot;&gt;检查后两行的数据&lt;/df-button&gt;\n    &lt;df-button @click=&quot;validateAll&quot;&gt;检查表格的所有数据&lt;/df-button&gt;\n    &lt;div style=&quot;height: 10px&quot;&gt;&lt;/div&gt;\n    &lt;df-button @click=&quot;clearCellValidate(0, 'name')&quot;&gt;清除第一行name的检查&lt;/df-button&gt;\n    &lt;df-button @click=&quot;clearCellValidate(2, 'name')&quot;&gt;清除第三行name的检查&lt;/df-button&gt;\n    &lt;df-button @click=&quot;clearRowValidate(0)&quot;&gt;清除第一行的检查&lt;/df-button&gt;\n    &lt;df-button @click=&quot;clearRowsValidate([2, 3])&quot;&gt;清除后两行的检查&lt;/df-button&gt;\n    &lt;df-button @click=&quot;clearAllValidate&quot;&gt;清除表格的所有检查&lt;/df-button&gt;\n    &lt;div style=&quot;height: 10px&quot;&gt;&lt;/div&gt;\n    &lt;df-button @click=&quot;saveAllEditThenCheck&quot;&gt;保存所有编辑并检查结果&lt;/df-button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: [\n            {\n              columnProp: 'date',\n              disableRowsIndex: [0]\n            },\n            {\n              columnProp: 'name'\n            },\n            {\n              columnProp: 'address'\n            }\n          ]\n        },\n        validateConfig: {\n          needErrTips: true,\n          // rowIgnoredFunc 函数可以直接控制一整行的校验忽略, 函数自动接收两个参数(行数据, 行下标)\n          rowIgnoredFunc: (row, rowIndex) =&gt; {\n            return row.ignoreRow\n          },\n          columnRules: [\n            {\n              columnProp: 'date',\n              rules: [\n                { required: true, message: '请输入日期' }\n              ],\n              ignoredRowsIndex: [0]\n            },\n            {\n              columnProp: 'name',\n              // 将 rules 配置为函数以动态设置 rules，函数自动接收两个参数(行数据, 行下标)，对于本示例，如果是第一行，校验规则为必输，如果是其它行，则校验规则改为长度最少为 2\n              rules: (row, rowIndex) =&gt; {\n                if (rowIndex === 0) return [{ required: true, message: '请输入姓名' }]\n                else return [{ min: 2, message: '姓名长度至少是两个字符' }]\n              }\n            },\n            {\n              columnProp: 'address',\n              rules: [\n                { required: true, message: '请输入地址' },\n                { max: 20, message: '地址最多是二十个字符' }\n              ],\n              // ignoredRowsIndex 可以写成函数, 来动态的判断某个单元格的校验忽略, 函数自动接收两个参数(行数据, 行下标)\n              ignoredRowsIndex: (row, rowIndex) =&gt; {\n                return row.ignoreAddressValidate\n              }\n            }\n          ]\n        }\n      },\n      tableData: [{\n        date: '',\n        name: '',\n        address: '四川省武当山普陀区金沙江路 1518 弄'\n      }, {\n        date: '2016-05-04',\n        name: '李',\n        address: '四川省武当山普陀区金沙江路 1517 弄 超出的字符'\n      }, {\n        date: '',\n        name: '李',\n        address: '四川省武当山普陀区金沙江路 1519 弄 超出的字符',\n        ignoreAddressValidate: true\n      }, {\n        date: '2016-05-03',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1519 弄 超出的字符',\n        ignoreRow: true\n      }]\n    }\n  },\n  methods: {\n    saveEditThenCheckCurrentRow (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n      this.validateRow(rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message('此单元格禁止编辑！')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    },\n    validateCell (rowIndex, columnProp) {\n      this.$refs.table.validateCell(columnProp, rowIndex).then(checkRes =&gt; {\n        console.log(`第 ${rowIndex + 1} 行 ${columnProp} 的检查结果:`, checkRes)\n      })\n    },\n    validateRow (rowIndex) {\n      this.$refs.table.validateRow(rowIndex).then(checkRes =&gt; {\n        console.log(`第 ${rowIndex} 行的检查结果:`, checkRes)\n      })\n    },\n    validateRows (rowIndexes) {\n      this.$refs.table.validateRows(rowIndexes).then(checkRes =&gt; {\n        console.log(`第 ${rowIndexes} 行的检查结果:`, checkRes)\n      })\n    },\n    validateAll () {\n      this.$refs.table.validateAll().then(checkRes =&gt; {\n        console.log('所有数据检查结果:', checkRes)\n      })\n    },\n    clearCellValidate (rowIndex, columnProp) {\n      this.$refs.table.clearCellValidate(columnProp, rowIndex)\n    },\n    clearRowValidate (rowIndex) {\n      this.$refs.table.clearRowValidate(rowIndex)\n    },\n    clearRowsValidate (rowIndexes) {\n      this.$refs.table.clearRowsValidate(rowIndexes)\n    },\n    clearAllValidate () {\n      this.$refs.table.clearAllValidate()\n    },\n    saveAllEditThenCheck () {\n      this.$refs.table.restoreAllEditingSlot()\n      this.validateAll()\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"cha-cao-bian-ji-jian-pan-cao-zuo\"><a class=\"header-anchor\" href=\"#cha-cao-bian-ji-jian-pan-cao-zuo\">¶</a> 插槽编辑键盘操作</h3>\n<p>通过监听输入组件的键盘操作，以实现编辑插槽的切换，各类型输入组件应监听事件见下表。注意，一般来讲键盘操作是需要结合表格检验的，即按下 enter 即将切换到下一单元格时，需要先检验当前单元格的内容是否正确，再进行一下步操作，可参考本示例。</p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>应监听的 enter 事件名称</th>\n<th>触发时机</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>df-input</td>\n<td><code>enterKeyDown</code></td>\n<td>输入框聚焦时，按下 enter 键触发</td>\n<td></td>\n</tr>\n<tr>\n<td>df-input-number</td>\n<td><code>enterKeyDown</code></td>\n<td>输入框聚焦时，按下 enter 键触发</td>\n<td></td>\n</tr>\n<tr>\n<td>df-select</td>\n<td><code>enterKeyDown</code></td>\n<td>输入框聚焦时，按下 enter 键触发</td>\n<td></td>\n</tr>\n<tr>\n<td>df-page-select</td>\n<td><code>enterKeyDown</code></td>\n<td>输入框聚焦时，按下 enter 键触发</td>\n<td></td>\n</tr>\n<tr>\n<td>df-page-dynamic</td>\n<td><code>enterKeyDown</code></td>\n<td>输入框聚焦时，按下 enter 键，如果当前有 hoverIndex 或有选中的值，则直接触发，否则会先帮助选择第一个 option，然后再触发</td>\n<td></td>\n</tr>\n<tr>\n<td>df-time-picker</td>\n<td><code>enterKeyDown</code></td>\n<td>输入框聚焦时，按下 enter 键触发</td>\n<td></td>\n</tr>\n<tr>\n<td>df-date-picker</td>\n<td><code>enterKeyDown</code></td>\n<td>输入框聚焦时，按下 enter 键触发</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<demo-block>\n        <div><p>第一步，监听 slots.editing 里输入框的 enter 事件，第二步，检验当前单元格内容是否符合规则，若不符合规则，需要给予提示，若符合规则，则调用 table 的 getNextEditableSlot 方法找到下一个可编辑的插槽位置，然后开启它的编辑。</p>\n</div>\n        <template slot=\"source\"><df-demo4 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-table\n    :data=&quot;tableData&quot;\n    :columnOptions=&quot;columnOptions&quot;\n    style=&quot;width: 100%&quot;\n    ref=&quot;table&quot;\n    row-key=&quot;id&quot;\n    @edit-disabled=&quot;cellEditDisabled&quot;\n    @switch-to-editing-slot=&quot;switchToEditingSlot&quot;\n    @restore-editing-slot=&quot;restoreEditingSlot&quot;&gt;\n    &lt;df-table-column\n      type=&quot;index&quot;\n    /&gt;\n    &lt;df-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;180&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n        &lt;df-input :ref=&quot;`${scope.column.property}-${scope.$index}`&quot; v-model=&quot;scope.row.date&quot; @enterKeyDown=&quot;enterKeyDown(scope.column.property, scope.$index)&quot; @blur=&quot;saveEdit(scope.column.property, scope.$index)&quot; /&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n    &lt;df-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n        &lt;df-input :ref=&quot;`${scope.column.property}-${scope.$index}`&quot; v-model=&quot;scope.row.name&quot; @enterKeyDown=&quot;enterKeyDown(scope.column.property, scope.$index)&quot; @blur=&quot;saveEdit(scope.column.property, scope.$index)&quot; /&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n    &lt;df-table-column prop=&quot;gender&quot; label=&quot;性别&quot; width=&quot;180&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n        &lt;df-select :ref=&quot;`${scope.column.property}-${scope.$index}`&quot; v-model=&quot;scope.row.gender&quot; @enterKeyDown=&quot;enterKeyDown(scope.column.property, scope.$index)&quot; @blur=&quot;saveEdit(scope.column.property, scope.$index)&quot;&gt;\n          &lt;df-option value=&quot;男&quot;&gt;&lt;/df-option&gt;\n          &lt;df-option value=&quot;女&quot;&gt;&lt;/df-option&gt;\n        &lt;/df-select&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n    &lt;df-table-column prop=&quot;address&quot; label=&quot;地址&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n        &lt;df-input :ref=&quot;`${scope.column.property}-${scope.$index}`&quot; v-model=&quot;scope.row.address&quot; @enterKeyDown=&quot;enterKeyDown(scope.column.property, scope.$index)&quot; @blur=&quot;saveEdit(scope.column.property, scope.$index)&quot; /&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n  &lt;/df-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: [\n            {\n              columnProp: 'date',\n              disableRowsIndex: [0]\n            },\n            'name',\n            'gender',\n            'address'\n          ]\n        },\n        validateConfig: {\n          needErrTips: true,\n          columnRules: [\n            {\n              columnProp: 'date',\n              rules: [\n                { required: true, message: '请输入日期' }\n              ]\n            },\n            {\n              columnProp: 'name',\n              rules: [\n                { required: true, message: '请输入姓名' },\n                { min: 2, message: '姓名长度至少是两个字符' }\n              ]\n            },\n            {\n              columnProp: 'gender',\n              rules: [\n                { required: true, message: '请选择性别' }\n              ]\n            },\n            {\n              columnProp: 'address',\n              rules: [\n                { required: true, message: '请输入地址' },\n                { max: 20, message: '地址最多是二十个字符' }\n              ]\n            }\n          ]\n        }\n      },\n      tableData: [{\n        id: '4',\n        date: '2016-05-02',\n        name: '李时珍',\n        gender: '男',\n        address: '四川省武当山普陀区金沙江路 1518 弄'\n      }, {\n        id: '5',\n        date: '2016-05-04',\n        name: '李时珍',\n        gender: '女',\n        address: '四川省武当山普陀区金沙江路 1517 弄'\n      }, {\n        id: '6',\n        date: '2016-05-01',\n        name: '',\n        gender: '',\n        address: '四川省武当山普陀区金沙江路 1519 弄'\n      }, {\n        id: '7',\n        date: '2016-05-03',\n        name: '李时珍',\n        gender: '男',\n        address: '四川省武当山普陀区金沙江路 1516 弄'\n      }]\n    }\n  },\n  methods: {\n    saveEdit (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message('此单元格禁止编辑！')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n      this.$nextTick(() =&gt; {\n        this.$refs[`${columnProp}-${rowIndex}`].focus()\n      })\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    },\n    enterKeyDown (currentColumnProp, currentRowIndex) {\n      console.log(`当前按下 enter 键的单元格是第 ${currentRowIndex + 1} 行的 ${currentColumnProp} 列`)\n      this.$refs.table.validateCell(currentColumnProp, currentRowIndex)\n        .then(res =&gt; {\n          console.log('当前单元格校验结果', res)\n          if (res.message) { // 校验不通过，应给与提示，不要自动切到下一单元格\n            this.$message({\n              message: res.message,\n              type: 'warning'\n            })\n          } else { // 校验通过，自动切到下一单元格\n            const {columnProp, rowIndex, isFirstEditableSlot} = this.$refs.table.getNextEditableSlot(currentColumnProp, currentRowIndex)\n            console.log(`它下一个可编辑单元格是第 ${rowIndex + 1} 行的 ${columnProp} 列`)\n            if (isFirstEditableSlot) { // isFirstEditableSlot 为 true，表示下一个可编辑插槽位置是整张表的第一个可编辑 slot，换句话说，现在已经到了最后一个可编辑单元格了\n              this.$message({\n                message: '已经到最后一个可编辑单元格了',\n                type: 'warning'\n              })\n            } else {\n              this.$refs.table.addEditingSlot(columnProp, rowIndex)\n            }\n          }\n        })\n    }\n  }\n}\n&lt;/script&gt;\n\n</code></pre></template></demo-block><h3 id=\"cha-cao-bian-ji-jian-pan-cao-zuo-dan-yuan-ge-xiao-yan-xing-bian-ji\"><a class=\"header-anchor\" href=\"#cha-cao-bian-ji-jian-pan-cao-zuo-dan-yuan-ge-xiao-yan-xing-bian-ji\">¶</a> 插槽编辑 + 键盘操作 + 单元格校验 + 行编辑</h3>\n<p>插槽编辑 + 键盘操作 + 单元格校验 + 行编辑的示例。</p>\n<demo-block>\n        \n        <template slot=\"source\"><df-demo5 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;df-table\n    :data=&quot;tableData&quot;\n    :columnOptions=&quot;columnOptions&quot;\n    style=&quot;width: 100%&quot;\n    ref=&quot;table&quot;\n    @edit-disabled=&quot;cellEditDisabled&quot;\n    @switch-to-editing-slot=&quot;switchToEditingSlot&quot;\n    @restore-editing-slot=&quot;restoreEditingSlot&quot;\n    @button-click=&quot;onButtonClick&quot;&gt;\n    &lt;df-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n        &lt;df-input :ref=&quot;`${scope.column.property}-${scope.$index}`&quot; v-model=&quot;scope.row.name&quot; @enterKeyDown=&quot;enterKeyDown(scope.column.property, scope.$index)&quot; /&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n    &lt;df-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;180&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n        &lt;df-date-picker\n          type=&quot;date&quot;\n          placeholder=&quot;选择日期&quot;\n          :ref=&quot;`${scope.column.property}-${scope.$index}`&quot;\n          v-model=&quot;scope.row.date&quot;\n          @enterKeyDown=&quot;enterKeyDown(scope.column.property, scope.$index)&quot;\n        /&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n    &lt;df-table-column prop=&quot;gender&quot; label=&quot;性别&quot; width=&quot;180&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n        &lt;df-select :ref=&quot;`${scope.column.property}-${scope.$index}`&quot; v-model=&quot;scope.row.gender&quot; @enterKeyDown=&quot;enterKeyDown(scope.column.property, scope.$index)&quot;&gt;\n          &lt;df-option value=&quot;男&quot;&gt;&lt;/df-option&gt;\n          &lt;df-option value=&quot;女&quot;&gt;&lt;/df-option&gt;\n        &lt;/df-select&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n    &lt;df-table-column prop=&quot;address&quot; label=&quot;地址&quot;&gt;\n      &lt;div slot=&quot;editing&quot; slot-scope=&quot;scope&quot;&gt;\n        &lt;df-input :ref=&quot;`${scope.column.property}-${scope.$index}`&quot; v-model=&quot;scope.row.address&quot; @enterKeyDown=&quot;enterKeyDown(scope.column.property, scope.$index)&quot; /&gt;\n      &lt;/div&gt;\n    &lt;/df-table-column&gt;\n    &lt;df-table-column\n      width=&quot;150&quot;\n      type=&quot;buttons&quot;\n      button-type=&quot;text&quot;\n      :buttons=&quot;['新增', '编辑']&quot;\n    /&gt;\n  &lt;/df-table&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: [\n            'name',\n            'date',\n            'gender',\n            'address'\n          ]\n        },\n        validateConfig: {\n          needErrTips: true,\n          columnRules: [\n            {\n              columnProp: 'name',\n              rules: [\n                { required: true, message: '请输入姓名' },\n                { min: 2, message: '姓名长度至少是两个字符' }\n              ]\n            },\n            {\n              columnProp: 'date',\n              rules: [\n                { required: true, message: '请输入日期' }\n              ]\n            },\n            {\n              columnProp: 'gender',\n              rules: [\n                { required: true, message: '请选择性别' }\n              ]\n            },\n            {\n              columnProp: 'address',\n              rules: [\n                { required: true, message: '请输入地址' },\n                { max: 20, message: '地址最多是二十个字符' }\n              ]\n            }\n          ]\n        }\n      },\n      tableData: [{\n        name: '李',\n        date: '2016-05-02',\n        gender: '',\n        address: '四川省武当山普陀区金沙江路 1518 弄'\n      }]\n    }\n  },\n  methods: {\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message('此单元格禁止编辑！')\n    },\n    switchToEditingSlot (columnProp, rowIndex, row, triggerType) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n      this.$refs.table.addRowEditingSlot(rowIndex) // 当某一单元格被切换到编辑状态时，开启器所在行的所有编辑\n      this.$refs.table.restoreAllEditingSlot({excludeMode: 'row', excludeRowIndex: rowIndex}) // 然后关闭其他行的编辑\n      triggerType === 'click' &amp;&amp; this.$nextTick(() =&gt; {\n        this.$refs[`${columnProp}-${rowIndex}`].focus() // 自动聚焦当前单元格(只有这个单元格是通过点击触发编辑时, 才应该聚焦)\n      })\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    },\n    enterKeyDown (currentColumnProp, currentRowIndex) {\n      console.log(`当前按下 enter 键的单元格是第 ${currentRowIndex + 1} 行的 ${currentColumnProp} 列`)\n      this.$refs.table.validateCell(currentColumnProp, currentRowIndex)\n        .then(res =&gt; {\n          console.log('当前单元格校验结果', res)\n          if (res.message) { // 校验不通过，应给与提示，不要自动切到下一单元格\n            this.$message({\n              message: res.message,\n              type: 'warning'\n            })\n          } else { // 校验通过，自动切到下一单元格\n            const {columnProp, rowIndex, isFirstEditableSlot} = this.$refs.table.getNextEditableSlot(currentColumnProp, currentRowIndex)\n            console.log(`它下一个可编辑单元格是第 ${rowIndex + 1} 行的 ${columnProp} 列`)\n            if (isFirstEditableSlot) { // isFirstEditableSlot 为 true，表示下一个可编辑插槽位置是整张表的第一个可编辑 slot，换句话说，现在已经到了最后一个可编辑单元格了\n              this.$message({ message: '当前是最后一个可编辑插槽了，所以自动新增一行' })\n              this.add()\n            } else {\n              this.$refs.table.addEditingSlot(columnProp, rowIndex) // 这里调用一下添加编辑方法，主要是处理：当一行的最后一个 input 按下 enter 时，要保证能够开启到下一行\n              this.$nextTick(() =&gt; {\n                this.$refs[`${currentColumnProp}-${currentRowIndex}`] &amp;&amp; this.$refs[`${currentColumnProp}-${currentRowIndex}`].blur() // focus 下一个 input 之前，先 blur 当前单元格input\n                this.$refs[`${columnProp}-${rowIndex}`].focus()\n              })\n            }\n          }\n        })\n    },\n    onButtonClick (button, buttonIndex, row, rowIndex) {\n      if (button === '新增') this.add()\n      if (button === '编辑') this.$refs.table.addRowEditingSlot(rowIndex)\n    },\n    add () {\n      this.tableData.push({\n        date: '2016-05-02',\n        name: '李时珍',\n        gender: '男',\n        address: '四川省武当山普陀区金沙江路 1518 弄'\n      })\n      // 添加一行数据之后，找到添加的数据的行下标，也就是最后一行，开启这一行的编辑\n      const addedRowIndex = this.tableData.length - 1\n      this.$refs.table.addRowEditingSlot(addedRowIndex)\n      this.$nextTick(() =&gt; {\n        this.$refs[`name-${addedRowIndex}`].focus() // 开启新一行的编辑之后自动聚焦到新一行的第一个单元格\n      })\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"shu-xing-bian-ji-biao-ge\"><a class=\"header-anchor\" href=\"#shu-xing-bian-ji-biao-ge\">¶</a> 树形编辑表格</h3>\n<demo-block>\n        <div><p>支持树类型的数据的显示。当 row 中包含 <code>children</code> 字段时，被视为树形数据。渲染树形数据时，必须要指定 <code>row-key</code>。支持子节点数据异步加载。设置 Table 的 <code>lazy</code> 属性为 true 与加载函数 <code>load</code> 。通过指定 row 中的 <code>hasChildren</code> 字段来指定哪些行是包含子节点。<code>children</code> 与 <code>hasChildren</code> 都可以通过 <code>tree-props</code> 配置。</p>\n</div>\n        <template slot=\"source\"><df-demo6 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;df-button @click=&quot;handleClick&quot;&gt;获取树各层级rowKey&lt;/df-button&gt;\n    &lt;df-table\n      ref=&quot;table&quot;\n      :data=&quot;tableData&quot;\n      style=&quot;width: 100%;margin-bottom: 20px;&quot;\n      row-key=&quot;id&quot;\n      border\n      useTree\n      default-expand-all\n      :tree-props=&quot;{children: 'children', hasChildren: 'hasChildren'}&quot;\n      :columnOptions=&quot;columnOptions&quot;\n    &gt;\n      &lt;df-table-column\n        type=&quot;index&quot;\n        :index=&quot;indexMethod&quot;\n      /&gt;\n      &lt;df-table-column\n        prop=&quot;date&quot;\n        label=&quot;日期&quot;\n        sortable\n        width=&quot;180&quot;&gt;\n      &lt;/df-table-column&gt;\n      &lt;df-table-column\n        prop=&quot;name&quot;\n        label=&quot;姓名&quot;\n        sortable\n        width=&quot;180&quot;&gt;\n        &lt;template slot=&quot;editing&quot;  slot-scope=&quot;scope&quot;&gt;\n          &lt;df-input v-model=&quot;scope.row.name&quot; style=&quot;width: 100px&quot; /&gt;\n        &lt;/template&gt;\n      &lt;/df-table-column&gt;\n      &lt;df-table-column\n        prop=&quot;address&quot;\n        label=&quot;地址&quot;&gt;\n      &lt;/df-table-column&gt;\n    &lt;/df-table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  export default {\n    data() {\n      return {\n        columnOptions: {\n          editConfig: {\n            trigger: 'click',\n            mode: 'slot',\n            editableColumns: [\n              {\n                columnProp: 'name',\n                disableRowsIndex: []\n              }\n            ]\n          }\n        },\n        tableData: [{\n          id: 1,\n          date: '2016-05-02',\n          name: '李时珍',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        }, {\n          id: 22,\n          date: '2016-05-04',\n          name: '李时珍',\n          address: '四川省武当山普陀区金沙江路 1517 弄'\n        }, {\n          id: 33,\n          date: '2016-05-01',\n          name: '李时珍',\n          address: '四川省武当山普陀区金沙江路 1519 弄',\n          children: [{\n              id: 31,\n              date: '2016-05-01',\n              name: '李时珍',\n              address: '四川省武当山普陀区金沙江路 1519 弄'\n            }, {\n              id: 32,\n              date: '2016-05-01',\n              name: '李时珍',\n              address: '四川省武当山普陀区金沙江路 1519 弄'\n          }]\n        }, {\n          id: 44,\n          date: '2016-05-03',\n          name: '李时珍',\n          address: '四川省武当山普陀区金沙江路 1516 弄'\n        }]\n      }\n    },\n    methods: {\n      handleClick () {\n        const level1 = this.$refs.table.getTreeRowKeysByLevel(1)\n        const level2 = this.$refs.table.getTreeRowKeysByLevel(2)\n        console.log('获取第一层id', level1)\n        console.log('获取第二层id', level2)\n        this.$set(this.columnOptions.editConfig.editableColumns[0], 'disableRowsIndex', level1)\n        this.$nextTick(() =&gt; this.$refs.table.addAllEditingSlot(true))\n      },\n      indexMethod(index) {\n        return index\n      }\n    }\n  }\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"biao-tou-cha-cao-bian-ji\"><a class=\"header-anchor\" href=\"#biao-tou-cha-cao-bian-ji\">¶</a> 表头插槽编辑</h3>\n<p>使用插槽来自己定义表头编辑的内容。</p>\n<demo-block>\n        <div><p>表头编辑一般被用来跳转到此列的某一位置，编辑主要是由插槽来决定的，你需要定义好具名插槽<code>slots.headerEditing</code>里的内容，事件及方法参见下方文档。</p>\n</div>\n        <template slot=\"source\"><df-demo7 /></template>\n        <template slot=\"highlight\"><pre v-pre><code class=\"html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;df-table\n      :data=&quot;tableData&quot;\n      :column-options=&quot;columnOptions&quot;\n      style=&quot;width: 100%&quot;\n      height=&quot;300&quot;\n      ref=&quot;table&quot;&gt;\n      &lt;df-table-column type=&quot;expand&quot;&gt;\n        &lt;template slot-scope=&quot;props&quot;&gt;\n          &lt;df-form label-position=&quot;left&quot; inline class=&quot;demo-table-expand&quot;&gt;\n            &lt;df-form-item label=&quot;编号&quot;&gt;\n              &lt;span&gt;{{ props.row.id }}&lt;/span&gt;\n            &lt;/df-form-item&gt;\n            &lt;df-form-item label=&quot;姓名&quot;&gt;\n              &lt;span&gt;{{ props.row.name }}&lt;/span&gt;\n            &lt;/df-form-item&gt;\n            &lt;df-form-item label=&quot;性别&quot;&gt;\n              &lt;span&gt;{{ props.row.gender }}&lt;/span&gt;\n            &lt;/df-form-item&gt;\n            &lt;df-form-item label=&quot;地址&quot;&gt;\n              &lt;span&gt;{{ props.row.address }}&lt;/span&gt;\n            &lt;/df-form-item&gt;\n          &lt;/df-form&gt;\n        &lt;/template&gt;\n      &lt;/df-table-column&gt;\n      &lt;df-table-column prop=&quot;id&quot; label=&quot;编号&quot; width=&quot;180&quot;&gt;\n        &lt;df-select slot=&quot;headerEditing&quot; slot-scope=&quot;scope&quot; v-model=&quot;valueId&quot; placeholder=&quot;请选择&quot; @change=&quot;onIdChange&quot; @blur=&quot;restoreHeaderEditingSlot('id')&quot;&gt;\n          &lt;df-option\n            v-for=&quot;item in optionsId&quot;\n            :key=&quot;item.value&quot;\n            :label=&quot;item.label&quot;\n            :value=&quot;item.value&quot;&gt;\n          &lt;/df-option&gt;\n        &lt;/df-select&gt;\n      &lt;/df-table-column&gt;\n      &lt;df-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt;\n        &lt;df-input slot=&quot;headerEditing&quot; slot-scope=&quot;scope&quot; v-model=&quot;valueName&quot; placeholder=&quot;输入行数并按下enter&quot; @enterKeyDown=&quot;onNameEnterKeyDown&quot; @blur=&quot;restoreHeaderEditingSlot('name')&quot;&gt;&lt;/df-input&gt;\n      &lt;/df-table-column&gt;\n      &lt;df-table-column prop=&quot;gender&quot; label=&quot;性别&quot; width=&quot;180&quot; /&gt;\n      &lt;df-table-column prop=&quot;address&quot; label=&quot;地址&quot;&gt;\n        &lt;df-button slot=&quot;headerEditing&quot; slot-scope=&quot;scope&quot; @click=&quot;scrollToRowWithRowIndex(23)&quot;&gt;跳转到第24行&lt;/df-button&gt;\n      &lt;/df-table-column&gt;\n    &lt;/df-table&gt;\n    &lt;df-button @click=&quot;addHeaderEditingSlot('address')&quot; style=&quot;margin: 8px&quot;&gt;开启地址列的表头编辑&lt;/df-button&gt;\n    &lt;df-button @click=&quot;restoreHeaderEditingSlot('address')&quot; style=&quot;margin: 8px&quot;&gt;关闭地址列的表头编辑&lt;/df-button&gt;\n    &lt;df-button @click=&quot;addAllHeaderEditingSlot&quot; style=&quot;margin: 8px&quot;&gt;开启所有的表头编辑&lt;/df-button&gt;\n    &lt;df-button @click=&quot;restoreAllHeaderEditingSlot&quot; style=&quot;margin: 8px&quot;&gt;关闭所有的表头编辑&lt;/df-button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data () {\n    return {\n      columnOptions: {\n        headerEditConfig: {\n          editableHeaders: ['id', 'name', 'address']\n        }\n      },\n      tableData: new Array(40).fill().map((item, index) =&gt; ({\n        id: `第 ${index + 1} 号`,\n        name: `李时珍 ${index + 1} 号`,\n        gender: '男',\n        address: `四川省武当山普陀区金沙江路 ${index + 1} 弄`\n      })),\n      optionsId: [],\n      valueId: 4,\n      valueName: ''\n    }\n  },\n  created () {\n    this.optionsId = this.tableData.map((row, rowIndex) =&gt; {\n      return {\n        value: rowIndex,\n        label: `跳转到${row.id}`\n      }\n    })\n  },\n  methods: {\n    onIdChange (rowIndex) {\n      this.scrollToRowWithRowIndex(rowIndex)\n    },\n    onNameEnterKeyDown () {\n      let rowIndex = Number(this.valueName)\n      if (this.valueName &lt; 0)rowIndex = 0\n      if (this.valueName &gt; this.tableData.length) rowIndex = this.tableData.length\n      this.scrollToRowWithRowIndex(rowIndex - 1)\n    },\n    scrollToRowWithRowIndex (rowIndex) {\n      // 如果表格中含有展开行, 则使用 scrollToRowIndex 跳转之前, 需要先收起所有的展开行\n      this.$refs.table.closeAllTree()\n      this.$refs.table.scrollToRowIndex(rowIndex)\n    },\n    addHeaderEditingSlot (columnProp) {\n      this.$refs.table.addHeaderEditingSlot(columnProp)\n    },\n    restoreHeaderEditingSlot (columnProp) {\n      this.$refs.table.restoreHeaderEditingSlot(columnProp)\n    },\n    addAllHeaderEditingSlot () {\n      this.$refs.table.addAllHeaderEditingSlot()\n    },\n    restoreAllHeaderEditingSlot () {\n      this.$refs.table.restoreAllHeaderEditingSlot()\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre></template></demo-block><h3 id=\"table-attributes\"><a class=\"header-anchor\" href=\"#table-attributes\">¶</a> Table Attributes</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>可选值</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>column-options</td>\n<td>列配置</td>\n<td>array</td>\n<td>—</td>\n<td>—</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"table-events\"><a class=\"header-anchor\" href=\"#table-events\">¶</a> Table Events</h3>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>说明</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>edit-disabled</td>\n<td>开启表格编辑时，想要编辑被禁用的单元格后触发（参数：禁用处的列信息、禁用处的行下标、禁用处的行信息）</td>\n<td>newVal, rowIndex, row, column</td>\n</tr>\n<tr>\n<td>switch-to-editing-slot</td>\n<td>插槽情况下，某一单元格切换到了编辑插槽时触发（参数：切换处的列prop、切换处的行下标、切换处的行信息、触发方式(如果是点击触发的就是 click, 否则是 undefined)）</td>\n<td>columnProp, rowIndex, row, triggerType</td>\n</tr>\n<tr>\n<td>restore-editing-slot</td>\n<td>插槽情况下，某一单元格从编辑插槽切回了原始渲染结构时触发（参数：切换处的列prop、切换处的行下标和切换处的行信息）</td>\n<td>columnProp, rowIndex, row</td>\n</tr>\n<tr>\n<td>switch-to-editing-header</td>\n<td>/<em>新增</em>/ 配置了表头筛选之后，某一表头切换到了筛选状态时触发（参数：切换处的列的prop）</td>\n<td>columnProp</td>\n</tr>\n<tr>\n<td>restore-editing-header</td>\n<td>/<em>新增</em>/ 配置了表头筛选之后，某一表头从筛选状态切回正常状态时触发（参数：切换处的列的prop）</td>\n<td>columnProp</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"table-methods\"><a class=\"header-anchor\" href=\"#table-methods\">¶</a> Table Methods</h3>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n<th>传入参数</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>addEditingSlot</td>\n<td>用于开启某单元格的编辑插槽</td>\n<td>columnProp, rowIndex</td>\n<td>-</td>\n</tr>\n<tr>\n<td>restoreEditingSlot</td>\n<td>用于关闭某单元格的编辑插槽</td>\n<td>columnProp, rowIndex</td>\n<td>-</td>\n</tr>\n<tr>\n<td>addRowEditingSlot</td>\n<td>用于开启某行的编辑插槽</td>\n<td>rowIndex</td>\n<td>-</td>\n</tr>\n<tr>\n<td>restoreRowEditingSlot</td>\n<td>用于关闭某行的编辑插槽</td>\n<td>rowIndex</td>\n<td>-</td>\n</tr>\n<tr>\n<td>addAllEditingSlot</td>\n<td>开启所有的编辑插槽</td>\n<td>{excludeMode: 排除方式(row/column/cell/rowAndColumn), excludeColumnProp: 排除列prop, excludeRowIndex: 排除行下标}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>restoreAllEditingSlot</td>\n<td>关闭所有的编辑插槽</td>\n<td>{excludeMode: 排除方式(row/column/cell/rowAndColumn), excludeColumnProp: 排除列prop, excludeRowIndex: 排除行下标}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>validateCell</td>\n<td>检查某一单元格</td>\n<td>columnProp, rowIndex</td>\n<td>promise.reslove 返回检查的结果，没有 reject</td>\n</tr>\n<tr>\n<td>validateRow</td>\n<td>检查某一行</td>\n<td>rowIndex</td>\n<td>promise.reslove 返回检查的结果，没有 reject</td>\n</tr>\n<tr>\n<td>validateRows</td>\n<td>检查某些行</td>\n<td>rowIndexes</td>\n<td>promise.reslove 返回检查的结果，没有 reject</td>\n</tr>\n<tr>\n<td>validateAll</td>\n<td>检查表格的所有数据</td>\n<td>—</td>\n<td>promise.reslove 返回检查的结果，没有 reject</td>\n</tr>\n<tr>\n<td>clearCellValidate</td>\n<td>清除某一单元格</td>\n<td>columnProp, rowIndex</td>\n<td>-</td>\n</tr>\n<tr>\n<td>clearRowValidate</td>\n<td>清除某一行的检查</td>\n<td>rowIndex</td>\n<td>-</td>\n</tr>\n<tr>\n<td>clearRowsValidate</td>\n<td>清除某些行的检查</td>\n<td>rowIndexes</td>\n<td>-</td>\n</tr>\n<tr>\n<td>clearAllValidate</td>\n<td>清除表格的所有检查</td>\n<td>—</td>\n<td>-</td>\n</tr>\n<tr>\n<td>getNextEditableSlot</td>\n<td>寻找下一个可编辑单元格的位置（如果传入当前位置，则找当前位置的下一个，如果不传入当前位置，则找当前最后一个正在开启的编辑插槽的下一个，以上条件都不满足，则找所有可编辑插槽的第一个，如果仍然找不到，则返回空对象）</td>\n<td>columnProp, rowIndex</td>\n<td>{columnProp, rowIndex, isFirstEditableSlot(是否是第一个可编辑 slot)}</td>\n</tr>\n<tr>\n<td>addHeaderEditingSlot</td>\n<td>用于开启某列的表头编辑插槽</td>\n<td>columnProp</td>\n<td>-</td>\n</tr>\n<tr>\n<td>restoreHeaderEditingSlot</td>\n<td>用于关闭某列的表头编辑插槽</td>\n<td>columnProp</td>\n<td>-</td>\n</tr>\n<tr>\n<td>addAllHeaderEditingSlot</td>\n<td>开启所有的表头编辑插槽，传入某一列的 prop，可以在开启时忽略此列</td>\n<td>columnProp</td>\n<td>-</td>\n</tr>\n<tr>\n<td>restoreAllHeaderEditingSlot</td>\n<td>关闭所有的表头编辑插槽，传入某一列的 prop，可以在关闭时忽略此列</td>\n<td>columnProp</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"table-column-slot\"><a class=\"header-anchor\" href=\"#table-column-slot\">¶</a> Table-column Slot</h3>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>editing</td>\n<td>单元格的编辑插槽。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"columnoptions.editconfig-biao-ge-bian-ji-can-shu-gui-ze\"><a class=\"header-anchor\" href=\"#columnoptions.editconfig-biao-ge-bian-ji-can-shu-gui-ze\">¶</a> columnOptions.editConfig 表格编辑 参数规则</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>可选值</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>trigger</td>\n<td>编辑触发方式</td>\n<td>string</td>\n<td>hover(mode 为 slot 时不可用)/click/dblclick</td>\n<td>—</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>编辑形式</td>\n<td>string</td>\n<td>cell</td>\n<td>cell/slot</td>\n</tr>\n<tr>\n<td>unEditableColumns</td>\n<td>不可编辑列选项，这是一个快速反向配置编辑列的属性，放入不可编辑列的 prop，则表示除了这些列之外的其它列都需要编辑，如果不放任何元素，则表示所有列都可编辑。当此属性存在时，editableColumns 属性将会被忽略</td>\n<td>array</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>editableColumns</td>\n<td>编辑列选项</td>\n<td>array</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>item</td>\n<td>/<em>代号</em>/ 这里用 item 表示 editableColumns 的每一项，可以直接放入 column 的 prop，也可以放入一个对象进行更详细的配置，参见下方的对象配置说明</td>\n<td>object/string</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>item &gt; columnProp</td>\n<td>可编辑列的 prop</td>\n<td>string</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>item &gt; type (mode 为 slot 时不可用)</td>\n<td>可编辑列的输入类型</td>\n<td>string</td>\n<td>input/inputNumber/select</td>\n<td>input</td>\n</tr>\n<tr>\n<td>item &gt; disableRowsIndex</td>\n<td>可编辑列中禁止编辑的行的下标，如果你想禁用此列的某一行处的编辑功能，把行下标放进去即可</td>\n<td>array</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>item &gt; attrs (mode 为 slot 时不可用)</td>\n<td>编辑时使用的输入组件的 attributes，可以自由配置除 size 之外的所有组件属性值</td>\n<td>object</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>item &gt; options (mode 为 slot 时不可用)</td>\n<td>当输入类型是 select 时，通过此值配置 select 的 options</td>\n<td>array</td>\n<td>—</td>\n<td>—</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"columnoptions.validateconfig-biao-ge-xiao-yan-can-shu-gui-ze\"><a class=\"header-anchor\" href=\"#columnoptions.validateconfig-biao-ge-xiao-yan-can-shu-gui-ze\">¶</a> columnOptions.validateConfig 表格校验 参数规则</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>可选值</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>needErrTips</td>\n<td>是否需要错误提示</td>\n<td>boolean</td>\n<td>—</td>\n<td>false</td>\n</tr>\n<tr>\n<td>columnRules</td>\n<td>检查列规则</td>\n<td>array</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>item</td>\n<td>/<em>代号</em>/ 这里用 item 表示 columnRules 的每一项</td>\n<td>object</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>item &gt; columnProp</td>\n<td>检查列的 prop</td>\n<td>string</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>item &gt; rules</td>\n<td>检查列的检查规则</td>\n<td>array/function(row, rowIndex)</td>\n<td>—</td>\n<td>—</td>\n</tr>\n<tr>\n<td>item &gt; ignoredRowsIndex</td>\n<td>检查列中忽略检查的行的下标，如果你想忽略此列的某一行处的检查功能，把行下标放进去即可</td>\n<td>array</td>\n<td>—</td>\n<td>—</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"columnoptions.headereditconfig-biao-tou-shai-xuan-can-shu-gui-ze\"><a class=\"header-anchor\" href=\"#columnoptions.headereditconfig-biao-tou-shai-xuan-can-shu-gui-ze\">¶</a> columnOptions.headerEditConfig 表头筛选 参数规则</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>可选值</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>editableHeaders</td>\n<td>表示可筛选的列，将列的 prop 放进去即可，例如 ['date', 'name']</td>\n<td>array[string]</td>\n<td>—</td>\n<td>—</td>\n</tr>\n</tbody>\n</table>\n\n      </section>\n    </template>\n    <script>\n      export default {\n        name: 'component-doc',\n        components: {\n          \"df-demo0\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-table',{ref:\"table\",staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.tableData,\"columnOptions\":_vm.columnOptions},on:{\"edit-disabled\":_vm.cellEditDisabled,\"switch-to-editing-slot\":_vm.switchToEditingSlot,\"restore-editing-slot\":_vm.restoreEditingSlot}},[_c('df-table-column',{attrs:{\"prop\":\"date\",\"label\":\"日期\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{staticStyle:{\"display\":\"flex\"}},[_c('df-input',{model:{value:(scope.row.date),callback:function ($$v) {_vm.$set(scope.row, \"date\", $$v)},expression:\"scope.row.date\"}}),_vm._v(\" \"),_c('df-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){return _vm.saveEdit(scope.column.property, scope.$index)}}},[_vm._v(\"保存\")])],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"name\",\"label\":\"姓名\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){return _vm.saveEdit(scope.column.property, scope.$index)}}},[_vm._v(\"关闭编辑插槽\")])],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"address\",\"label\":\"地址\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-button',{on:{\"click\":function($event){return _vm.saveEdit(scope.column.property, scope.$index)}}},[_vm._v(\"关闭编辑插槽\")])],1)}}])})],1)]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: [\n            {\n              columnProp: 'date',\n              disableRowsIndex: [0]\n            },\n            'name',\n            'address'\n          ]\n        }\n      },\n      tableData: [{\n        date: '2016-05-02',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1518 弄'\n      }, {\n        date: '2016-05-04',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1517 弄'\n      }, {\n        date: '2016-05-01',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1519 弄'\n      }, {\n        date: '2016-05-03',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1516 弄'\n      }]\n    }\n  },\n  methods: {\n    saveEdit (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message('此单元格禁止编辑！')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo1\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-table',{ref:\"table\",staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.tableData,\"columnOptions\":_vm.columnOptions},on:{\"edit-disabled\":_vm.cellEditDisabled,\"switch-to-editing-slot\":_vm.switchToEditingSlot,\"restore-editing-slot\":_vm.restoreEditingSlot}},[_c('df-table-column',{attrs:{\"prop\":\"date\",\"label\":\"日期\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{staticStyle:{\"display\":\"flex\"}},[_c('df-input',{model:{value:(scope.row.date),callback:function ($$v) {_vm.$set(scope.row, \"date\", $$v)},expression:\"scope.row.date\"}}),_vm._v(\" \"),_c('df-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){return _vm.saveEdit(scope.column.property, scope.$index)}}},[_vm._v(\"保存\")])],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"name\",\"label\":\"姓名\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){return _vm.saveEdit(scope.column.property, scope.$index)}}},[_vm._v(\"关闭编辑插槽\")])],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"address\",\"label\":\"地址\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-button',{on:{\"click\":function($event){return _vm.saveEdit(scope.column.property, scope.$index)}}},[_vm._v(\"关闭编辑插槽\")])],1)}}])})],1)]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          // rowDisableFunc 函数可以直接控制一整行的编辑禁用, 函数自动接收两个参数(行数据, 行下标)\n          rowDisableFunc: (row, rowIndex) => {\n            return row.disableRow\n          },\n          editableColumns: [\n            {\n              columnProp: 'date',\n              disableRowsIndex: [2]\n            },\n            {\n              columnProp: 'name',\n              // disableRowsIndex 可以写成函数, 来动态的判断某个单元格的编辑禁用, 函数自动接收两个参数(行数据, 行下标)\n              disableRowsIndex: (row, rowIndex) => {\n                return row.disableName\n              }\n            },\n            'address'\n          ]\n        }\n      },\n      tableData: [{\n        date: '2016-05-02',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1518 弄',\n        disableRow: true\n      }, {\n        date: '2016-05-04',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1517 弄',\n        disableRow: false,\n        disableName: true\n      }, {\n        date: '2016-05-01',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1519 弄',\n        disableRow: false\n      }, {\n        date: '2016-05-03',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1516 弄',\n        disableRow: false\n      }]\n    }\n  },\n  methods: {\n    saveEdit (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message('此单元格禁止编辑！')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo2\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('div',[_c('df-table',{ref:\"table\",staticStyle:{\"width\":\"100%\",\"margin-bottom\":\"20px\"},attrs:{\"data\":_vm.tableData,\"columnOptions\":_vm.columnOptions},on:{\"edit-disabled\":_vm.cellEditDisabled,\"switch-to-editing-slot\":_vm.switchToEditingSlot,\"restore-editing-slot\":_vm.restoreEditingSlot}},[_c('df-table-column',{attrs:{\"prop\":\"date\",\"label\":\"日期\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{staticStyle:{\"display\":\"flex\"}},[_c('df-input',{staticStyle:{\"width\":\"100px\"},model:{value:(scope.row.date),callback:function ($$v) {_vm.$set(scope.row, \"date\", $$v)},expression:\"scope.row.date\"}}),_vm._v(\" \"),_c('df-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){return _vm.saveEditThenCheckCurrentRow(scope.column.property, scope.$index)}}},[_vm._v(\"保存\")])],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"name\",\"label\":\"姓名\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-input',{staticStyle:{\"width\":\"100px\"},model:{value:(scope.row.name),callback:function ($$v) {_vm.$set(scope.row, \"name\", $$v)},expression:\"scope.row.name\"}}),_vm._v(\" \"),_c('df-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){return _vm.saveEditThenCheckCurrentRow(scope.column.property, scope.$index)}}},[_vm._v(\"保存\")])],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"address\",\"label\":\"地址\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-input',{staticStyle:{\"width\":\"200px\"},model:{value:(scope.row.address),callback:function ($$v) {_vm.$set(scope.row, \"address\", $$v)},expression:\"scope.row.address\"}}),_vm._v(\" \"),_c('df-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){return _vm.saveEditThenCheckCurrentRow(scope.column.property, scope.$index)}}},[_vm._v(\"保存\")])],1)}}])})],1),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.validateCell(0, 'name')}}},[_vm._v(\"检查第一行name的数据\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.validateCell(2, 'name')}}},[_vm._v(\"检查第三行name的数据\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.validateRow(0)}}},[_vm._v(\"检查第一行的数据\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.validateRows([2, 3])}}},[_vm._v(\"检查后两行的数据\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":_vm.validateAll}},[_vm._v(\"检查表格的所有数据\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"10px\"}}),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.clearCellValidate(0, 'name')}}},[_vm._v(\"清除第一行name的检查\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.clearCellValidate(2, 'name')}}},[_vm._v(\"清除第三行name的检查\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.clearRowValidate(0)}}},[_vm._v(\"清除第一行的检查\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.clearRowsValidate([2, 3])}}},[_vm._v(\"清除后两行的检查\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":_vm.clearAllValidate}},[_vm._v(\"清除表格的所有检查\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"10px\"}}),_vm._v(\" \"),_c('df-button',{on:{\"click\":_vm.saveAllEditThenCheck}},[_vm._v(\"保存所有编辑并检查结果\")])],1)]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: [\n            {\n              columnProp: 'date',\n              disableRowsIndex: [0]\n            },\n            {\n              columnProp: 'name'\n            },\n            {\n              columnProp: 'address'\n            }\n          ]\n        },\n        validateConfig: {\n          needErrTips: true,\n          columnRules: [\n            {\n              columnProp: 'date',\n              rules: [\n                { required: true, message: '请输入日期' }\n              ],\n              ignoredRowsIndex: [0]\n            },\n            {\n              columnProp: 'name',\n              // 将 rules 配置为函数以动态设置 rules，函数自动接收两个参数(行数据, 行下标)，对于本示例，如果是第一行，校验规则为必输，如果是其它行，则校验规则改为长度最少为 2\n              rules: (row, rowIndex) => {\n                if (rowIndex === 0) return [{ required: true, message: '请输入姓名' }]\n                else return [{ min: 2, message: '姓名长度至少是两个字符' }]\n              }\n            },\n            {\n              columnProp: 'address',\n              rules: [\n                { required: true, message: '请输入地址' },\n                { max: 20, message: '地址最多是二十个字符' }\n              ]\n            }\n          ]\n        }\n      },\n      tableData: [{\n        date: '',\n        name: '',\n        address: '四川省武当山普陀区金沙江路 1518 弄'\n      }, {\n        date: '2016-05-04',\n        name: '李',\n        address: '四川省武当山普陀区金沙江路 1517 弄 超出的字符',\n      }, {\n        date: '',\n        name: '李',\n        address: '四川省武当山普陀区金沙江路 1519 弄 超出的字符'\n      }, {\n        date: '2016-05-03',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1519 弄 超出的字符'\n      }]\n    }\n  },\n  methods: {\n    saveEditThenCheckCurrentRow (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n      this.validateRow(rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message('此单元格禁止编辑！')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    },\n    validateCell (rowIndex, columnProp) {\n      this.$refs.table.validateCell(columnProp, rowIndex).then(checkRes => {\n        console.log(`第 ${rowIndex + 1} 行 ${columnProp} 的检查结果:`, checkRes)\n      })\n    },\n    validateRow (rowIndex) {\n      this.$refs.table.validateRow(rowIndex).then(checkRes => {\n        console.log(`第 ${rowIndex} 行的检查结果:`, checkRes)\n      })\n    },\n    validateRows (rowIndexes) {\n      this.$refs.table.validateRows(rowIndexes).then(checkRes => {\n        console.log(`第 ${rowIndexes} 行的检查结果:`, checkRes)\n      })\n    },\n    validateAll () {\n      this.$refs.table.validateAll().then(checkRes => {\n        console.log('所有数据检查结果:', checkRes)\n      })\n    },\n    clearCellValidate (rowIndex, columnProp) {\n      this.$refs.table.clearCellValidate(columnProp, rowIndex)\n    },\n    clearRowValidate (rowIndex) {\n      this.$refs.table.clearRowValidate(rowIndex)\n    },\n    clearRowsValidate (rowIndexes) {\n      this.$refs.table.clearRowsValidate(rowIndexes)\n    },\n    clearAllValidate () {\n      this.$refs.table.clearAllValidate()\n    },\n    saveAllEditThenCheck () {\n      this.$refs.table.restoreAllEditingSlot()\n      this.validateAll()\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo3\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('div',[_c('df-table',{ref:\"table\",staticStyle:{\"width\":\"100%\",\"margin-bottom\":\"20px\"},attrs:{\"data\":_vm.tableData,\"columnOptions\":_vm.columnOptions},on:{\"edit-disabled\":_vm.cellEditDisabled,\"switch-to-editing-slot\":_vm.switchToEditingSlot,\"restore-editing-slot\":_vm.restoreEditingSlot}},[_c('df-table-column',{attrs:{\"prop\":\"date\",\"label\":\"日期\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{staticStyle:{\"display\":\"flex\"}},[_c('df-input',{staticStyle:{\"width\":\"100px\"},model:{value:(scope.row.date),callback:function ($$v) {_vm.$set(scope.row, \"date\", $$v)},expression:\"scope.row.date\"}}),_vm._v(\" \"),_c('df-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){return _vm.saveEditThenCheckCurrentRow(scope.column.property, scope.$index)}}},[_vm._v(\"保存\")])],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"name\",\"label\":\"姓名\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-input',{staticStyle:{\"width\":\"100px\"},model:{value:(scope.row.name),callback:function ($$v) {_vm.$set(scope.row, \"name\", $$v)},expression:\"scope.row.name\"}}),_vm._v(\" \"),_c('df-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){return _vm.saveEditThenCheckCurrentRow(scope.column.property, scope.$index)}}},[_vm._v(\"保存\")])],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"address\",\"label\":\"地址\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-input',{staticStyle:{\"width\":\"200px\"},model:{value:(scope.row.address),callback:function ($$v) {_vm.$set(scope.row, \"address\", $$v)},expression:\"scope.row.address\"}}),_vm._v(\" \"),_c('df-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){return _vm.saveEditThenCheckCurrentRow(scope.column.property, scope.$index)}}},[_vm._v(\"保存\")])],1)}}])})],1),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.validateCell(0, 'name')}}},[_vm._v(\"检查第一行name的数据\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.validateCell(2, 'name')}}},[_vm._v(\"检查第三行name的数据\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.validateRow(0)}}},[_vm._v(\"检查第一行的数据\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.validateRows([2, 3])}}},[_vm._v(\"检查后两行的数据\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":_vm.validateAll}},[_vm._v(\"检查表格的所有数据\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"10px\"}}),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.clearCellValidate(0, 'name')}}},[_vm._v(\"清除第一行name的检查\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.clearCellValidate(2, 'name')}}},[_vm._v(\"清除第三行name的检查\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.clearRowValidate(0)}}},[_vm._v(\"清除第一行的检查\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":function($event){return _vm.clearRowsValidate([2, 3])}}},[_vm._v(\"清除后两行的检查\")]),_vm._v(\" \"),_c('df-button',{on:{\"click\":_vm.clearAllValidate}},[_vm._v(\"清除表格的所有检查\")]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"10px\"}}),_vm._v(\" \"),_c('df-button',{on:{\"click\":_vm.saveAllEditThenCheck}},[_vm._v(\"保存所有编辑并检查结果\")])],1)]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: [\n            {\n              columnProp: 'date',\n              disableRowsIndex: [0]\n            },\n            {\n              columnProp: 'name'\n            },\n            {\n              columnProp: 'address'\n            }\n          ]\n        },\n        validateConfig: {\n          needErrTips: true,\n          // rowIgnoredFunc 函数可以直接控制一整行的校验忽略, 函数自动接收两个参数(行数据, 行下标)\n          rowIgnoredFunc: (row, rowIndex) => {\n            return row.ignoreRow\n          },\n          columnRules: [\n            {\n              columnProp: 'date',\n              rules: [\n                { required: true, message: '请输入日期' }\n              ],\n              ignoredRowsIndex: [0]\n            },\n            {\n              columnProp: 'name',\n              // 将 rules 配置为函数以动态设置 rules，函数自动接收两个参数(行数据, 行下标)，对于本示例，如果是第一行，校验规则为必输，如果是其它行，则校验规则改为长度最少为 2\n              rules: (row, rowIndex) => {\n                if (rowIndex === 0) return [{ required: true, message: '请输入姓名' }]\n                else return [{ min: 2, message: '姓名长度至少是两个字符' }]\n              }\n            },\n            {\n              columnProp: 'address',\n              rules: [\n                { required: true, message: '请输入地址' },\n                { max: 20, message: '地址最多是二十个字符' }\n              ],\n              // ignoredRowsIndex 可以写成函数, 来动态的判断某个单元格的校验忽略, 函数自动接收两个参数(行数据, 行下标)\n              ignoredRowsIndex: (row, rowIndex) => {\n                return row.ignoreAddressValidate\n              }\n            }\n          ]\n        }\n      },\n      tableData: [{\n        date: '',\n        name: '',\n        address: '四川省武当山普陀区金沙江路 1518 弄'\n      }, {\n        date: '2016-05-04',\n        name: '李',\n        address: '四川省武当山普陀区金沙江路 1517 弄 超出的字符'\n      }, {\n        date: '',\n        name: '李',\n        address: '四川省武当山普陀区金沙江路 1519 弄 超出的字符',\n        ignoreAddressValidate: true\n      }, {\n        date: '2016-05-03',\n        name: '李时珍',\n        address: '四川省武当山普陀区金沙江路 1519 弄 超出的字符',\n        ignoreRow: true\n      }]\n    }\n  },\n  methods: {\n    saveEditThenCheckCurrentRow (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n      this.validateRow(rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message('此单元格禁止编辑！')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    },\n    validateCell (rowIndex, columnProp) {\n      this.$refs.table.validateCell(columnProp, rowIndex).then(checkRes => {\n        console.log(`第 ${rowIndex + 1} 行 ${columnProp} 的检查结果:`, checkRes)\n      })\n    },\n    validateRow (rowIndex) {\n      this.$refs.table.validateRow(rowIndex).then(checkRes => {\n        console.log(`第 ${rowIndex} 行的检查结果:`, checkRes)\n      })\n    },\n    validateRows (rowIndexes) {\n      this.$refs.table.validateRows(rowIndexes).then(checkRes => {\n        console.log(`第 ${rowIndexes} 行的检查结果:`, checkRes)\n      })\n    },\n    validateAll () {\n      this.$refs.table.validateAll().then(checkRes => {\n        console.log('所有数据检查结果:', checkRes)\n      })\n    },\n    clearCellValidate (rowIndex, columnProp) {\n      this.$refs.table.clearCellValidate(columnProp, rowIndex)\n    },\n    clearRowValidate (rowIndex) {\n      this.$refs.table.clearRowValidate(rowIndex)\n    },\n    clearRowsValidate (rowIndexes) {\n      this.$refs.table.clearRowsValidate(rowIndexes)\n    },\n    clearAllValidate () {\n      this.$refs.table.clearAllValidate()\n    },\n    saveAllEditThenCheck () {\n      this.$refs.table.restoreAllEditingSlot()\n      this.validateAll()\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo4\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-table',{ref:\"table\",staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.tableData,\"columnOptions\":_vm.columnOptions,\"row-key\":\"id\"},on:{\"edit-disabled\":_vm.cellEditDisabled,\"switch-to-editing-slot\":_vm.switchToEditingSlot,\"restore-editing-slot\":_vm.restoreEditingSlot}},[_c('df-table-column',{attrs:{\"type\":\"index\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"date\",\"label\":\"日期\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-input',{ref:((scope.column.property) + \"-\" + (scope.$index)),on:{\"enterKeyDown\":function($event){return _vm.enterKeyDown(scope.column.property, scope.$index)},\"blur\":function($event){return _vm.saveEdit(scope.column.property, scope.$index)}},model:{value:(scope.row.date),callback:function ($$v) {_vm.$set(scope.row, \"date\", $$v)},expression:\"scope.row.date\"}})],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"name\",\"label\":\"姓名\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-input',{ref:((scope.column.property) + \"-\" + (scope.$index)),on:{\"enterKeyDown\":function($event){return _vm.enterKeyDown(scope.column.property, scope.$index)},\"blur\":function($event){return _vm.saveEdit(scope.column.property, scope.$index)}},model:{value:(scope.row.name),callback:function ($$v) {_vm.$set(scope.row, \"name\", $$v)},expression:\"scope.row.name\"}})],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"gender\",\"label\":\"性别\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-select',{ref:((scope.column.property) + \"-\" + (scope.$index)),on:{\"enterKeyDown\":function($event){return _vm.enterKeyDown(scope.column.property, scope.$index)},\"blur\":function($event){return _vm.saveEdit(scope.column.property, scope.$index)}},model:{value:(scope.row.gender),callback:function ($$v) {_vm.$set(scope.row, \"gender\", $$v)},expression:\"scope.row.gender\"}},[_c('df-option',{attrs:{\"value\":\"男\"}}),_vm._v(\" \"),_c('df-option',{attrs:{\"value\":\"女\"}})],1)],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"address\",\"label\":\"地址\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-input',{ref:((scope.column.property) + \"-\" + (scope.$index)),on:{\"enterKeyDown\":function($event){return _vm.enterKeyDown(scope.column.property, scope.$index)},\"blur\":function($event){return _vm.saveEdit(scope.column.property, scope.$index)}},model:{value:(scope.row.address),callback:function ($$v) {_vm.$set(scope.row, \"address\", $$v)},expression:\"scope.row.address\"}})],1)}}])})],1)]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: [\n            {\n              columnProp: 'date',\n              disableRowsIndex: [0]\n            },\n            'name',\n            'gender',\n            'address'\n          ]\n        },\n        validateConfig: {\n          needErrTips: true,\n          columnRules: [\n            {\n              columnProp: 'date',\n              rules: [\n                { required: true, message: '请输入日期' }\n              ]\n            },\n            {\n              columnProp: 'name',\n              rules: [\n                { required: true, message: '请输入姓名' },\n                { min: 2, message: '姓名长度至少是两个字符' }\n              ]\n            },\n            {\n              columnProp: 'gender',\n              rules: [\n                { required: true, message: '请选择性别' }\n              ]\n            },\n            {\n              columnProp: 'address',\n              rules: [\n                { required: true, message: '请输入地址' },\n                { max: 20, message: '地址最多是二十个字符' }\n              ]\n            }\n          ]\n        }\n      },\n      tableData: [{\n        id: '4',\n        date: '2016-05-02',\n        name: '李时珍',\n        gender: '男',\n        address: '四川省武当山普陀区金沙江路 1518 弄'\n      }, {\n        id: '5',\n        date: '2016-05-04',\n        name: '李时珍',\n        gender: '女',\n        address: '四川省武当山普陀区金沙江路 1517 弄'\n      }, {\n        id: '6',\n        date: '2016-05-01',\n        name: '',\n        gender: '',\n        address: '四川省武当山普陀区金沙江路 1519 弄'\n      }, {\n        id: '7',\n        date: '2016-05-03',\n        name: '李时珍',\n        gender: '男',\n        address: '四川省武当山普陀区金沙江路 1516 弄'\n      }]\n    }\n  },\n  methods: {\n    saveEdit (columnProp, rowIndex) {\n      this.$refs.table.restoreEditingSlot(columnProp, rowIndex)\n    },\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message('此单元格禁止编辑！')\n    },\n    switchToEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n      this.$nextTick(() => {\n        this.$refs[`${columnProp}-${rowIndex}`].focus()\n      })\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    },\n    enterKeyDown (currentColumnProp, currentRowIndex) {\n      console.log(`当前按下 enter 键的单元格是第 ${currentRowIndex + 1} 行的 ${currentColumnProp} 列`)\n      this.$refs.table.validateCell(currentColumnProp, currentRowIndex)\n        .then(res => {\n          console.log('当前单元格校验结果', res)\n          if (res.message) { // 校验不通过，应给与提示，不要自动切到下一单元格\n            this.$message({\n              message: res.message,\n              type: 'warning'\n            })\n          } else { // 校验通过，自动切到下一单元格\n            const {columnProp, rowIndex, isFirstEditableSlot} = this.$refs.table.getNextEditableSlot(currentColumnProp, currentRowIndex)\n            console.log(`它下一个可编辑单元格是第 ${rowIndex + 1} 行的 ${columnProp} 列`)\n            if (isFirstEditableSlot) { // isFirstEditableSlot 为 true，表示下一个可编辑插槽位置是整张表的第一个可编辑 slot，换句话说，现在已经到了最后一个可编辑单元格了\n              this.$message({\n                message: '已经到最后一个可编辑单元格了',\n                type: 'warning'\n              })\n            } else {\n              this.$refs.table.addEditingSlot(columnProp, rowIndex)\n            }\n          }\n        })\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo5\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('df-table',{ref:\"table\",staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.tableData,\"columnOptions\":_vm.columnOptions},on:{\"edit-disabled\":_vm.cellEditDisabled,\"switch-to-editing-slot\":_vm.switchToEditingSlot,\"restore-editing-slot\":_vm.restoreEditingSlot,\"button-click\":_vm.onButtonClick}},[_c('df-table-column',{attrs:{\"prop\":\"name\",\"label\":\"姓名\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-input',{ref:((scope.column.property) + \"-\" + (scope.$index)),on:{\"enterKeyDown\":function($event){return _vm.enterKeyDown(scope.column.property, scope.$index)}},model:{value:(scope.row.name),callback:function ($$v) {_vm.$set(scope.row, \"name\", $$v)},expression:\"scope.row.name\"}})],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"date\",\"label\":\"日期\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-date-picker',{ref:((scope.column.property) + \"-\" + (scope.$index)),attrs:{\"type\":\"date\",\"placeholder\":\"选择日期\"},on:{\"enterKeyDown\":function($event){return _vm.enterKeyDown(scope.column.property, scope.$index)}},model:{value:(scope.row.date),callback:function ($$v) {_vm.$set(scope.row, \"date\", $$v)},expression:\"scope.row.date\"}})],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"gender\",\"label\":\"性别\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-select',{ref:((scope.column.property) + \"-\" + (scope.$index)),on:{\"enterKeyDown\":function($event){return _vm.enterKeyDown(scope.column.property, scope.$index)}},model:{value:(scope.row.gender),callback:function ($$v) {_vm.$set(scope.row, \"gender\", $$v)},expression:\"scope.row.gender\"}},[_c('df-option',{attrs:{\"value\":\"男\"}}),_vm._v(\" \"),_c('df-option',{attrs:{\"value\":\"女\"}})],1)],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"address\",\"label\":\"地址\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return _c('div',{},[_c('df-input',{ref:((scope.column.property) + \"-\" + (scope.$index)),on:{\"enterKeyDown\":function($event){return _vm.enterKeyDown(scope.column.property, scope.$index)}},model:{value:(scope.row.address),callback:function ($$v) {_vm.$set(scope.row, \"address\", $$v)},expression:\"scope.row.address\"}})],1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"width\":\"150\",\"type\":\"buttons\",\"button-type\":\"text\",\"buttons\":['新增', '编辑']}})],1)]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      columnOptions: {\n        editConfig: {\n          trigger: 'click',\n          mode: 'slot',\n          editableColumns: [\n            'name',\n            'date',\n            'gender',\n            'address'\n          ]\n        },\n        validateConfig: {\n          needErrTips: true,\n          columnRules: [\n            {\n              columnProp: 'name',\n              rules: [\n                { required: true, message: '请输入姓名' },\n                { min: 2, message: '姓名长度至少是两个字符' }\n              ]\n            },\n            {\n              columnProp: 'date',\n              rules: [\n                { required: true, message: '请输入日期' }\n              ]\n            },\n            {\n              columnProp: 'gender',\n              rules: [\n                { required: true, message: '请选择性别' }\n              ]\n            },\n            {\n              columnProp: 'address',\n              rules: [\n                { required: true, message: '请输入地址' },\n                { max: 20, message: '地址最多是二十个字符' }\n              ]\n            }\n          ]\n        }\n      },\n      tableData: [{\n        name: '李',\n        date: '2016-05-02',\n        gender: '',\n        address: '四川省武当山普陀区金沙江路 1518 弄'\n      }]\n    }\n  },\n  methods: {\n    cellEditDisabled (column, rowIndex, row) {\n      this.$message('此单元格禁止编辑！')\n    },\n    switchToEditingSlot (columnProp, rowIndex, row, triggerType) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列切换到了编辑插槽`)\n      this.$refs.table.addRowEditingSlot(rowIndex) // 当某一单元格被切换到编辑状态时，开启器所在行的所有编辑\n      this.$refs.table.restoreAllEditingSlot({excludeMode: 'row', excludeRowIndex: rowIndex}) // 然后关闭其他行的编辑\n      triggerType === 'click' && this.$nextTick(() => {\n        this.$refs[`${columnProp}-${rowIndex}`].focus() // 自动聚焦当前单元格(只有这个单元格是通过点击触发编辑时, 才应该聚焦)\n      })\n    },\n    restoreEditingSlot (columnProp, rowIndex) {\n      console.log(`第 ${rowIndex + 1} 行的 ${columnProp} 列从编辑插槽切回了原始渲染结构`)\n    },\n    enterKeyDown (currentColumnProp, currentRowIndex) {\n      console.log(`当前按下 enter 键的单元格是第 ${currentRowIndex + 1} 行的 ${currentColumnProp} 列`)\n      this.$refs.table.validateCell(currentColumnProp, currentRowIndex)\n        .then(res => {\n          console.log('当前单元格校验结果', res)\n          if (res.message) { // 校验不通过，应给与提示，不要自动切到下一单元格\n            this.$message({\n              message: res.message,\n              type: 'warning'\n            })\n          } else { // 校验通过，自动切到下一单元格\n            const {columnProp, rowIndex, isFirstEditableSlot} = this.$refs.table.getNextEditableSlot(currentColumnProp, currentRowIndex)\n            console.log(`它下一个可编辑单元格是第 ${rowIndex + 1} 行的 ${columnProp} 列`)\n            if (isFirstEditableSlot) { // isFirstEditableSlot 为 true，表示下一个可编辑插槽位置是整张表的第一个可编辑 slot，换句话说，现在已经到了最后一个可编辑单元格了\n              this.$message({ message: '当前是最后一个可编辑插槽了，所以自动新增一行' })\n              this.add()\n            } else {\n              this.$refs.table.addEditingSlot(columnProp, rowIndex) // 这里调用一下添加编辑方法，主要是处理：当一行的最后一个 input 按下 enter 时，要保证能够开启到下一行\n              this.$nextTick(() => {\n                this.$refs[`${currentColumnProp}-${currentRowIndex}`] && this.$refs[`${currentColumnProp}-${currentRowIndex}`].blur() // focus 下一个 input 之前，先 blur 当前单元格input\n                this.$refs[`${columnProp}-${rowIndex}`].focus()\n              })\n            }\n          }\n        })\n    },\n    onButtonClick (button, buttonIndex, row, rowIndex) {\n      if (button === '新增') this.add()\n      if (button === '编辑') this.$refs.table.addRowEditingSlot(rowIndex)\n    },\n    add () {\n      this.tableData.push({\n        date: '2016-05-02',\n        name: '李时珍',\n        gender: '男',\n        address: '四川省武当山普陀区金沙江路 1518 弄'\n      })\n      // 添加一行数据之后，找到添加的数据的行下标，也就是最后一行，开启这一行的编辑\n      const addedRowIndex = this.tableData.length - 1\n      this.$refs.table.addRowEditingSlot(addedRowIndex)\n      this.$nextTick(() => {\n        this.$refs[`name-${addedRowIndex}`].focus() // 开启新一行的编辑之后自动聚焦到新一行的第一个单元格\n      })\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo6\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('div',[_c('df-button',{on:{\"click\":_vm.handleClick}},[_vm._v(\"获取树各层级rowKey\")]),_vm._v(\" \"),_c('df-table',{ref:\"table\",staticStyle:{\"width\":\"100%\",\"margin-bottom\":\"20px\"},attrs:{\"data\":_vm.tableData,\"row-key\":\"id\",\"border\":\"\",\"useTree\":\"\",\"default-expand-all\":\"\",\"tree-props\":{children: 'children', hasChildren: 'hasChildren'},\"columnOptions\":_vm.columnOptions}},[_c('df-table-column',{attrs:{\"type\":\"index\",\"index\":_vm.indexMethod}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"date\",\"label\":\"日期\",\"sortable\":\"\",\"width\":\"180\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"name\",\"label\":\"姓名\",\"sortable\":\"\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"editing\",fn:function(scope){return [_c('df-input',{staticStyle:{\"width\":\"100px\"},model:{value:(scope.row.name),callback:function ($$v) {_vm.$set(scope.row, \"name\", $$v)},expression:\"scope.row.name\"}})]}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"address\",\"label\":\"地址\"}})],1)],1)]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n    data() {\n      return {\n        columnOptions: {\n          editConfig: {\n            trigger: 'click',\n            mode: 'slot',\n            editableColumns: [\n              {\n                columnProp: 'name',\n                disableRowsIndex: []\n              }\n            ]\n          }\n        },\n        tableData: [{\n          id: 1,\n          date: '2016-05-02',\n          name: '李时珍',\n          address: '四川省武当山普陀区金沙江路 1518 弄'\n        }, {\n          id: 22,\n          date: '2016-05-04',\n          name: '李时珍',\n          address: '四川省武当山普陀区金沙江路 1517 弄'\n        }, {\n          id: 33,\n          date: '2016-05-01',\n          name: '李时珍',\n          address: '四川省武当山普陀区金沙江路 1519 弄',\n          children: [{\n              id: 31,\n              date: '2016-05-01',\n              name: '李时珍',\n              address: '四川省武当山普陀区金沙江路 1519 弄'\n            }, {\n              id: 32,\n              date: '2016-05-01',\n              name: '李时珍',\n              address: '四川省武当山普陀区金沙江路 1519 弄'\n          }]\n        }, {\n          id: 44,\n          date: '2016-05-03',\n          name: '李时珍',\n          address: '四川省武当山普陀区金沙江路 1516 弄'\n        }]\n      }\n    },\n    methods: {\n      handleClick () {\n        const level1 = this.$refs.table.getTreeRowKeysByLevel(1)\n        const level2 = this.$refs.table.getTreeRowKeysByLevel(2)\n        console.log('获取第一层id', level1)\n        console.log('获取第二层id', level2)\n        this.$set(this.columnOptions.editConfig.editableColumns[0], 'disableRowsIndex', level1)\n        this.$nextTick(() => this.$refs.table.addAllEditingSlot(true))\n      },\n      indexMethod(index) {\n        return index\n      }\n    }\n  }\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\"df-demo7\": (function() {\n    \n    var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[[_c('div',[_c('df-table',{ref:\"table\",staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.tableData,\"column-options\":_vm.columnOptions,\"height\":\"300\"}},[_c('df-table-column',{attrs:{\"type\":\"expand\"},scopedSlots:_vm._u([{key:\"default\",fn:function(props){return [_c('df-form',{staticClass:\"demo-table-expand\",attrs:{\"label-position\":\"left\",\"inline\":\"\"}},[_c('df-form-item',{attrs:{\"label\":\"编号\"}},[_c('span',[_vm._v(_vm._s(props.row.id))])]),_vm._v(\" \"),_c('df-form-item',{attrs:{\"label\":\"姓名\"}},[_c('span',[_vm._v(_vm._s(props.row.name))])]),_vm._v(\" \"),_c('df-form-item',{attrs:{\"label\":\"性别\"}},[_c('span',[_vm._v(_vm._s(props.row.gender))])]),_vm._v(\" \"),_c('df-form-item',{attrs:{\"label\":\"地址\"}},[_c('span',[_vm._v(_vm._s(props.row.address))])])],1)]}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"id\",\"label\":\"编号\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"headerEditing\",fn:function(scope){return _c('df-select',{attrs:{\"placeholder\":\"请选择\"},on:{\"change\":_vm.onIdChange,\"blur\":function($event){return _vm.restoreHeaderEditingSlot('id')}},model:{value:(_vm.valueId),callback:function ($$v) {_vm.valueId=$$v},expression:\"valueId\"}},_vm._l((_vm.optionsId),function(item){return _c('df-option',{key:item.value,attrs:{\"label\":item.label,\"value\":item.value}})}),1)}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"name\",\"label\":\"姓名\",\"width\":\"180\"},scopedSlots:_vm._u([{key:\"headerEditing\",fn:function(scope){return _c('df-input',{attrs:{\"placeholder\":\"输入行数并按下enter\"},on:{\"enterKeyDown\":_vm.onNameEnterKeyDown,\"blur\":function($event){return _vm.restoreHeaderEditingSlot('name')}},model:{value:(_vm.valueName),callback:function ($$v) {_vm.valueName=$$v},expression:\"valueName\"}})}}])}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"gender\",\"label\":\"性别\",\"width\":\"180\"}}),_vm._v(\" \"),_c('df-table-column',{attrs:{\"prop\":\"address\",\"label\":\"地址\"},scopedSlots:_vm._u([{key:\"headerEditing\",fn:function(scope){return _c('df-button',{on:{\"click\":function($event){return _vm.scrollToRowWithRowIndex(23)}}},[_vm._v(\"跳转到第24行\")])}}])})],1),_vm._v(\" \"),_c('df-button',{staticStyle:{\"margin\":\"8px\"},on:{\"click\":function($event){return _vm.addHeaderEditingSlot('address')}}},[_vm._v(\"开启地址列的表头编辑\")]),_vm._v(\" \"),_c('df-button',{staticStyle:{\"margin\":\"8px\"},on:{\"click\":function($event){return _vm.restoreHeaderEditingSlot('address')}}},[_vm._v(\"关闭地址列的表头编辑\")]),_vm._v(\" \"),_c('df-button',{staticStyle:{\"margin\":\"8px\"},on:{\"click\":_vm.addAllHeaderEditingSlot}},[_vm._v(\"开启所有的表头编辑\")]),_vm._v(\" \"),_c('df-button',{staticStyle:{\"margin\":\"8px\"},on:{\"click\":_vm.restoreAllHeaderEditingSlot}},[_vm._v(\"关闭所有的表头编辑\")])],1)]],2)}\nvar staticRenderFns = []\n\n  \n    const democomponentExport = {\n  data () {\n    return {\n      columnOptions: {\n        headerEditConfig: {\n          editableHeaders: ['id', 'name', 'address']\n        }\n      },\n      tableData: new Array(40).fill().map((item, index) => ({\n        id: `第 ${index + 1} 号`,\n        name: `李时珍 ${index + 1} 号`,\n        gender: '男',\n        address: `四川省武当山普陀区金沙江路 ${index + 1} 弄`\n      })),\n      optionsId: [],\n      valueId: 4,\n      valueName: ''\n    }\n  },\n  created () {\n    this.optionsId = this.tableData.map((row, rowIndex) => {\n      return {\n        value: rowIndex,\n        label: `跳转到${row.id}`\n      }\n    })\n  },\n  methods: {\n    onIdChange (rowIndex) {\n      this.scrollToRowWithRowIndex(rowIndex)\n    },\n    onNameEnterKeyDown () {\n      let rowIndex = Number(this.valueName)\n      if (this.valueName < 0)rowIndex = 0\n      if (this.valueName > this.tableData.length) rowIndex = this.tableData.length\n      this.scrollToRowWithRowIndex(rowIndex - 1)\n    },\n    scrollToRowWithRowIndex (rowIndex) {\n      // 如果表格中含有展开行, 则使用 scrollToRowIndex 跳转之前, 需要先收起所有的展开行\n      this.$refs.table.closeAllTree()\n      this.$refs.table.scrollToRowIndex(rowIndex)\n    },\n    addHeaderEditingSlot (columnProp) {\n      this.$refs.table.addHeaderEditingSlot(columnProp)\n    },\n    restoreHeaderEditingSlot (columnProp) {\n      this.$refs.table.restoreHeaderEditingSlot(columnProp)\n    },\n    addAllHeaderEditingSlot () {\n      this.$refs.table.addAllHeaderEditingSlot()\n    },\n    restoreAllHeaderEditingSlot () {\n      this.$refs.table.restoreAllHeaderEditingSlot()\n    }\n  }\n}\n    return {\n      render,\n      staticRenderFns,\n      ...democomponentExport\n    }\n  })(),\n        }\n      }\n    </script>\n  ","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js!../../../docs/md-loader/index.js!../../../node_modules/eslint-loader/index.js??ref--14-0!./tableEdit.md?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js!../../../docs/md-loader/index.js!../../../node_modules/eslint-loader/index.js??ref--14-0!./tableEdit.md?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./tableEdit.md?vue&type=template&id=4e3ee2f2&\"\nimport script from \"./tableEdit.md?vue&type=script&lang=js&\"\nexport * from \"./tableEdit.md?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}