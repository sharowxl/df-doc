(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d225c6f"],{e69a:function(e,t,n){"use strict";n.r(t);var a=function(){var e=this,t=e._self._c;return t("section",{staticClass:"content df-doc"},[e._m(0),t("p",[e._v("用清晰的层级结构展示下拉选信息，可展开或折叠。")]),e._m(1),t("p",[e._v("输入框聚焦时按 ↓ 键可跳入树结构, 在树结构内可使用上下切换聚焦项, 使用左右可展开和收起, 使用空格选中, 使用 enter 来确认。")]),t("p",[e._v("输入框聚焦时按 enter 键, 如果当前已有选中的树节点, 则收起下拉树, 如果当前没有已选中的树节点, 则默认选中第一个节点。")]),t("p",[e._v("按 esc 键收起下拉树。")]),e._m(2),t("p",[e._v("基础的下拉选树形结构展示。")]),t("demo-block",[t("div",[t("p",[e._v("基础的单选下拉树，传入"),t("code",[e._v("data")]),e._v("用于下拉树的结构数据渲染。使用"),t("code",[e._v("filterNodeMethod")]),e._v("设置输入框输入的文字的实时搜索匹配规则。")])]),t("template",{slot:"source"},[t("df-demo0")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <div class=\"custom-tree-container\">\n    <div class=\"block\">\n      <p>使用 tree-select</p>\n      <df-tree-select\n        :value=\"value\"\n        :data=\"data\"\n        :multiple=\"multiple\"\n        :valueType=\"valueType\"\n        :filterNodeMethod=\"filterNode\"\n        ref=\"treeSelect\"\n      >\n      </df-tree-select>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    const data = [{\n      id: 1,\n      label: '一级 1',\n      children: [{\n        id: 4,\n        label: '二级 1-1',\n        children: [{\n          id: 9,\n          label: '三级 1-1-1'\n        }, {\n          id: 10,\n          label: '三级 1-1-2'\n        }]\n      }]\n    }, {\n      id: 2,\n      label: '一级 2',\n      children: [{\n        id: 5,\n        label: '二级 2-1'\n      }, {\n        id: 6,\n        label: '二级 2-2'\n      }]\n    }, {\n      id: 3,\n      label: '一级 3',\n      children: [{\n        id: 7,\n        label: '二级 3-1'\n      }, {\n        id: 8,\n        label: '二级 3-2'\n      }]\n    }];\n    return {\n      value: '',\n      data: JSON.parse(JSON.stringify(data)),\n      multiple: false,\n      defaultExpand: false,\n      valueType: 'id'\n    }\n  },\n\n  methods: {\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.label.indexOf(value) !== -1;\n    }\n  }\n\n};\n<\/script>\n\n")])])])],2),e._m(3),t("p",[e._v("下拉树支持多选。")]),t("demo-block",[t("div",[t("p",[e._v("将"),t("code",[e._v("multiple")]),e._v("配置为"),t("code",[e._v("true")]),e._v("，即可开启多选。")])]),t("template",{slot:"source"},[t("df-demo1")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <div class=\"custom-tree-container\">\n    <div class=\"block\">\n      <p>使用 tree-select</p>\n      <df-tree-select\n        :value=\"value\"\n        :data=\"data\"\n        :multiple=\"multiple\"\n        :valueType=\"valueType\"\n        :filterNodeMethod=\"filterNode\"\n        ref=\"treeSelect\"\n      >\n      </df-tree-select>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    const data = [{\n      id: 1,\n      label: '一级 1',\n      children: [{\n        id: 4,\n        label: '二级 1-1',\n        children: [{\n          id: 9,\n          label: '三级 1-1-1'\n        }, {\n          id: 10,\n          label: '三级 1-1-2'\n        }]\n      }]\n    }, {\n      id: 2,\n      label: '一级 2',\n      children: [{\n        id: 5,\n        label: '二级 2-1'\n      }, {\n        id: 6,\n        label: '二级 2-2'\n      }]\n    }, {\n      id: 3,\n      label: '一级 3',\n      children: [{\n        id: 7,\n        label: '二级 3-1'\n      }, {\n        id: 8,\n        label: '二级 3-2'\n      }]\n    }];\n    return {\n      value: '',\n      data: JSON.parse(JSON.stringify(data)),\n      multiple: true,\n      defaultExpand: false,\n      valueType: 'id'\n    }\n  },\n\n  methods: {\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.label.indexOf(value) !== -1;\n    }\n  }\n\n};\n<\/script>\n\n")])])])],2),e._m(4),e._m(5),t("demo-block",[t("div",[t("p",[e._v("单选模式下，如果"),t("code",[e._v("valueType")]),e._v("为"),t("code",[e._v("id")]),e._v("，则"),t("code",[e._v("value")]),e._v("需要配置为"),t("code",[e._v("String")]),e._v("类型或者让"),t("code",[e._v("Number")]),e._v("类型，对应"),t("code",[e._v("data")]),e._v("中的某一项的"),t("code",[e._v("id")]),e._v("。")])]),t("template",{slot:"source"},[t("df-demo2")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <div class=\"custom-tree-container\">\n    <div class=\"block\">\n      <p>使用 tree-select</p>\n      <df-tree-select\n        :value=\"value\"\n        :data=\"data\"\n        :multiple=\"multiple\"\n        :valueType=\"valueType\"\n        :filterNodeMethod=\"filterNode\"\n        ref=\"treeSelect\"\n      >\n      </df-tree-select>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    const data = [{\n      id: 1,\n      label: '一级 1',\n      children: [{\n        id: 4,\n        label: '二级 1-1',\n        children: [{\n          id: 9,\n          label: '三级 1-1-1'\n        }, {\n          id: 10,\n          label: '三级 1-1-2'\n        }]\n      }]\n    }, {\n      id: 2,\n      label: '一级 2',\n      children: [{\n        id: 5,\n        label: '二级 2-1'\n      }, {\n        id: 6,\n        label: '二级 2-2'\n      }]\n    }, {\n      id: 3,\n      label: '一级 3',\n      children: [{\n        id: 7,\n        label: '二级 3-1'\n      }, {\n        id: 8,\n        label: '二级 3-2'\n      }]\n    }];\n    return {\n      value: 2,\n      valueType: 'id',\n      data: JSON.parse(JSON.stringify(data)),\n      multiple: false,\n      defaultExpand: false\n    }\n  },\n\n  methods: {\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.label.indexOf(value) !== -1;\n    }\n  }\n\n};\n<\/script>\n\n")])])])],2),e._m(6),t("demo-block",[t("div",[t("p",[e._v("单选模式下，如果"),t("code",[e._v("valueType")]),e._v("为"),t("code",[e._v("data")]),e._v("，则"),t("code",[e._v("value")]),e._v("需要配置为"),t("code",[e._v("data")]),e._v("中的某一项。")])]),t("template",{slot:"source"},[t("df-demo3")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <div class=\"custom-tree-container\">\n    <div class=\"block\">\n      <p>使用 tree-select</p>\n      <df-tree-select\n        :value=\"value\"\n        :data=\"data\"\n        :multiple=\"multiple\"\n        :valueType=\"valueType\"\n        :filterNodeMethod=\"filterNode\"\n        ref=\"treeSelect\"\n      >\n      </df-tree-select>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    const data = [{\n      id: 1,\n      label: '一级 1',\n      children: [{\n        id: 4,\n        label: '二级 1-1',\n        children: [{\n          id: 9,\n          label: '三级 1-1-1'\n        }, {\n          id: 10,\n          label: '三级 1-1-2'\n        }]\n      }]\n    }, {\n      id: 2,\n      label: '一级 2',\n      children: [{\n        id: 5,\n        label: '二级 2-1'\n      }, {\n        id: 6,\n        label: '二级 2-2'\n      }]\n    }, {\n      id: 3,\n      label: '一级 3',\n      children: [{\n        id: 7,\n        label: '二级 3-1'\n      }, {\n        id: 8,\n        label: '二级 3-2'\n      }]\n    }];\n    return {\n      value: {\n        id: 2,\n        label: '一级 2'\n      },\n      valueType: 'data',\n      data: JSON.parse(JSON.stringify(data)),\n      multiple: false,\n      defaultExpand: false\n    }\n  },\n\n  methods: {\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.label.indexOf(value) !== -1;\n    }\n  }\n\n};\n<\/script>\n\n")])])])],2),e._m(7),e._m(8),t("demo-block",[t("div",[t("p",[e._v("多选模式下，"),t("code",[e._v("value")]),e._v("必须是数组类型，如果"),t("code",[e._v("valueType")]),e._v("为"),t("code",[e._v("id")]),e._v("，则"),t("code",[e._v("value")]),e._v("中的项需要配置为"),t("code",[e._v("String")]),e._v("类型或者让"),t("code",[e._v("Number")]),e._v("类型，对应"),t("code",[e._v("data")]),e._v("中的"),t("code",[e._v("id")]),e._v("。")])]),t("template",{slot:"source"},[t("df-demo4")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <div class=\"custom-tree-container\">\n    <div class=\"block\">\n      <p>使用 tree-select</p>\n      <df-tree-select\n        :value=\"value\"\n        :data=\"data\"\n        :multiple=\"multiple\"\n        :valueType=\"valueType\"\n        :filterNodeMethod=\"filterNode\"\n        ref=\"treeSelect\"\n      >\n      </df-tree-select>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    const data = [{\n      id: 1,\n      label: '一级 1',\n      children: [{\n        id: 4,\n        label: '二级 1-1',\n        children: [{\n          id: 9,\n          label: '三级 1-1-1'\n        }, {\n          id: 10,\n          label: '三级 1-1-2'\n        }]\n      }]\n    }, {\n      id: 2,\n      label: '一级 2',\n      children: [{\n        id: 5,\n        label: '二级 2-1'\n      }, {\n        id: 6,\n        label: '二级 2-2'\n      }]\n    }, {\n      id: 3,\n      label: '一级 3',\n      children: [{\n        id: 7,\n        label: '二级 3-1'\n      }, {\n        id: 8,\n        label: '二级 3-2'\n      }]\n    }];\n    return {\n      value: [10, 7],\n      valueType: 'id',\n      data: JSON.parse(JSON.stringify(data)),\n      multiple: true,\n      defaultExpand: false\n    }\n  },\n\n  methods: {\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.label.indexOf(value) !== -1;\n    }\n  }\n\n};\n<\/script>\n\n")])])])],2),e._m(9),t("demo-block",[t("div",[t("p",[e._v("多选模式下，"),t("code",[e._v("value")]),e._v("必须是数组类型，"),t("code",[e._v("valueType")]),e._v("为"),t("code",[e._v("data")]),e._v("时，则"),t("code",[e._v("value")]),e._v("中的项需要配置为"),t("code",[e._v("data")]),e._v("中的某些项。")])]),t("template",{slot:"source"},[t("df-demo5")],1),t("template",{slot:"highlight"},[t("pre",{pre:!0},[t("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <div class=\"custom-tree-container\">\n    <div class=\"block\">\n      <p>使用 tree-select</p>\n      <df-tree-select\n        :value=\"value\"\n        :data=\"data\"\n        :multiple=\"multiple\"\n        :valueType=\"valueType\"\n        :filterNodeMethod=\"filterNode\"\n        ref=\"treeSelect\"\n      >\n      </df-tree-select>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    const data = [{\n      id: 1,\n      label: '一级 1',\n      children: [{\n        id: 4,\n        label: '二级 1-1',\n        children: [{\n          id: 9,\n          label: '三级 1-1-1'\n        }, {\n          id: 10,\n          label: '三级 1-1-2'\n        }]\n      }]\n    }, {\n      id: 2,\n      label: '一级 2',\n      children: [{\n        id: 5,\n        label: '二级 2-1'\n      }, {\n        id: 6,\n        label: '二级 2-2'\n      }]\n    }, {\n      id: 3,\n      label: '一级 3',\n      children: [{\n        id: 7,\n        label: '二级 3-1'\n      }, {\n        id: 8,\n        label: '二级 3-2'\n      }]\n    }];\n    return {\n      value: [{\n        id: 10,\n        label: '三级 1-1-2'\n      }, {\n        id: 7,\n        label: '二级 3-1'\n      }],\n      valueType: 'data',\n      data: JSON.parse(JSON.stringify(data)),\n      multiple: true,\n      defaultExpand: false\n    }\n  },\n\n  methods: {\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.label.indexOf(value) !== -1;\n    }\n  }\n\n};\n<\/script>\n\n")])])])],2),e._m(10),e._m(11),e._m(12),e._m(13),e._m(14),e._m(15),e._m(16),e._m(17),e._m(18),e._m(19),e._m(20),e._m(21)],1)},l=[function(){var e=this,t=e._self._c;return t("h2",{attrs:{id:"treeselect-shu-xing-xia-la-xuan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#treeselect-shu-xing-xia-la-xuan"}},[e._v("¶")]),e._v(" TreeSelect 树形下拉选")])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"zhi-chi-jian-pan-cao-zuo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zhi-chi-jian-pan-cao-zuo"}},[e._v("¶")]),e._v(" 支持键盘操作")])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"ji-chu-yong-fa"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ji-chu-yong-fa"}},[e._v("¶")]),e._v(" 基础用法")])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"duo-xuan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#duo-xuan"}},[e._v("¶")]),e._v(" 多选")])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"mo-ren-xuan-ze-dan-xuan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mo-ren-xuan-ze-dan-xuan"}},[e._v("¶")]),e._v(" 默认选择·单选")])},function(){var e=this,t=e._self._c;return t("p",[e._v("使用"),t("code",[e._v("value")]),e._v("和"),t("code",[e._v("valueType")]),e._v("来设置单选情况下的选择下拉树的默认选择项。"),t("br"),t("em",[t("code",[e._v("valueType")]),e._v("为"),t("code",[e._v("id")])])])},function(){var e=this,t=e._self._c;return t("p",[t("em",[t("code",[e._v("valueType")]),e._v("为"),t("code",[e._v("data")])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"mo-ren-xuan-ze-duo-xuan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mo-ren-xuan-ze-duo-xuan"}},[e._v("¶")]),e._v(" 默认选择·多选")])},function(){var e=this,t=e._self._c;return t("p",[e._v("使用"),t("code",[e._v("value")]),e._v("和"),t("code",[e._v("valueType")]),e._v("来设置多选情况下的选择下拉树的默认选择项。"),t("br"),t("em",[t("code",[e._v("valueType")]),e._v("为"),t("code",[e._v("id")])])])},function(){var e=this,t=e._self._c;return t("p",[t("em",[t("code",[e._v("valueType")]),e._v("为"),t("code",[e._v("data")])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"attributes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#attributes"}},[e._v("¶")]),e._v(" Attributes")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("参数")]),t("th",[e._v("说明")]),t("th",[e._v("类型")]),t("th",[e._v("可选值")]),t("th",[e._v("默认值")])])]),t("tbody",[t("tr",[t("td",[e._v("data")]),t("td",[e._v("tree 数据源")]),t("td",[e._v("array")]),t("td",[e._v("—")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("value")]),t("td",[e._v("默认勾选中的节点的值")]),t("td",[e._v("string/number/object/array")]),t("td",[e._v("—")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("value-type")]),t("td",[e._v("value 的类型，设置为 id 时 value 的值需要设置为选中节点的 id，设置为 data 时 value 的值需要设置为选中节点的 data")]),t("td",[e._v("string")]),t("td",[e._v("—")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("multiple")]),t("td",[e._v("是否开启多选，开启多选时，value 必须配置为数组，数组里的每一项的类型依旧遵循 valueType 的规则")]),t("td",[e._v("boolean")]),t("td",[e._v("—")]),t("td",[e._v("false")])]),t("tr",[t("td",[e._v("check-strictly")]),t("td",[e._v("在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false，默认开启父子关联")]),t("td",[e._v("boolean")]),t("td",[e._v("—")]),t("td",[e._v("false")])]),t("tr",[t("td",[e._v("default-expand")]),t("td",[e._v("tree是否默认展开")]),t("td",[e._v("boolean")]),t("td",[e._v("—")]),t("td",[e._v("true")])]),t("tr",[t("td",[e._v("expand-on-click-node")]),t("td",[e._v("是否在点击节点的时候展开或者收缩节点，在 tree-select 组件中，应该永远将该项设为 false，只有点箭头图标的时候才会展开或者收缩节点。")]),t("td",[e._v("boolean")]),t("td",[e._v("—")]),t("td",[e._v("true")])]),t("tr",[t("td",[e._v("tree-props")]),t("td",[e._v("同df-tree")]),t("td",[e._v("object")]),t("td",[e._v("—")]),t("td",[e._v("{id: 'id', label: 'label', children: 'children', disabled: 'disabled', isLeaf: 'isLeaf'}")])]),t("tr",[t("td",[e._v("filter-node-method")]),t("td",[e._v("对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏")]),t("td",[e._v("Function(value, data, node)")]),t("td",[e._v("—")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("click-outside-to-submit")]),t("td",[e._v("点击弹出层的外部时，是否要直接确定操作")]),t("td",[e._v("boolean")]),t("td",[e._v("—")]),t("td",[e._v("false")])]),t("tr",[t("td",[e._v("node-disabled-func")]),t("td",[e._v("通过回调函数的形式控制某些节点的禁用状态")]),t("td",[e._v("function")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("disabled")]),t("td",[e._v("控制组件的禁用状态")]),t("td",[e._v("boolean")]),t("td",[e._v("—")]),t("td",[e._v("false")])])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("¶")]),e._v(" props")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("参数")]),t("th",[e._v("说明")]),t("th",[e._v("类型")]),t("th",[e._v("可选值")]),t("th",[e._v("默认值")])])]),t("tbody",[t("tr",[t("td",[e._v("label")]),t("td",[e._v("指定节点标签为节点对象的某个属性值")]),t("td",[e._v("string, function(data, node)")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("children")]),t("td",[e._v("指定子树为节点对象的某个属性值")]),t("td",[e._v("string")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("disabled")]),t("td",[e._v("指定节点选择框是否禁用为节点对象的某个属性值")]),t("td",[e._v("boolean, function(data, node)")]),t("td",[e._v("—")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("isLeaf")]),t("td",[e._v("指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效")]),t("td",[e._v("boolean, function(data, node)")]),t("td",[e._v("—")]),t("td",[e._v("—")])])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"events"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[e._v("¶")]),e._v(" Events")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("事件名称")]),t("th",[e._v("说明")]),t("th",[e._v("回调参数")])])]),t("tbody",[t("tr",[t("td",[e._v("change")]),t("td",[e._v("选中值发生变化时触发")]),t("td",[e._v("目前的选中值（和 Attributes 中的 value 数据类型一致，根据 valueType 的类型进行判断）")])]),t("tr",[t("td",[e._v("clear")]),t("td",[e._v("可清空的模式下用户点击清空按钮时触发")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("blur")]),t("td",[e._v("当 input 失去焦点时触发")]),t("td",[e._v("(event: Event)")])]),t("tr",[t("td",[e._v("focus")]),t("td",[e._v("当 input 获得焦点时触发")]),t("td",[e._v("(event: Event)")])])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"tree-de-fang-fa"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tree-de-fang-fa"}},[e._v("¶")]),e._v(" Tree 的方法")])},function(){var e=this,t=e._self._c;return t("p",[t("code",[e._v("Tree")]),e._v(" 内部使用了 Node 类型的对象来包装用户传入的数据，用来保存目前节点的状态。"),t("code",[e._v("Tree")]),e._v(" 组件是 "),t("code",[e._v("Select-Tree")]),e._v(" 组件的子组件，若要获取 "),t("code",[e._v("Tree")]),e._v(" 组件，通过这种方式即可：this.$refs[SelectTreeName].getRefTree()。"),t("br"),t("code",[e._v("Tree")]),e._v(" 拥有如下方法：")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("方法名")]),t("th",[e._v("说明")]),t("th",[e._v("参数")])])]),t("tbody",[t("tr",[t("td",[e._v("filter")]),t("td",[e._v("对树节点进行筛选操作")]),t("td",[e._v("接收一个任意类型的参数，该参数会在 filter-node-method 中作为第一个参数")])]),t("tr",[t("td",[e._v("updateKeyChildren")]),t("td",[e._v("通过 keys 设置节点子元素，使用此方法必须设置 node-key 属性")]),t("td",[e._v("(key, data) 接收两个参数，1. 节点 key 2. 节点数据的数组")])]),t("tr",[t("td",[e._v("getCheckedNodes")]),t("td",[e._v("若节点可被选择（即 "),t("code",[e._v("show-checkbox")]),e._v(" 为 "),t("code",[e._v("true")]),e._v("），则返回目前被选中的节点所组成的数组")]),t("td",[e._v("(leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 "),t("code",[e._v("false")]),e._v(" 2. 是否包含半选节点，默认值为 "),t("code",[e._v("false")])])]),t("tr",[t("td",[e._v("setCheckedNodes")]),t("td",[e._v("设置目前勾选的节点，使用此方法必须设置 node-key 属性")]),t("td",[e._v("(nodes) 接收勾选节点数据的数组")])]),t("tr",[t("td",[e._v("getCheckedKeys")]),t("td",[e._v("若节点可被选择（即 "),t("code",[e._v("show-checkbox")]),e._v(" 为 "),t("code",[e._v("true")]),e._v("），则返回目前被选中的节点的 key 所组成的数组")]),t("td",[e._v("(leafOnly) 接收一个 boolean 类型的参数，若为 "),t("code",[e._v("true")]),e._v(" 则仅返回被选中的叶子节点的 keys，默认值为 "),t("code",[e._v("false")])])]),t("tr",[t("td",[e._v("setCheckedKeys")]),t("td",[e._v("通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性")]),t("td",[e._v("(keys, leafOnly) 接收两个参数，1. 勾选节点的 key 的数组 2. boolean 类型的参数，若为 "),t("code",[e._v("true")]),e._v(" 则仅设置叶子节点的选中状态，默认值为 "),t("code",[e._v("false")])])]),t("tr",[t("td",[e._v("setChecked")]),t("td",[e._v("通过 key / data 设置某个节点的勾选状态，使用此方法必须设置 node-key 属性")]),t("td",[e._v("(key/data, checked, deep) 接收三个参数，1. 勾选节点的 key 或者 data 2. boolean 类型，节点是否选中 3. boolean 类型，是否设置子节点 ，默认为 false")])]),t("tr",[t("td",[e._v("getHalfCheckedNodes")]),t("td",[e._v("若节点可被选择（即 "),t("code",[e._v("show-checkbox")]),e._v(" 为 "),t("code",[e._v("true")]),e._v("），则返回目前半选中的节点所组成的数组")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("getHalfCheckedKeys")]),t("td",[e._v("若节点可被选择（即 "),t("code",[e._v("show-checkbox")]),e._v(" 为 "),t("code",[e._v("true")]),e._v("），则返回目前半选中的节点的 key 所组成的数组")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("getCurrentKey")]),t("td",[e._v("获取当前被选中节点的 key，使用此方法必须设置 node-key 属性，若没有节点被选中则返回 null")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("getCurrentNode")]),t("td",[e._v("获取当前被选中节点的 data，若没有节点被选中则返回 null")]),t("td",[e._v("—")])]),t("tr",[t("td",[e._v("setCurrentKey")]),t("td",[e._v("通过 key 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性")]),t("td",[e._v("(key) 待被选节点的 key，若为 null 则取消当前高亮的节点")])]),t("tr",[t("td",[e._v("setCurrentNode")]),t("td",[e._v("通过 node 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性")]),t("td",[e._v("(node) 待被选节点的 node")])]),t("tr",[t("td",[e._v("getNode")]),t("td",[e._v("根据 data 或者 key 拿到 Tree 组件中的 node")]),t("td",[e._v("(data) 要获得 node 的 key 或者 data")])]),t("tr",[t("td",[e._v("remove")]),t("td",[e._v("删除 Tree 中的一个节点，使用此方法必须设置 node-key 属性")]),t("td",[e._v("(data) 要删除的节点的 data 或者 node")])]),t("tr",[t("td",[e._v("append")]),t("td",[e._v("为 Tree 中的一个节点追加一个子节点")]),t("td",[e._v("(data, parentNode) 接收两个参数，1. 要追加的子节点的 data 2. 子节点的 parent 的 data、key 或者 node")])]),t("tr",[t("td",[e._v("insertBefore")]),t("td",[e._v("为 Tree 的一个节点的前面增加一个节点")]),t("td",[e._v("(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的后一个节点的 data、key 或者 node")])]),t("tr",[t("td",[e._v("insertAfter")]),t("td",[e._v("为 Tree 的一个节点的后面增加一个节点")]),t("td",[e._v("(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的前一个节点的 data、key 或者 node")])])])])},function(){var e=this,t=e._self._c;return t("h3",{attrs:{id:"select-de-fang-fa"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#select-de-fang-fa"}},[e._v("¶")]),e._v(" Select 的方法")])},function(){var e=this,t=e._self._c;return t("p",[t("code",[e._v("Select")]),e._v(" 组件是 "),t("code",[e._v("Select-Tree")]),e._v(" 组件的子组件，若要获取 "),t("code",[e._v("Select")]),e._v(" 组件，通过这种方式即可：this.$refs[SelectTreeName].getRefSelect()。"),t("br"),t("code",[e._v("Select")]),e._v(" 拥有如下方法：")])},function(){var e=this,t=e._self._c;return t("table",[t("thead",[t("tr",[t("th",[e._v("方法名")]),t("th",[e._v("说明")]),t("th",[e._v("参数")])])]),t("tbody",[t("tr",[t("td",[e._v("focus")]),t("td",[e._v("使 input 获取焦点")]),t("td",[e._v("-")])]),t("tr",[t("td",[e._v("blur")]),t("td",[e._v("使 input 失去焦点，并隐藏下拉框")]),t("td",[e._v("-")])])])])}],d=n("5530"),r=(n("e9c4"),n("c975"),{name:"component-doc",components:{"df-demo0":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("div",{staticClass:"custom-tree-container"},[n("div",{staticClass:"block"},[n("p",[e._v("使用 tree-select")]),e._v(" "),n("df-tree-select",{ref:"treeSelect",attrs:{value:e.value,data:e.data,multiple:e.multiple,valueType:e.valueType,filterNodeMethod:e.filterNode}})],1)])]],2)},t=[],n={data:function(){var e=[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}];return{value:"",data:JSON.parse(JSON.stringify(e)),multiple:!1,defaultExpand:!1,valueType:"id"}},methods:{filterNode:function(e,t){return!e||-1!==t.label.indexOf(e)}}};return Object(d["a"])({render:e,staticRenderFns:t},n)}(),"df-demo1":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("div",{staticClass:"custom-tree-container"},[n("div",{staticClass:"block"},[n("p",[e._v("使用 tree-select")]),e._v(" "),n("df-tree-select",{ref:"treeSelect",attrs:{value:e.value,data:e.data,multiple:e.multiple,valueType:e.valueType,filterNodeMethod:e.filterNode}})],1)])]],2)},t=[],n={data:function(){var e=[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}];return{value:"",data:JSON.parse(JSON.stringify(e)),multiple:!0,defaultExpand:!1,valueType:"id"}},methods:{filterNode:function(e,t){return!e||-1!==t.label.indexOf(e)}}};return Object(d["a"])({render:e,staticRenderFns:t},n)}(),"df-demo2":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("div",{staticClass:"custom-tree-container"},[n("div",{staticClass:"block"},[n("p",[e._v("使用 tree-select")]),e._v(" "),n("df-tree-select",{ref:"treeSelect",attrs:{value:e.value,data:e.data,multiple:e.multiple,valueType:e.valueType,filterNodeMethod:e.filterNode}})],1)])]],2)},t=[],n={data:function(){var e=[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}];return{value:2,valueType:"id",data:JSON.parse(JSON.stringify(e)),multiple:!1,defaultExpand:!1}},methods:{filterNode:function(e,t){return!e||-1!==t.label.indexOf(e)}}};return Object(d["a"])({render:e,staticRenderFns:t},n)}(),"df-demo3":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("div",{staticClass:"custom-tree-container"},[n("div",{staticClass:"block"},[n("p",[e._v("使用 tree-select")]),e._v(" "),n("df-tree-select",{ref:"treeSelect",attrs:{value:e.value,data:e.data,multiple:e.multiple,valueType:e.valueType,filterNodeMethod:e.filterNode}})],1)])]],2)},t=[],n={data:function(){var e=[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}];return{value:{id:2,label:"一级 2"},valueType:"data",data:JSON.parse(JSON.stringify(e)),multiple:!1,defaultExpand:!1}},methods:{filterNode:function(e,t){return!e||-1!==t.label.indexOf(e)}}};return Object(d["a"])({render:e,staticRenderFns:t},n)}(),"df-demo4":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("div",{staticClass:"custom-tree-container"},[n("div",{staticClass:"block"},[n("p",[e._v("使用 tree-select")]),e._v(" "),n("df-tree-select",{ref:"treeSelect",attrs:{value:e.value,data:e.data,multiple:e.multiple,valueType:e.valueType,filterNodeMethod:e.filterNode}})],1)])]],2)},t=[],n={data:function(){var e=[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}];return{value:[10,7],valueType:"id",data:JSON.parse(JSON.stringify(e)),multiple:!0,defaultExpand:!1}},methods:{filterNode:function(e,t){return!e||-1!==t.label.indexOf(e)}}};return Object(d["a"])({render:e,staticRenderFns:t},n)}(),"df-demo5":function(){var e=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[[n("div",{staticClass:"custom-tree-container"},[n("div",{staticClass:"block"},[n("p",[e._v("使用 tree-select")]),e._v(" "),n("df-tree-select",{ref:"treeSelect",attrs:{value:e.value,data:e.data,multiple:e.multiple,valueType:e.valueType,filterNodeMethod:e.filterNode}})],1)])]],2)},t=[],n={data:function(){var e=[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}];return{value:[{id:10,label:"三级 1-1-2"},{id:7,label:"二级 3-1"}],valueType:"data",data:JSON.parse(JSON.stringify(e)),multiple:!0,defaultExpand:!1}},methods:{filterNode:function(e,t){return!e||-1!==t.label.indexOf(e)}}};return Object(d["a"])({render:e,staticRenderFns:t},n)}()}}),i=r,v=n("2877"),c=Object(v["a"])(i,a,l,!1,null,null,null);t["default"]=c.exports}}]);
//# sourceMappingURL=chunk-2d225c6f.65ed42ad.js.map